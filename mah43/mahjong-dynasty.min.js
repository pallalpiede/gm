!(function (e) {
    function s() {
        for (var e = 0; e < T.length; e++) T[e][0](T[e][1]);
        p = !(T = []);
    }
    function a(e, t) {
        T.push([e, t]), p || ((p = !0), S(s, 0));
    }
    function t(e, t) {
        function s(e) {
            r(t, e);
        }
        try {
            e(function (e) {
                o(t, e);
            }, s);
        } catch (e) {
            s(e);
        }
    }
    function i(t) {
        var e = (s = t.owner).state_,
            s = s.data_,
            a = t[e];
        if (((t = t.then), "function" == typeof a)) {
            e = E;
            try {
                s = a(s);
            } catch (e) {
                r(t, e);
            }
        }
        n(t, s) || (e === E && o(t, s), e === b && r(t, s));
    }
    function n(t, s) {
        var a;
        try {
            if (t === s) throw new TypeError("A promises callback cannot return that same promise.");
            if (s && ("function" == typeof s || "object" == typeof s)) {
                var e = s.then;
                if ("function" == typeof e)
                    return (
                        e.call(
                            s,
                            function (e) {
                                a || ((a = !0), (s !== e ? o : h)(t, e));
                            },
                            function (e) {
                                a || ((a = !0), r(t, e));
                            }
                        ),
                        1
                    );
            }
        } catch (e) {
            return a || r(t, e), 1;
        }
    }
    function o(e, t) {
        (e !== t && n(e, t)) || h(e, t);
    }
    function h(e, t) {
        e.state_ === N && ((e.state_ = w), (e.data_ = t), a(d, e));
    }
    function r(e, t) {
        e.state_ === N && ((e.state_ = w), (e.data_ = t), a(g, e));
    }
    function l(e) {
        var t = e.then_;
        for (e.then_ = void 0, e = 0; e < t.length; e++) i(t[e]);
    }
    function d(e) {
        (e.state_ = E), l(e);
    }
    function g(e) {
        (e.state_ = b), l(e);
    }
    function c(e) {
        if ("function" != typeof e) throw new TypeError("Promise constructor takes a function argument");
        if (!1 == this instanceof c) throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        (this.then_ = []), t(e, this);
    }
    function u() {}
    var m,
        p,
        _ = e.Promise,
        f =
            _ &&
            "resolve" in _ &&
            "reject" in _ &&
            "all" in _ &&
            "race" in _ &&
            (new _(function (e) {
                m = e;
            }),
            "function" == typeof m),
        N =
            ("undefined" != typeof exports && exports
                ? ((exports.Promise = f ? _ : c), (exports.Polyfill = c))
                : "function" == typeof define && define.amd
                ? define(function () {
                      return f ? _ : c;
                  })
                : f || (e.Promise = c),
            "pending"),
        w = "sealed",
        E = "fulfilled",
        b = "rejected",
        S = "undefined" != typeof setImmediate ? setImmediate : setTimeout,
        T = [];
    (c.prototype = {
        constructor: c,
        state_: N,
        then_: null,
        data_: void 0,
        then: function (e, t) {
            e = { owner: this, then: new this.constructor(u), fulfilled: e, rejected: t };
            return this.state_ === E || this.state_ === b ? a(i, e) : this.then_.push(e), e.then;
        },
        catch: function (e) {
            return this.then(null, e);
        },
    }),
        (c.all = function (o) {
            if ("[object Array]" !== Object.prototype.toString.call(o)) throw new TypeError("You must pass an array to Promise.all().");
            return new this(function (s, e) {
                for (var t, a = [], i = 0, n = 0; n < o.length; n++)
                    (t = o[n]) && "function" == typeof t.then
                        ? t.then(
                              (function (t) {
                                  return (
                                      i++,
                                      function (e) {
                                          (a[t] = e), --i || s(a);
                                      }
                                  );
                              })(n),
                              e
                          )
                        : (a[n] = t);
                i || s(a);
            });
        }),
        (c.race = function (i) {
            if ("[object Array]" !== Object.prototype.toString.call(i)) throw new TypeError("You must pass an array to Promise.race().");
            return new this(function (e, t) {
                for (var s, a = 0; a < i.length; a++) (s = i[a]) && "function" == typeof s.then ? s.then(e, t) : e(s);
            });
        }),
        (c.resolve = function (t) {
            return t && "object" == typeof t && t.constructor === this
                ? t
                : new this(function (e) {
                      e(t);
                  });
        }),
        (c.reject = function (s) {
            return new this(function (e, t) {
                t(s);
            });
        });
})("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this),
    (function () {
        function G(e, t, s) {
            return e.call.apply(e.bind, arguments);
        }
        function j(t, s, e) {
            var a;
            if (t)
                return 2 < arguments.length
                    ? ((a = Array.prototype.slice.call(arguments, 2)),
                      function () {
                          var e = Array.prototype.slice.call(arguments);
                          return Array.prototype.unshift.apply(e, a), t.apply(s, e);
                      })
                    : function () {
                          return t.apply(s, arguments);
                      };
            throw Error();
        }
        function m(e, t, s) {
            return (m = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? G : j).apply(null, arguments);
        }
        var h =
            Date.now ||
            function () {
                return +new Date();
            };
        function R(e, t) {
            (this.a = e), (this.o = t || e), (this.c = this.o.document);
        }
        var H = !!window.FontFace;
        function r(e, t, s, a) {
            if (((t = e.c.createElement(t)), s)) for (var i in s) s.hasOwnProperty(i) && ("style" == i ? (t.style.cssText = s[i]) : t.setAttribute(i, s[i]));
            return a && t.appendChild(e.c.createTextNode(a)), t;
        }
        function l(e, t, s) {
            (e = (e = e.c.getElementsByTagName(t)[0]) || document.documentElement).insertBefore(s, e.lastChild);
        }
        function s(e) {
            e.parentNode && e.parentNode.removeChild(e);
        }
        function p(e, t, s) {
            (t = t || []), (s = s || []);
            for (var a = e.className.split(/\s+/), i = 0; i < t.length; i += 1) {
                for (var n = !1, o = 0; o < a.length; o += 1)
                    if (t[i] === a[o]) {
                        n = !0;
                        break;
                    }
                n || a.push(t[i]);
            }
            for (t = [], i = 0; i < a.length; i += 1) {
                for (n = !1, o = 0; o < s.length; o += 1)
                    if (a[i] === s[o]) {
                        n = !0;
                        break;
                    }
                n || t.push(a[i]);
            }
            e.className = t
                .join(" ")
                .replace(/\s+/g, " ")
                .replace(/^\s+|\s+$/, "");
        }
        function n(e, t) {
            for (var s = e.className.split(/\s+/), a = 0, i = s.length; a < i; a++) if (s[a] == t) return !0;
            return !1;
        }
        function y(e, t, s) {
            function a() {
                o && i && (o(n), (o = null));
            }
            t = r(e, "link", { rel: "stylesheet", href: t, media: "all" });
            var i = !1,
                n = null,
                o = s || null;
            H
                ? ((t.onload = function () {
                      (i = !0), a();
                  }),
                  (t.onerror = function () {
                      (i = !0), (n = Error("Stylesheet failed to load")), a();
                  }))
                : setTimeout(function () {
                      (i = !0), a();
                  }, 0),
                l(e, "head", t);
        }
        function a(e, t, s, a) {
            var i,
                n,
                o = e.c.getElementsByTagName("head")[0];
            return o
                ? ((i = r(e, "script", { src: t })),
                  (n = !1),
                  (i.onload = i.onreadystatechange = function () {
                      n || (this.readyState && "loaded" != this.readyState && "complete" != this.readyState) || ((n = !0), s && s(null), (i.onload = i.onreadystatechange = null), "HEAD" == i.parentNode.tagName && o.removeChild(i));
                  }),
                  o.appendChild(i),
                  setTimeout(function () {
                      n || ((n = !0), s && s(Error("Script load timeout")));
                  }, a || 5e3),
                  i)
                : null;
        }
        function I() {
            (this.a = 0), (this.c = null);
        }
        function v(e) {
            return (
                e.a++,
                function () {
                    e.a--, i(e);
                }
            );
        }
        function A(e, t) {
            (e.c = t), i(e);
        }
        function i(e) {
            0 == e.a && e.c && (e.c(), (e.c = null));
        }
        function o(e) {
            this.a = e || "-";
        }
        function O(e, t) {
            (this.c = e), (this.f = 4), (this.a = "n");
            e = (t || "n4").match(/^([nio])([1-9])$/i);
            e && ((this.a = e[1]), (this.f = parseInt(e[2], 10)));
        }
        function d(e) {
            var t = [];
            e = e.split(/,\s*/);
            for (var s = 0; s < e.length; s++) {
                var a = e[s].replace(/['"]/g, "");
                -1 != a.indexOf(" ") || /^\d/.test(a) ? t.push("'" + a + "'") : t.push(a);
            }
            return t.join(",");
        }
        function _(e) {
            return e.a + e.f;
        }
        function g(e) {
            var t = "normal";
            return "o" === e.a ? (t = "oblique") : "i" === e.a && (t = "italic"), t;
        }
        function F(e, t) {
            (this.c = e), (this.f = e.o.document.documentElement), (this.h = t), (this.a = new o("-")), (this.j = !1 !== t.events), (this.g = !1 !== t.classes);
        }
        function f(e) {
            var t, s, a;
            e.g && ((t = n(e.f, e.a.c("wf", "active"))), (s = []), (a = [e.a.c("wf", "loading")]), t || s.push(e.a.c("wf", "inactive")), p(e.f, s, a)), N(e, "inactive");
        }
        function N(e, t, s) {
            e.j && e.h[t] && (s ? e.h[t](s.c, _(s)) : e.h[t]());
        }
        function D() {
            this.c = {};
        }
        function c(e, t) {
            (this.c = e), (this.f = t), (this.a = r(this.c, "span", { "aria-hidden": "true" }, this.f));
        }
        function u(e) {
            l(e.c, "body", e.a);
        }
        function w(e) {
            return (
                "display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:" +
                d(e.c) +
                ";font-style:" +
                g(e) +
                ";font-weight:" +
                e.f +
                "00;"
            );
        }
        function E(e, t, s, a, i, n) {
            (this.g = e), (this.j = t), (this.a = a), (this.c = s), (this.f = i || 3e3), (this.h = n || void 0);
        }
        function b(e, t, s, a, i, n, o) {
            (this.v = e),
                (this.B = t),
                (this.c = s),
                (this.a = a),
                (this.s = o || "BESbswy"),
                (this.f = {}),
                (this.w = i || 3e3),
                (this.u = n || null),
                (this.m = this.j = this.h = this.g = null),
                (this.g = new c(this.c, this.s)),
                (this.h = new c(this.c, this.s)),
                (this.j = new c(this.c, this.s)),
                (this.m = new c(this.c, this.s)),
                (e = w((e = new O(this.a.c + ",serif", _(this.a))))),
                (this.g.a.style.cssText = e),
                (e = w((e = new O(this.a.c + ",sans-serif", _(this.a))))),
                (this.h.a.style.cssText = e),
                (e = w((e = new O("serif", _(this.a))))),
                (this.j.a.style.cssText = e),
                (e = w((e = new O("sans-serif", _(this.a))))),
                (this.m.a.style.cssText = e),
                u(this.g),
                u(this.h),
                u(this.j),
                u(this.m);
        }
        (o.prototype.c = function (e) {
            for (var t = [], s = 0; s < arguments.length; s++) t.push(arguments[s].replace(/[\W_]+/g, "").toLowerCase());
            return t.join(this.a);
        }),
            (E.prototype.start = function () {
                var i = this.c.o.document,
                    n = this,
                    o = h(),
                    e = new Promise(function (s, a) {
                        !(function t() {
                            var e;
                            h() - o >= n.f
                                ? a()
                                : i.fonts.load(g((e = n.a)) + " " + e.f + "00 300px " + d(e.c), n.h).then(
                                      function (e) {
                                          1 <= e.length ? s() : setTimeout(t, 25);
                                      },
                                      function () {
                                          a();
                                      }
                                  );
                        })();
                    }),
                    s = null,
                    t = new Promise(function (e, t) {
                        s = setTimeout(t, n.f);
                    });
                Promise.race([t, e]).then(
                    function () {
                        s && (clearTimeout(s), (s = null)), n.g(n.a);
                    },
                    function () {
                        n.j(n.a);
                    }
                );
            });
        var S = { D: "serif", C: "sans-serif" },
            t = null;
        function T() {
            var e;
            return null === t && ((e = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent)), (t = !!e && (parseInt(e[1], 10) < 536 || (536 === parseInt(e[1], 10) && parseInt(e[2], 10) <= 11)))), t;
        }
        function M(e, t, s) {
            for (var a in S) if (S.hasOwnProperty(a) && t === e.f[S[a]] && s === e.f[S[a]]) return !0;
            return !1;
        }
        function P(e) {
            var t,
                s = e.g.a.offsetWidth,
                a = e.h.a.offsetWidth;
            (t = (t = s === e.f.serif && a === e.f["sans-serif"]) ? t : T() && M(e, s, a))
                ? h() - e.A >= e.w
                    ? T() && M(e, s, a) && (null === e.u || e.u.hasOwnProperty(e.a.c))
                        ? L(e, e.v)
                        : L(e, e.B)
                    : setTimeout(
                          m(function () {
                              P(this);
                          }, e),
                          50
                      )
                : L(e, e.v);
        }
        function L(e, t) {
            setTimeout(
                m(function () {
                    s(this.g.a), s(this.h.a), s(this.j.a), s(this.m.a), t(this.a);
                }, e),
                0
            );
        }
        function B(e, t, s) {
            (this.c = e), (this.a = t), (this.f = 0), (this.m = this.j = !1), (this.s = s);
        }
        b.prototype.start = function () {
            (this.f.serif = this.j.a.offsetWidth), (this.f["sans-serif"] = this.m.a.offsetWidth), (this.A = h()), P(this);
        };
        var x = null;
        function C(e) {
            0 == --e.f && e.j && (e.m ? ((e = e.a).g && p(e.f, [e.a.c("wf", "active")], [e.a.c("wf", "loading"), e.a.c("wf", "inactive")]), N(e, "active")) : f(e.a));
        }
        function U(e) {
            (this.j = e), (this.a = new D()), (this.h = 0), (this.f = this.g = !0);
        }
        function J(e, t) {
            (this.c = e), (this.a = t);
        }
        function V(e, t) {
            (this.c = e), (this.a = t);
        }
        function W(e, t) {
            (this.c = e || "https://fonts.googleapis.com/css"), (this.a = []), (this.f = []), (this.g = t || "");
        }
        (B.prototype.g = function (e) {
            var t = this.a;
            t.g && p(t.f, [t.a.c("wf", e.c, _(e).toString(), "active")], [t.a.c("wf", e.c, _(e).toString(), "loading"), t.a.c("wf", e.c, _(e).toString(), "inactive")]), N(t, "fontactive", e), (this.m = !0), C(this);
        }),
            (B.prototype.h = function (e) {
                var t,
                    s,
                    a,
                    i = this.a;
                i.g && ((t = n(i.f, i.a.c("wf", e.c, _(e).toString(), "active"))), (s = []), (a = [i.a.c("wf", e.c, _(e).toString(), "loading")]), t || s.push(i.a.c("wf", e.c, _(e).toString(), "inactive")), p(i.f, s, a)),
                    N(i, "fontinactive", e),
                    C(this);
            }),
            (U.prototype.load = function (e) {
                (this.c = new R(this.j, e.context || this.j)), (this.g = !1 !== e.events), (this.f = !1 !== e.classes);
                var a = this,
                    t = new F(this.c, e),
                    s = e,
                    i = [],
                    e = s.timeout,
                    i =
                        ((function (e) {
                            e.g && p(e.f, [e.a.c("wf", "loading")]), N(e, "loading");
                        })(t),
                        (function (e, t, s) {
                            var a,
                                i,
                                n = [];
                            for (a in t) !t.hasOwnProperty(a) || ((i = e.c[a]) && n.push(i(t[a], s)));
                            return n;
                        })(a.a, s, a.c)),
                    n = new B(a.c, t, e);
                for (a.h = i.length, t = 0, s = i.length; t < s; t++)
                    i[t].load(function (e, t, s) {
                        var l, d, g, c, u;
                        (l = n),
                            (d = e),
                            (g = t),
                            (c = s),
                            (u = 0 == --(e = a).h),
                            (e.f || e.g) &&
                                setTimeout(function () {
                                    var e = c || null,
                                        t = g || {};
                                    if (0 === d.length && u) f(l.a);
                                    else {
                                        (l.f += d.length), u && (l.j = u);
                                        for (var s = [], a = 0; a < d.length; a++) {
                                            var i,
                                                n = d[a],
                                                o = t[n.c],
                                                h = l.a,
                                                r = n;
                                            h.g && p(h.f, [h.a.c("wf", r.c, _(r).toString(), "loading")]),
                                                N(h, "fontloading", r),
                                                (h = (x =
                                                    (h = null) === x
                                                        ? !!window.FontFace &&
                                                          ((r = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent)),
                                                          (i = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor)),
                                                          r ? 42 < parseInt(r[1], 10) : !i)
                                                        : x)
                                                    ? new E(m(l.g, l), m(l.h, l), l.c, n, l.s, o)
                                                    : new b(m(l.g, l), m(l.h, l), l.c, n, l.s, e, o)),
                                                s.push(h);
                                        }
                                        for (a = 0; a < s.length; a++) s[a].start();
                                    }
                                }, 0);
                    });
            }),
            (J.prototype.load = function (o) {
                var h,
                    t = this,
                    r = t.a.projectId,
                    e = t.a.version;
                r
                    ? ((h = t.c.o),
                      (a(this.c, (t.a.api || "https://fast.fonts.net/jsapi") + "/" + r + ".js" + (e ? "?v=" + e : ""), function (e) {
                          e
                              ? o([])
                              : ((h["__MonotypeConfiguration__" + r] = function () {
                                    return t.a;
                                }),
                                (function e() {
                                    if (h["__mti_fntLst" + r]) {
                                        var t,
                                            s = h["__mti_fntLst" + r](),
                                            a = [];
                                        if (s)
                                            for (var i = 0; i < s.length; i++) {
                                                var n = s[i].fontfamily;
                                                null != s[i].fontStyle && null != s[i].fontWeight ? ((t = s[i].fontStyle + s[i].fontWeight), a.push(new O(n, t))) : a.push(new O(n));
                                            }
                                        o(a);
                                    } else
                                        setTimeout(function () {
                                            e();
                                        }, 50);
                                })());
                      }).id = "__MonotypeAPIScript__" + r))
                    : o([]);
            }),
            (V.prototype.load = function (e) {
                for (var t = this.a.urls || [], s = this.a.families || [], a = this.a.testStrings || {}, i = new I(), n = 0, o = t.length; n < o; n++) y(this.c, t[n], v(i));
                var h = [];
                for (n = 0, o = s.length; n < o; n++)
                    if ((t = s[n].split(":"))[1]) for (var r = t[1].split(","), l = 0; l < r.length; l += 1) h.push(new O(t[0], r[l]));
                    else h.push(new O(t[0]));
                A(i, function () {
                    e(h, a);
                });
            });
        function Y(e) {
            (this.f = e), (this.a = []), (this.c = {});
        }
        var z = { latin: "BESbswy", "latin-ext": "çöüğş", cyrillic: "йяЖ", greek: "αβΣ", khmer: "កខគ", Hanuman: "កខគ" },
            X = {
                thin: "1",
                extralight: "2",
                "extra-light": "2",
                ultralight: "2",
                "ultra-light": "2",
                light: "3",
                regular: "4",
                book: "4",
                medium: "5",
                "semi-bold": "6",
                semibold: "6",
                "demi-bold": "6",
                demibold: "6",
                bold: "7",
                "extra-bold": "8",
                extrabold: "8",
                "ultra-bold": "8",
                ultrabold: "8",
                black: "9",
                heavy: "9",
                l: "3",
                r: "4",
                b: "7",
            },
            q = { i: "i", italic: "i", n: "n", normal: "n" },
            Z = /^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
        function K(e, t) {
            (this.c = e), (this.a = t);
        }
        var Q = { Arimo: !0, Cousine: !0, Tinos: !0 };
        function $(e, t) {
            (this.c = e), (this.a = t);
        }
        function ee(e, t) {
            (this.c = e), (this.f = t), (this.a = []);
        }
        (K.prototype.load = function (e) {
            for (var t = new I(), s = this.c, a = new W(this.a.api, this.a.text), i = this.a.families, n = a, o = i, h = o.length, r = 0; r < h; r++) {
                var l = o[r].split(":"),
                    d = (3 == l.length && n.f.push(l.pop()), "");
                2 == l.length && "" != l[1] && (d = ":"), n.a.push(l.join(d));
            }
            for (var g = new Y(i), c = g, u = c.f.length, m = 0; m < u; m++) {
                var p = c.f[m].split(":"),
                    _ = p[0].replace(/\+/g, " "),
                    f = ["n4"];
                if (2 <= p.length) {
                    var N,
                        w,
                        E = p[1],
                        b = [];
                    if (E)
                        for (var S = (E = E.split(",")).length, T = 0; T < S; T++)
                            (w =
                                !(w = E[T]).match(/^[\w-]+$/) || null == (N = Z.exec(w.toLowerCase()))
                                    ? ""
                                    : [(w = null == (w = N[2]) || "" == w ? "n" : q[w]), (N = null == (N = N[1]) || "" == N ? "4" : X[N] || (isNaN(N) ? "4" : N.substr(0, 1)))].join("")) && b.push(w);
                    0 < b.length && (f = b), 3 == p.length && ((b = []), 0 < (p = (p = p[2]) ? p.split(",") : b).length && (p = z[p[0]]) && (c.c[_] = p));
                }
                for (c.c[_] || ((p = z[_]) && (c.c[_] = p)), p = 0; p < f.length; p += 1) c.a.push(new O(_, f[p]));
            }
            y(
                s,
                (function (e) {
                    if (0 == e.a.length) throw Error("No fonts to load!");
                    if (-1 != e.c.indexOf("kit=")) return e.c;
                    for (var t = e.a.length, s = [], a = 0; a < t; a++) s.push(e.a[a].replace(/ /g, "+"));
                    return (t = e.c + "?family=" + s.join("%7C")), 0 < e.f.length && (t += "&subset=" + e.f.join(",")), 0 < e.g.length && (t += "&text=" + encodeURIComponent(e.g)), t;
                })(a),
                v(t)
            ),
                A(t, function () {
                    e(g.a, g.c, Q);
                });
        }),
            ($.prototype.load = function (o) {
                var e = this.a.id,
                    h = this.c.o;
                e
                    ? a(
                          this.c,
                          (this.a.api || "https://use.typekit.net") + "/" + e + ".js",
                          function (e) {
                              if (e) o([]);
                              else if (h.Typekit && h.Typekit.config && h.Typekit.config.fn) {
                                  e = h.Typekit.config.fn;
                                  for (var t = [], s = 0; s < e.length; s += 2) for (var a = e[s], i = e[s + 1], n = 0; n < i.length; n++) t.push(new O(a, i[n]));
                                  try {
                                      h.Typekit.load({ events: !1, classes: !1, async: !0 });
                                  } catch (e) {}
                                  o(t);
                              }
                          },
                          2e3
                      )
                    : o([]);
            }),
            (ee.prototype.load = function (r) {
                var e = this.f.id,
                    t = this.c.o,
                    l = this;
                e
                    ? (t.__webfontfontdeckmodule__ || (t.__webfontfontdeckmodule__ = {}),
                      (t.__webfontfontdeckmodule__[e] = function (e, t) {
                          for (var s, a, i, n = 0, o = t.fonts.length; n < o; ++n) {
                              var h = t.fonts[n];
                              l.a.push(
                                  new O(
                                      h.name,
                                      ((h = "font-weight:" + h.weight + ";font-style:" + h.style),
                                      (i = a = s = void 0),
                                      (s = 4),
                                      (a = "n"),
                                      (i = null),
                                      h &&
                                          ((i = h.match(/(normal|oblique|italic)/i)) && i[1] && (a = i[1].substr(0, 1).toLowerCase()),
                                          (i = h.match(/([1-9]00|normal|bold)/i)) && i[1] && (/bold/i.test(i[1]) ? (s = 7) : /[1-9]00/.test(i[1]) && (s = parseInt(i[1].substr(0, 1), 10)))),
                                      a + s)
                                  )
                              );
                          }
                          r(l.a);
                      }),
                      a(this.c, (this.f.api || "https://f.fontdeck.com/s/css/js/") + ((t = this.c).o.location.hostname || t.a.location.hostname) + "/" + e + ".js", function (e) {
                          e && r([]);
                      }))
                    : r([]);
            });
        var e = new U(window),
            k =
                ((e.a.c.custom = function (e, t) {
                    return new V(t, e);
                }),
                (e.a.c.fontdeck = function (e, t) {
                    return new ee(t, e);
                }),
                (e.a.c.monotype = function (e, t) {
                    return new J(t, e);
                }),
                (e.a.c.typekit = function (e, t) {
                    return new $(t, e);
                }),
                (e.a.c.google = function (e, t) {
                    return new K(t, e);
                }),
                { load: m(e.load, e) });
        "function" == typeof define && define.amd
            ? define(function () {
                  return k;
              })
            : "undefined" != typeof module && module.exports
            ? (module.exports = k)
            : ((window.WebFont = k), window.WebFontConfig && e.load(window.WebFontConfig));
    })(),
    (function (e, t) {
        "object" == typeof exports && "undefined" != typeof module ? (module.exports = t()) : "function" == typeof define && define.amd ? define(t) : ((e = "undefined" != typeof globalThis ? globalThis : e || self).i18next = t());
    })(this, function () {
        "use strict";
        function O(e) {
            return (O =
                "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                    ? function (e) {
                          return typeof e;
                      }
                    : function (e) {
                          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                      })(e);
        }
        function M(a) {
            for (var e = 1; e < arguments.length; e++) {
                var i = null != arguments[e] ? Object(arguments[e]) : {},
                    t = Object.keys(i);
                (t =
                    "function" == typeof Object.getOwnPropertySymbols
                        ? t.concat(
                              Object.getOwnPropertySymbols(i).filter(function (e) {
                                  return Object.getOwnPropertyDescriptor(i, e).enumerable;
                              })
                          )
                        : t).forEach(function (e) {
                    var t, s;
                    (t = a), (s = i[(e = e)]), e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s);
                });
            }
            return a;
        }
        function o(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        function a(e, t) {
            for (var s = 0; s < t.length; s++) {
                var a = t[s];
                (a.enumerable = a.enumerable || !1), (a.configurable = !0), "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);
            }
        }
        function e(e, t, s) {
            t && a(e.prototype, t), s && a(e, s);
        }
        function h(e) {
            if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e;
        }
        function r(e, t) {
            return !t || ("object" !== O(t) && "function" != typeof t) ? h(e) : t;
        }
        function l(e) {
            return (l = Object.setPrototypeOf
                ? Object.getPrototypeOf
                : function (e) {
                      return e.__proto__ || Object.getPrototypeOf(e);
                  })(e);
        }
        function s(e, t) {
            return (s =
                Object.setPrototypeOf ||
                function (e, t) {
                    return (e.__proto__ = t), e;
                })(e, t);
        }
        function t(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
            (e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } })), t && s(e, t);
        }
        var i = {
                type: "logger",
                log: function (e) {
                    this.output("log", e);
                },
                warn: function (e) {
                    this.output("warn", e);
                },
                error: function (e) {
                    this.output("error", e);
                },
                output: function (e, t) {
                    console && console[e];
                },
            },
            d =
                (e(c, [
                    {
                        key: "init",
                        value: function (e) {
                            var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                            (this.prefix = t.prefix || "i18next:"), (this.logger = e || i), (this.options = t), (this.debug = t.debug);
                        },
                    },
                    {
                        key: "setDebug",
                        value: function (e) {
                            this.debug = e;
                        },
                    },
                    {
                        key: "log",
                        value: function () {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            return this.forward(t, "log", "", !0);
                        },
                    },
                    {
                        key: "warn",
                        value: function () {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            return this.forward(t, "warn", "", !0);
                        },
                    },
                    {
                        key: "error",
                        value: function () {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            return this.forward(t, "error", "");
                        },
                    },
                    {
                        key: "deprecate",
                        value: function () {
                            for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                            return this.forward(t, "warn", "WARNING DEPRECATED: ", !0);
                        },
                    },
                    {
                        key: "forward",
                        value: function (e, t, s, a) {
                            return a && !this.debug ? null : ("string" == typeof e[0] && (e[0] = "".concat(s).concat(this.prefix, " ").concat(e[0])), this.logger[t](e));
                        },
                    },
                    {
                        key: "create",
                        value: function (e) {
                            return new c(this.logger, M({}, { prefix: "".concat(this.prefix, ":").concat(e, ":") }, this.options));
                        },
                    },
                ]),
                new c()),
            g =
                (e(n, [
                    {
                        key: "on",
                        value: function (e, t) {
                            var s = this;
                            return (
                                e.split(" ").forEach(function (e) {
                                    (s.observers[e] = s.observers[e] || []), s.observers[e].push(t);
                                }),
                                this
                            );
                        },
                    },
                    {
                        key: "off",
                        value: function (e, t) {
                            this.observers[e] &&
                                (t
                                    ? (this.observers[e] = this.observers[e].filter(function (e) {
                                          return e !== t;
                                      }))
                                    : delete this.observers[e]);
                        },
                    },
                    {
                        key: "emit",
                        value: function (t) {
                            for (var e = arguments.length, s = new Array(1 < e ? e - 1 : 0), a = 1; a < e; a++) s[a - 1] = arguments[a];
                            this.observers[t] &&
                                [].concat(this.observers[t]).forEach(function (e) {
                                    e.apply(void 0, s);
                                }),
                                this.observers["*"] &&
                                    [].concat(this.observers["*"]).forEach(function (e) {
                                        e.apply(e, [t].concat(s));
                                    });
                        },
                    },
                ]),
                n);
        function n() {
            o(this, n), (this.observers = {});
        }
        function c(e) {
            var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            o(this, c), this.init(e, t);
        }
        function u() {
            var s,
                a,
                e = new Promise(function (e, t) {
                    (s = e), (a = t);
                });
            return (e.resolve = s), (e.reject = a), e;
        }
        function m(e) {
            return null == e ? "" : "" + e;
        }
        function p(e, t, s) {
            function a(e) {
                return e && -1 < e.indexOf("###") ? e.replace(/###/g, ".") : e;
            }
            function i() {
                return !e || "string" == typeof e;
            }
            for (var n = "string" != typeof t ? [].concat(t) : t.split("."); 1 < n.length; ) {
                if (i()) return {};
                var o = a(n.shift());
                !e[o] && s && (e[o] = new s()), (e = Object.prototype.hasOwnProperty.call(e, o) ? e[o] : {});
            }
            return i() ? {} : { obj: e, k: a(n.shift()) };
        }
        function _(e, t, s) {
            e = p(e, t, Object);
            e.obj[e.k] = s;
        }
        function f(e, t) {
            (e = p(e, t)), (t = e.obj), (e = e.k);
            if (t) return t[e];
        }
        function N(e, t, s) {
            e = f(e, s);
            return void 0 !== e ? e : f(t, s);
        }
        function w(e) {
            return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        }
        var G = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;" };
        function j(e) {
            return "string" == typeof e
                ? e.replace(/[&<>"'\/]/g, function (e) {
                      return G[e];
                  })
                : e;
        }
        var E = "undefined" != typeof window && window.navigator && window.navigator.userAgent && -1 < window.navigator.userAgent.indexOf("MSIE"),
            R =
                (t(y, g),
                e(y, [
                    {
                        key: "addNamespaces",
                        value: function (e) {
                            this.options.ns.indexOf(e) < 0 && this.options.ns.push(e);
                        },
                    },
                    {
                        key: "removeNamespaces",
                        value: function (e) {
                            e = this.options.ns.indexOf(e);
                            -1 < e && this.options.ns.splice(e, 1);
                        },
                    },
                    {
                        key: "getResource",
                        value: function (e, t, s) {
                            var a = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {},
                                i = (void 0 !== a.keySeparator ? a : this.options).keySeparator,
                                a = (void 0 !== a.ignoreJSONStructure ? a : this.options).ignoreJSONStructure,
                                n = [e, t],
                                n = (s && "string" != typeof s && (n = n.concat(s)), s && "string" == typeof s && (n = n.concat(i ? s.split(i) : s)), -1 < e.indexOf(".") && (n = e.split(".")), f(this.data, n));
                            return n || !a || "string" != typeof s
                                ? n
                                : (function e(t, s) {
                                      var a = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : ".";
                                      if (t) {
                                          if (t[s]) return t[s];
                                          for (var i = s.split(a), n = t, o = 0; o < i.length; ++o) {
                                              if (!n) return;
                                              if ("string" == typeof n[i[o]] && o + 1 < i.length) return;
                                              if (void 0 === n[i[o]]) {
                                                  for (var h, r = 2, l = i.slice(o, o + r).join(a), d = n[l]; void 0 === d && i.length > o + r; ) r++, (d = n[(l = i.slice(o, o + r).join(a))]);
                                                  return void 0 === d ? void 0 : "string" == typeof d ? d : l && "string" == typeof d[l] ? d[l] : (h = i.slice(o + r).join(a)) ? e(d, h, a) : void 0;
                                              }
                                              n = n[i[o]];
                                          }
                                          return n;
                                      }
                                  })(this.data && this.data[e] && this.data[e][t], s, i);
                        },
                    },
                    {
                        key: "addResource",
                        value: function (e, t, s, a) {
                            var i = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : { silent: !1 },
                                n = this.options.keySeparator,
                                o = (void 0 === n && (n = "."), [e, t]);
                            s && (o = o.concat(n ? s.split(n) : s)), -1 < e.indexOf(".") && ((a = t), (t = (o = e.split("."))[1])), this.addNamespaces(t), _(this.data, o, a), i.silent || this.emit("added", e, t, s, a);
                        },
                    },
                    {
                        key: "addResources",
                        value: function (e, t, s) {
                            var a,
                                i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : { silent: !1 };
                            for (a in s) ("string" != typeof s[a] && "[object Array]" !== Object.prototype.toString.apply(s[a])) || this.addResource(e, t, a, s[a], { silent: !0 });
                            i.silent || this.emit("added", e, t, s);
                        },
                    },
                    {
                        key: "addResourceBundle",
                        value: function (e, t, s, a, i) {
                            var n = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : { silent: !1 },
                                o = [e, t],
                                h = (-1 < e.indexOf(".") && ((a = s), (s = t), (t = (o = e.split("."))[1])), this.addNamespaces(t), f(this.data, o) || {});
                            a
                                ? (function e(t, s, a) {
                                      for (var i in s)
                                          "__proto__" !== i &&
                                              "constructor" !== i &&
                                              (i in t ? ("string" == typeof t[i] || t[i] instanceof String || "string" == typeof s[i] || s[i] instanceof String ? a && (t[i] = s[i]) : e(t[i], s[i], a)) : (t[i] = s[i]));
                                  })(h, s, i)
                                : (h = M({}, h, s)),
                                _(this.data, o, h),
                                n.silent || this.emit("added", e, t, s);
                        },
                    },
                    {
                        key: "removeResourceBundle",
                        value: function (e, t) {
                            this.hasResourceBundle(e, t) && delete this.data[e][t], this.removeNamespaces(t), this.emit("removed", e, t);
                        },
                    },
                    {
                        key: "hasResourceBundle",
                        value: function (e, t) {
                            return void 0 !== this.getResource(e, t);
                        },
                    },
                    {
                        key: "getResourceBundle",
                        value: function (e, t) {
                            return (t = t || this.options.defaultNS), "v1" === this.options.compatibilityAPI ? M({}, {}, this.getResource(e, t)) : this.getResource(e, t);
                        },
                    },
                    {
                        key: "getDataByLanguage",
                        value: function (e) {
                            return this.data[e];
                        },
                    },
                    {
                        key: "toJSON",
                        value: function () {
                            return this.data;
                        },
                    },
                ]),
                y),
            b = {
                processors: {},
                addPostProcessor: function (e) {
                    this.processors[e.name] = e;
                },
                handle: function (e, t, s, a, i) {
                    var n = this;
                    return (
                        e.forEach(function (e) {
                            n.processors[e] && (t = n.processors[e].process(t, s, a, i));
                        }),
                        t
                    );
                },
            },
            S = {},
            T =
                (t(P, g),
                e(
                    P,
                    [
                        {
                            key: "changeLanguage",
                            value: function (e) {
                                e && (this.language = e);
                            },
                        },
                        {
                            key: "exists",
                            value: function (e) {
                                return null != e && (e = this.resolve(e, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : { interpolation: {} })) && void 0 !== e.res;
                            },
                        },
                        {
                            key: "extractFromKey",
                            value: function (e, t) {
                                var s = (void 0 !== t.nsSeparator ? t : this.options).nsSeparator,
                                    a = (void 0 !== t.keySeparator ? t : this.options).keySeparator,
                                    t = t.ns || this.options.defaultNS;
                                if ((s = void 0 === s ? ":" : s) && -1 < e.indexOf(s)) {
                                    var i = e.match(this.interpolator.nestingRegexp);
                                    if (i && 0 < i.length) return { key: e, namespaces: t };
                                    i = e.split(s);
                                    (s !== a || (s === a && -1 < this.options.ns.indexOf(i[0]))) && (t = i.shift()), (e = i.join(a));
                                }
                                return { key: e, namespaces: (t = "string" == typeof t ? [t] : t) };
                            },
                        },
                        {
                            key: "translate",
                            value: function (e, a, t) {
                                var i = this;
                                if (((a = (a = "object" !== O(a) && this.options.overloadTranslationOptionHandler ? this.options.overloadTranslationOptionHandler(arguments) : a) || {}), null == e)) return "";
                                Array.isArray(e) || (e = [String(e)]);
                                var s = (void 0 !== a.keySeparator ? a : this.options).keySeparator,
                                    n = this.extractFromKey(e[e.length - 1], a),
                                    o = n.key,
                                    h = n.namespaces,
                                    r = h[h.length - 1],
                                    n = a.lng || this.language,
                                    l = a.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                                if (n && "cimode" === n.toLowerCase()) return l ? ((l = a.nsSeparator || this.options.nsSeparator), r + l + o) : o;
                                var l = this.resolve(e, a),
                                    d = l && l.res,
                                    g = (l && l.usedKey) || o,
                                    c = (l && l.exactUsedKey) || o,
                                    u = Object.prototype.toString.apply(d),
                                    m = (void 0 !== a.joinArrays ? a : this.options).joinArrays,
                                    p = !this.i18nFormat || this.i18nFormat.handleAsObject;
                                if (
                                    p &&
                                    d &&
                                    "string" != typeof d &&
                                    "boolean" != typeof d &&
                                    "number" != typeof d &&
                                    ["[object Number]", "[object Function]", "[object RegExp]"].indexOf(u) < 0 &&
                                    ("string" != typeof m || "[object Array]" !== u)
                                ) {
                                    if (!a.returnObjects && !this.options.returnObjects)
                                        return (
                                            this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!"),
                                            this.options.returnedObjectHandler ? this.options.returnedObjectHandler(g, d, M({}, a, { ns: h })) : "key '".concat(o, " (").concat(this.language, ")' returned an object instead of string.")
                                        );
                                    if (s) {
                                        var _,
                                            f,
                                            N = "[object Array]" === u,
                                            w = N ? [] : {},
                                            E = N ? c : g;
                                        for (_ in d) Object.prototype.hasOwnProperty.call(d, _) && ((f = "".concat(E).concat(s).concat(_)), (w[_] = this.translate(f, M({}, a, { joinArrays: !1, ns: h }))), w[_] === f && (w[_] = d[_]));
                                        d = w;
                                    }
                                } else if (p && "string" == typeof m && "[object Array]" === u) (d = d.join(m)) && (d = this.extendTranslation(d, e, a, t));
                                else {
                                    var N = !1,
                                        c = !1,
                                        g = void 0 !== a.count && "string" != typeof a.count,
                                        p = P.hasDefaultValue(a),
                                        u = g ? this.pluralResolver.getSuffix(n, a.count) : "",
                                        b = a["defaultValue".concat(u)] || a.defaultValue,
                                        S =
                                            (!this.isValidLookup(d) && p && ((N = !0), (d = b)),
                                            this.isValidLookup(d) || ((c = !0), (d = o)),
                                            (a.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && c ? void 0 : d),
                                        T = p && b !== d && this.options.updateMissing;
                                    if (c || N || T) {
                                        this.logger.log(T ? "updateKey" : "missingKey", n, r, o, T ? b : d),
                                            s &&
                                                (m = this.resolve(o, M({}, a, { keySeparator: !1 }))) &&
                                                m.res &&
                                                this.logger.warn(
                                                    "Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format."
                                                );
                                        var y = [],
                                            I = this.languageUtils.getFallbackCodes(this.options.fallbackLng, a.lng || this.language);
                                        if ("fallback" === this.options.saveMissingTo && I && I[0]) for (var v = 0; v < I.length; v++) y.push(I[v]);
                                        else "all" === this.options.saveMissingTo ? (y = this.languageUtils.toResolveHierarchy(a.lng || this.language)) : y.push(a.lng || this.language);
                                        var A = function (e, t, s) {
                                            i.options.missingKeyHandler
                                                ? i.options.missingKeyHandler(e, r, t, T ? s : S, T, a)
                                                : i.backendConnector && i.backendConnector.saveMissing && i.backendConnector.saveMissing(e, r, t, T ? s : S, T, a),
                                                i.emit("missingKey", e, r, t, d);
                                        };
                                        this.options.saveMissing &&
                                            (this.options.saveMissingPlurals && g
                                                ? y.forEach(function (t) {
                                                      i.pluralResolver.getSuffixes(t).forEach(function (e) {
                                                          A([t], o + e, a["defaultValue".concat(e)] || b);
                                                      });
                                                  })
                                                : A(y, o, b));
                                    }
                                    (d = this.extendTranslation(d, e, a, l, t)),
                                        c && d === o && this.options.appendNamespaceToMissingKey && (d = "".concat(r, ":").concat(o)),
                                        (c || N) && this.options.parseMissingKeyHandler && (d = this.options.parseMissingKeyHandler(d));
                                }
                                return d;
                            },
                        },
                        {
                            key: "extendTranslation",
                            value: function (e, a, i, t, n) {
                                var s,
                                    o = this,
                                    h =
                                        (this.i18nFormat && this.i18nFormat.parse
                                            ? (e = this.i18nFormat.parse(e, i, t.usedLng, t.usedNS, t.usedKey, { resolved: t }))
                                            : i.skipInterpolation ||
                                              (i.interpolation && this.interpolator.init(M({}, i, { interpolation: M({}, this.options.interpolation, i.interpolation) })),
                                              (h = (i.interpolation && i.interpolation.skipOnVariables) || this.options.interpolation.skipOnVariables) && (r = (r = e.match(this.interpolator.nestingRegexp)) && r.length),
                                              (s = i.replace && "string" != typeof i.replace ? i.replace : i),
                                              this.options.interpolation.defaultVariables && (s = M({}, this.options.interpolation.defaultVariables, s)),
                                              (e = this.interpolator.interpolate(e, s, i.lng || this.language, i)),
                                              h && r < ((s = e.match(this.interpolator.nestingRegexp)) && s.length) && (i.nest = !1),
                                              !1 !== i.nest &&
                                                  (e = this.interpolator.nest(
                                                      e,
                                                      function () {
                                                          for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                                                          return n && n[0] === t[0] && !i.context
                                                              ? (o.logger.warn("It seems you are nesting recursively key: ".concat(t[0], " in key: ").concat(a[0])), null)
                                                              : o.translate.apply(o, t.concat([a]));
                                                      },
                                                      i
                                                  )),
                                              i.interpolation && this.interpolator.reset()),
                                        i.postProcess || this.options.postProcess),
                                    r = "string" == typeof h ? [h] : h;
                                return (e = null != e && r && r.length && !1 !== i.applyPostProcessor ? b.handle(r, e, a, this.options && this.options.postProcessPassResolved ? M({ i18nResolved: t }, i) : i, this) : e);
                            },
                        },
                        {
                            key: "resolve",
                            value: function (e) {
                                var l,
                                    s,
                                    d,
                                    g,
                                    a,
                                    c = this,
                                    u = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                                return (
                                    (e = "string" == typeof e ? [e] : e).forEach(function (e) {
                                        var o, h, r, t;
                                        c.isValidLookup(l) ||
                                            ((e = c.extractFromKey(e, u)),
                                            (o = e.key),
                                            (s = o),
                                            (e = e.namespaces),
                                            c.options.fallbackNS && (e = e.concat(c.options.fallbackNS)),
                                            (h = void 0 !== u.count && "string" != typeof u.count),
                                            (r = void 0 !== u.context && ("string" == typeof u.context || "number" == typeof u.context) && "" !== u.context),
                                            (t = u.lngs || c.languageUtils.toResolveHierarchy(u.lng || c.language, u.fallbackLng)),
                                            e.forEach(function (n) {
                                                c.isValidLookup(l) ||
                                                    ((a = n),
                                                    !S["".concat(t[0], "-").concat(n)] &&
                                                        c.utils &&
                                                        c.utils.hasLoadedNamespace &&
                                                        !c.utils.hasLoadedNamespace(a) &&
                                                        ((S["".concat(t[0], "-").concat(n)] = !0),
                                                        c.logger.warn(
                                                            'key "'.concat(s, '" for languages "').concat(t.join(", "), '" won\'t get resolved as namespace "').concat(a, '" was not yet loaded'),
                                                            "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"
                                                        )),
                                                    t.forEach(function (e) {
                                                        if (!c.isValidLookup(l)) {
                                                            g = e;
                                                            var t,
                                                                s,
                                                                a = o,
                                                                i = [a];
                                                            for (
                                                                c.i18nFormat && c.i18nFormat.addLookupKeys
                                                                    ? c.i18nFormat.addLookupKeys(i, o, e, n, u)
                                                                    : (h && (t = c.pluralResolver.getSuffix(e, u.count)),
                                                                      h && r && i.push(a + t),
                                                                      r && i.push((a += "".concat(c.options.contextSeparator).concat(u.context))),
                                                                      h && i.push((a += t)));
                                                                (s = i.pop());

                                                            )
                                                                c.isValidLookup(l) || ((d = s), (l = c.getResource(e, n, s, u)));
                                                        }
                                                    }));
                                            }));
                                    }),
                                    { res: l, usedKey: s, exactUsedKey: d, usedLng: g, usedNS: a }
                                );
                            },
                        },
                        {
                            key: "isValidLookup",
                            value: function (e) {
                                return !(void 0 === e || (!this.options.returnNull && null === e) || (!this.options.returnEmptyString && "" === e));
                            },
                        },
                        {
                            key: "getResource",
                            value: function (e, t, s) {
                                var a = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};
                                return (this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat : this.resourceStore).getResource(e, t, s, a);
                            },
                        },
                    ],
                    [
                        {
                            key: "hasDefaultValue",
                            value: function (e) {
                                for (var t in e) if (Object.prototype.hasOwnProperty.call(e, t) && "defaultValue" === t.substring(0, "defaultValue".length) && void 0 !== e[t]) return !0;
                                return !1;
                            },
                        },
                    ]
                ),
                P);
        function P(e) {
            var t,
                s,
                a,
                i,
                n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            return (
                o(this, P),
                (t = r(this, l(P).call(this))),
                E && g.call(h(t)),
                (s = ["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"]),
                (a = e),
                (i = h(t)),
                s.forEach(function (e) {
                    a[e] && (i[e] = a[e]);
                }),
                (t.options = n),
                void 0 === t.options.keySeparator && (t.options.keySeparator = "."),
                (t.logger = d.create("translator")),
                t
            );
        }
        function y(e) {
            var t,
                s = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : { ns: ["translation"], defaultNS: "translation" };
            return (
                o(this, y),
                (t = r(this, l(y).call(this))),
                E && g.call(h(t)),
                (t.data = e || {}),
                (t.options = s),
                void 0 === t.options.keySeparator && (t.options.keySeparator = "."),
                void 0 === t.options.ignoreJSONStructure && (t.options.ignoreJSONStructure = !0),
                t
            );
        }
        function I(e) {
            return e.charAt(0).toUpperCase() + e.slice(1);
        }
        e(v, [
            {
                key: "getScriptPartFromCode",
                value: function (e) {
                    return !e || e.indexOf("-") < 0 || 2 === (e = e.split("-")).length || (e.pop(), "x" === e[e.length - 1].toLowerCase()) ? null : this.formatLanguageCode(e.join("-"));
                },
            },
            {
                key: "getLanguagePartFromCode",
                value: function (e) {
                    return !e || e.indexOf("-") < 0 ? e : ((e = e.split("-")), this.formatLanguageCode(e[0]));
                },
            },
            {
                key: "formatLanguageCode",
                value: function (e) {
                    var t, s;
                    return "string" == typeof e && -1 < e.indexOf("-")
                        ? ((t = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"]),
                          (s = e.split("-")),
                          this.options.lowerCaseLng
                              ? (s = s.map(function (e) {
                                    return e.toLowerCase();
                                }))
                              : 2 === s.length
                              ? ((s[0] = s[0].toLowerCase()), (s[1] = s[1].toUpperCase()), -1 < t.indexOf(s[1].toLowerCase()) && (s[1] = I(s[1].toLowerCase())))
                              : 3 === s.length &&
                                ((s[0] = s[0].toLowerCase()),
                                2 === s[1].length && (s[1] = s[1].toUpperCase()),
                                "sgn" !== s[0] && 2 === s[2].length && (s[2] = s[2].toUpperCase()),
                                -1 < t.indexOf(s[1].toLowerCase()) && (s[1] = I(s[1].toLowerCase())),
                                -1 < t.indexOf(s[2].toLowerCase()) && (s[2] = I(s[2].toLowerCase()))),
                          s.join("-"))
                        : this.options.cleanCode || this.options.lowerCaseLng
                        ? e.toLowerCase()
                        : e;
                },
            },
            {
                key: "isWhitelisted",
                value: function (e) {
                    return this.logger.deprecate("languageUtils.isWhitelisted", 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.'), this.isSupportedCode(e);
                },
            },
            {
                key: "isSupportedCode",
                value: function (e) {
                    return ("languageOnly" !== this.options.load && !this.options.nonExplicitSupportedLngs) || (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || -1 < this.supportedLngs.indexOf(e);
                },
            },
            {
                key: "getBestMatchFromCodes",
                value: function (e) {
                    var s,
                        a = this;
                    return e
                        ? (e.forEach(function (e) {
                              s || ((e = a.formatLanguageCode(e)), (a.options.supportedLngs && !a.isSupportedCode(e)) || (s = e));
                          }),
                          !s &&
                              this.options.supportedLngs &&
                              e.forEach(function (e) {
                                  if (!s) {
                                      var t = a.getLanguagePartFromCode(e);
                                      if (a.isSupportedCode(t)) return (s = t);
                                      s = a.options.supportedLngs.find(function (e) {
                                          if (0 === e.indexOf(t)) return e;
                                      });
                                  }
                              }),
                          (s = s || this.getFallbackCodes(this.options.fallbackLng)[0]))
                        : null;
                },
            },
            {
                key: "getFallbackCodes",
                value: function (e, t) {
                    return e
                        ? ("string" == typeof (e = "function" == typeof e ? e(t) : e) && (e = [e]),
                          "[object Array]" === Object.prototype.toString.apply(e)
                              ? e
                              : t
                              ? e[t] || e[this.getScriptPartFromCode(t)] || e[this.formatLanguageCode(t)] || e[this.getLanguagePartFromCode(t)] || e.default || []
                              : e.default || [])
                        : [];
                },
            },
            {
                key: "toResolveHierarchy",
                value: function (e, t) {
                    function s(e) {
                        e && (a.isSupportedCode(e) ? i.push(e) : a.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)));
                    }
                    var a = this,
                        t = this.getFallbackCodes(t || this.options.fallbackLng || [], e),
                        i = [];
                    return (
                        "string" == typeof e && -1 < e.indexOf("-")
                            ? ("languageOnly" !== this.options.load && s(this.formatLanguageCode(e)),
                              "languageOnly" !== this.options.load && "currentOnly" !== this.options.load && s(this.getScriptPartFromCode(e)),
                              "currentOnly" !== this.options.load && s(this.getLanguagePartFromCode(e)))
                            : "string" == typeof e && s(this.formatLanguageCode(e)),
                        t.forEach(function (e) {
                            i.indexOf(e) < 0 && s(a.formatLanguageCode(e));
                        }),
                        i
                    );
                },
            },
        ]);
        var H = v,
            F = [
                { lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"], nr: [1, 2], fc: 1 },
                {
                    lngs: [
                        "af",
                        "an",
                        "ast",
                        "az",
                        "bg",
                        "bn",
                        "ca",
                        "da",
                        "de",
                        "dev",
                        "el",
                        "en",
                        "eo",
                        "es",
                        "et",
                        "eu",
                        "fi",
                        "fo",
                        "fur",
                        "fy",
                        "gl",
                        "gu",
                        "ha",
                        "hi",
                        "hu",
                        "hy",
                        "ia",
                        "it",
                        "kk",
                        "kn",
                        "ku",
                        "lb",
                        "mai",
                        "ml",
                        "mn",
                        "mr",
                        "nah",
                        "nap",
                        "nb",
                        "ne",
                        "nl",
                        "nn",
                        "no",
                        "nso",
                        "pa",
                        "pap",
                        "pms",
                        "ps",
                        "pt-PT",
                        "rm",
                        "sco",
                        "se",
                        "si",
                        "so",
                        "son",
                        "sq",
                        "sv",
                        "sw",
                        "ta",
                        "te",
                        "tk",
                        "ur",
                        "yo",
                    ],
                    nr: [1, 2],
                    fc: 2,
                },
                { lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"], nr: [1], fc: 3 },
                { lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"], nr: [1, 2, 5], fc: 4 },
                { lngs: ["ar"], nr: [0, 1, 2, 3, 11, 100], fc: 5 },
                { lngs: ["cs", "sk"], nr: [1, 2, 5], fc: 6 },
                { lngs: ["csb", "pl"], nr: [1, 2, 5], fc: 7 },
                { lngs: ["cy"], nr: [1, 2, 3, 8], fc: 8 },
                { lngs: ["fr"], nr: [1, 2], fc: 9 },
                { lngs: ["ga"], nr: [1, 2, 3, 7, 11], fc: 10 },
                { lngs: ["gd"], nr: [1, 2, 3, 20], fc: 11 },
                { lngs: ["is"], nr: [1, 2], fc: 12 },
                { lngs: ["jv"], nr: [0, 1], fc: 13 },
                { lngs: ["kw"], nr: [1, 2, 3, 4], fc: 14 },
                { lngs: ["lt"], nr: [1, 2, 10], fc: 15 },
                { lngs: ["lv"], nr: [1, 2, 0], fc: 16 },
                { lngs: ["mk"], nr: [1, 2], fc: 17 },
                { lngs: ["mnk"], nr: [0, 1, 2], fc: 18 },
                { lngs: ["mt"], nr: [1, 2, 11, 20], fc: 19 },
                { lngs: ["or"], nr: [2, 1], fc: 2 },
                { lngs: ["ro"], nr: [1, 2, 20], fc: 20 },
                { lngs: ["sl"], nr: [5, 1, 2, 3], fc: 21 },
                { lngs: ["he", "iw"], nr: [1, 2, 20, 21], fc: 22 },
            ],
            D = {
                1: function (e) {
                    return Number(1 < e);
                },
                2: function (e) {
                    return Number(1 != e);
                },
                3: function (e) {
                    return 0;
                },
                4: function (e) {
                    return Number(e % 10 == 1 && e % 100 != 11 ? 0 : 2 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? 1 : 2);
                },
                5: function (e) {
                    return Number(0 == e ? 0 : 1 == e ? 1 : 2 == e ? 2 : 3 <= e % 100 && e % 100 <= 10 ? 3 : 11 <= e % 100 ? 4 : 5);
                },
                6: function (e) {
                    return Number(1 == e ? 0 : 2 <= e && e <= 4 ? 1 : 2);
                },
                7: function (e) {
                    return Number(1 == e ? 0 : 2 <= e % 10 && e % 10 <= 4 && (e % 100 < 10 || 20 <= e % 100) ? 1 : 2);
                },
                8: function (e) {
                    return Number(1 == e ? 0 : 2 == e ? 1 : 8 != e && 11 != e ? 2 : 3);
                },
                9: function (e) {
                    return Number(2 <= e);
                },
                10: function (e) {
                    return Number(1 == e ? 0 : 2 == e ? 1 : e < 7 ? 2 : e < 11 ? 3 : 4);
                },
                11: function (e) {
                    return Number(1 == e || 11 == e ? 0 : 2 == e || 12 == e ? 1 : 2 < e && e < 20 ? 2 : 3);
                },
                12: function (e) {
                    return Number(e % 10 != 1 || e % 100 == 11);
                },
                13: function (e) {
                    return Number(0 !== e);
                },
                14: function (e) {
                    return Number(1 == e ? 0 : 2 == e ? 1 : 3 == e ? 2 : 3);
                },
                15: function (e) {
                    return Number(e % 10 == 1 && e % 100 != 11 ? 0 : 2 <= e % 10 && (e % 100 < 10 || 20 <= e % 100) ? 1 : 2);
                },
                16: function (e) {
                    return Number(e % 10 == 1 && e % 100 != 11 ? 0 : 0 !== e ? 1 : 2);
                },
                17: function (e) {
                    return Number(1 == e || (e % 10 == 1 && e % 100 != 11) ? 0 : 1);
                },
                18: function (e) {
                    return Number(0 == e ? 0 : 1 == e ? 1 : 2);
                },
                19: function (e) {
                    return Number(1 == e ? 0 : 0 == e || (1 < e % 100 && e % 100 < 11) ? 1 : 10 < e % 100 && e % 100 < 20 ? 2 : 3);
                },
                20: function (e) {
                    return Number(1 == e ? 0 : 0 == e || (0 < e % 100 && e % 100 < 20) ? 1 : 2);
                },
                21: function (e) {
                    return Number(e % 100 == 1 ? 1 : e % 100 == 2 ? 2 : e % 100 == 3 || e % 100 == 4 ? 3 : 0);
                },
                22: function (e) {
                    return Number(1 == e ? 0 : 2 == e ? 1 : (e < 0 || 10 < e) && e % 10 == 0 ? 2 : 3);
                },
            };
        function v(e) {
            o(this, v), (this.options = e), (this.whitelist = this.options.supportedLngs || !1), (this.supportedLngs = this.options.supportedLngs || !1), (this.logger = d.create("languageUtils"));
        }
        e(L, [
            {
                key: "addRule",
                value: function (e, t) {
                    this.rules[e] = t;
                },
            },
            {
                key: "getRule",
                value: function (e) {
                    return this.rules[e] || this.rules[this.languageUtils.getLanguagePartFromCode(e)];
                },
            },
            {
                key: "needsPlural",
                value: function (e) {
                    e = this.getRule(e);
                    return e && 1 < e.numbers.length;
                },
            },
            {
                key: "getPluralFormsOfKey",
                value: function (e, t) {
                    return this.getSuffixes(e).map(function (e) {
                        return t + e;
                    });
                },
            },
            {
                key: "getSuffixes",
                value: function (t) {
                    var s = this,
                        e = this.getRule(t);
                    return e
                        ? e.numbers.map(function (e) {
                              return s.getSuffix(t, e);
                          })
                        : [];
                },
            },
            {
                key: "getSuffix",
                value: function (e, t) {
                    var s,
                        a,
                        i = this,
                        n = this.getRule(e);
                    return n
                        ? ((t = n.noAbs ? n.plurals(t) : n.plurals(Math.abs(t))),
                          (s = n.numbers[t]),
                          this.options.simplifyPluralSuffix && 2 === n.numbers.length && 1 === n.numbers[0] && (2 === s ? (s = "plural") : 1 === s && (s = "")),
                          (a = function () {
                              return i.options.prepend && s.toString() ? i.options.prepend + s.toString() : s.toString();
                          }),
                          "v1" === this.options.compatibilityJSON
                              ? 1 === s
                                  ? ""
                                  : "number" == typeof s
                                  ? "_plural_".concat(s.toString())
                                  : a()
                              : "v2" === this.options.compatibilityJSON || (this.options.simplifyPluralSuffix && 2 === n.numbers.length && 1 === n.numbers[0])
                              ? a()
                              : this.options.prepend && t.toString()
                              ? this.options.prepend + t.toString()
                              : t.toString())
                        : (this.logger.warn("no plural rule found for: ".concat(e)), "");
                },
            },
        ]);
        var U = L,
            J =
                (e(A, [
                    {
                        key: "init",
                        value: function () {
                            var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                                e = (e.interpolation || (e.interpolation = { escapeValue: !0 }), e.interpolation);
                            (this.escape = void 0 !== e.escape ? e.escape : j),
                                (this.escapeValue = void 0 === e.escapeValue || e.escapeValue),
                                (this.useRawValueToEscape = void 0 !== e.useRawValueToEscape && e.useRawValueToEscape),
                                (this.prefix = e.prefix ? w(e.prefix) : e.prefixEscaped || "{{"),
                                (this.suffix = e.suffix ? w(e.suffix) : e.suffixEscaped || "}}"),
                                (this.formatSeparator = e.formatSeparator || e.formatSeparator || ","),
                                (this.unescapePrefix = e.unescapeSuffix ? "" : e.unescapePrefix || "-"),
                                (this.unescapeSuffix = (!this.unescapePrefix && e.unescapeSuffix) || ""),
                                (this.nestingPrefix = e.nestingPrefix ? w(e.nestingPrefix) : e.nestingPrefixEscaped || w("$t(")),
                                (this.nestingSuffix = e.nestingSuffix ? w(e.nestingSuffix) : e.nestingSuffixEscaped || w(")")),
                                (this.nestingOptionsSeparator = e.nestingOptionsSeparator || e.nestingOptionsSeparator || ","),
                                (this.maxReplaces = e.maxReplaces || 1e3),
                                (this.alwaysFormat = void 0 !== e.alwaysFormat && e.alwaysFormat),
                                this.resetRegExp();
                        },
                    },
                    {
                        key: "reset",
                        value: function () {
                            this.options && this.init(this.options);
                        },
                    },
                    {
                        key: "resetRegExp",
                        value: function () {
                            var e = "".concat(this.prefix, "(.+?)").concat(this.suffix),
                                e = ((this.regexp = new RegExp(e, "g")), "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix)),
                                e = ((this.regexpUnescape = new RegExp(e, "g")), "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix));
                            this.nestingRegexp = new RegExp(e, "g");
                        },
                    },
                    {
                        key: "interpolate",
                        value: function (a, i, n, o) {
                            var h,
                                r,
                                l,
                                d = this,
                                g = (this.options && this.options.interpolation && this.options.interpolation.defaultVariables) || {};
                            function t(e) {
                                return e.replace(/\$/g, "$$$$");
                            }
                            this.resetRegExp();
                            var c = (o && o.missingInterpolationHandler) || this.options.missingInterpolationHandler,
                                u = (o && o.interpolation && o.interpolation.skipOnVariables) || this.options.interpolation.skipOnVariables;
                            return (
                                [
                                    { regex: this.regexpUnescape, safeValue: t },
                                    {
                                        regex: this.regexp,
                                        safeValue: function (e) {
                                            return d.escapeValue ? t(d.escape(e)) : t(e);
                                        },
                                    },
                                ].forEach(function (e) {
                                    for (l = 0; (h = e.regex.exec(a)); ) {
                                        if (
                                            void 0 ===
                                            ((t = h[1].trim()),
                                            (s = void 0),
                                            (r =
                                                t.indexOf(d.formatSeparator) < 0
                                                    ? ((s = N(i, g, t)), d.alwaysFormat ? d.format(s, void 0, n, M({}, o, i, { interpolationkey: t })) : s)
                                                    : ((t = (s = t.split(d.formatSeparator)).shift().trim()), (s = s.join(d.formatSeparator).trim()), d.format(N(i, g, t), s, n, M({}, o, i, { interpolationkey: t })))))
                                        )
                                            if ("function" == typeof c) {
                                                s = c(a, h, o);
                                                r = "string" == typeof s ? s : "";
                                            } else {
                                                if (u) {
                                                    r = h[0];
                                                    continue;
                                                }
                                                d.logger.warn("missed to pass in variable ".concat(h[1], " for interpolating ").concat(a)), (r = "");
                                            }
                                        else "string" == typeof r || d.useRawValueToEscape || (r = m(r));
                                        t = e.safeValue(r);
                                        if (((a = a.replace(h[0], t)), u ? ((e.regex.lastIndex += t.length), (e.regex.lastIndex -= h[0].length)) : (e.regex.lastIndex = 0), ++l >= d.maxReplaces)) break;
                                    }
                                    var t, s;
                                }),
                                a
                            );
                        },
                    },
                    {
                        key: "nest",
                        value: function (e, t) {
                            var s,
                                a = this,
                                i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
                                n = M({}, i);
                            function o(e, t) {
                                var s = this.nestingOptionsSeparator;
                                if (!(e.indexOf(s) < 0)) {
                                    var a = e.split(new RegExp("".concat(s, "[ ]*{"))),
                                        i = "{".concat(a[1]);
                                    (e = a[0]), (i = (i = this.interpolate(i, n)).replace(/'/g, '"'));
                                    try {
                                        (n = JSON.parse(i)), t && (n = M({}, t, n));
                                    } catch (t) {
                                        return this.logger.warn("failed parsing options string in nesting for key ".concat(e), t), "".concat(e).concat(s).concat(i);
                                    }
                                    delete n.defaultValue;
                                }
                                return e;
                            }
                            for (n.applyPostProcessor = !1, delete n.defaultValue; (s = this.nestingRegexp.exec(e)); ) {
                                var h,
                                    r = [],
                                    l = !1;
                                if (
                                    (-1 === s[0].indexOf(this.formatSeparator) ||
                                        /{.*}/.test(s[1]) ||
                                        ((h = s[1].split(this.formatSeparator).map(function (e) {
                                            return e.trim();
                                        })),
                                        (s[1] = h.shift()),
                                        (r = h),
                                        (l = !0)),
                                    (h = t(o.call(this, s[1].trim(), n), n)) && s[0] === e && "string" != typeof h)
                                )
                                    return h;
                                (h = "string" != typeof h ? m(h) : h) || (this.logger.warn("missed to resolve ".concat(s[1], " for nesting ").concat(e)), (h = "")),
                                    l &&
                                        (h = r.reduce(function (e, t) {
                                            return a.format(e, t, i.lng, M({}, i, { interpolationkey: s[1].trim() }));
                                        }, h.trim())),
                                    (e = e.replace(s[0], h)),
                                    (this.regexp.lastIndex = 0);
                            }
                            return e;
                        },
                    },
                ]),
                A);
        function A() {
            var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
            o(this, A),
                (this.logger = d.create("interpolator")),
                (this.options = e),
                (this.format =
                    (e.interpolation && e.interpolation.format) ||
                    function (e) {
                        return e;
                    }),
                this.init(e);
        }
        function L(e) {
            var s,
                t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
            o(this, L),
                (this.languageUtils = e),
                (this.options = t),
                (this.logger = d.create("pluralResolver")),
                (this.rules =
                    ((s = {}),
                    F.forEach(function (t) {
                        t.lngs.forEach(function (e) {
                            s[e] = { numbers: t.nr, plurals: D[t.fc] };
                        });
                    }),
                    s));
        }
        t(B, g),
            e(B, [
                {
                    key: "queueLoad",
                    value: function (e, t, i, s) {
                        var n = this,
                            o = [],
                            h = [],
                            r = [],
                            l = [];
                        return (
                            e.forEach(function (s) {
                                var a = !0;
                                t.forEach(function (e) {
                                    var t = "".concat(s, "|").concat(e);
                                    !i.reload && n.store.hasResourceBundle(s, e)
                                        ? (n.state[t] = 2)
                                        : n.state[t] < 0 || (1 === n.state[t] ? h.indexOf(t) < 0 && h.push(t) : ((n.state[t] = 1), (a = !1), h.indexOf(t) < 0 && h.push(t), o.indexOf(t) < 0 && o.push(t), l.indexOf(e) < 0 && l.push(e)));
                                }),
                                    a || r.push(s);
                            }),
                            (o.length || h.length) && this.queue.push({ pending: h, loaded: {}, errors: [], callback: s }),
                            { toLoad: o, pending: h, toLoadLanguages: r, toLoadNamespaces: l }
                        );
                    },
                },
                {
                    key: "loaded",
                    value: function (h, r, e) {
                        var t = h.split("|"),
                            l = t[0],
                            d = t[1],
                            g = (r && this.emit("failedLoading", l, d, r), e && this.store.addResourceBundle(l, d, e), (this.state[h] = r ? -1 : 2), {});
                        this.queue.forEach(function (e) {
                            var t = e.loaded,
                                s = d,
                                t = p(t, [l], Object),
                                a = t.obj,
                                t = t.k;
                            (a[t] = a[t] || []), a[t].push(s);
                            for (var i = e.pending, n = h, o = i.indexOf(n); -1 !== o; ) i.splice(o, 1), (o = i.indexOf(n));
                            r && e.errors.push(r),
                                0 !== e.pending.length ||
                                    e.done ||
                                    (Object.keys(e.loaded).forEach(function (t) {
                                        g[t] || (g[t] = []),
                                            e.loaded[t].length &&
                                                e.loaded[t].forEach(function (e) {
                                                    g[t].indexOf(e) < 0 && g[t].push(e);
                                                });
                                    }),
                                    (e.done = !0),
                                    e.errors.length ? e.callback(e.errors) : e.callback());
                        }),
                            this.emit("loaded", g),
                            (this.queue = this.queue.filter(function (e) {
                                return !e.done;
                            }));
                    },
                },
                {
                    key: "read",
                    value: function (s, a, i) {
                        var n = this,
                            o = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : 0,
                            h = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 350,
                            r = 5 < arguments.length ? arguments[5] : void 0;
                        return s.length
                            ? this.backend[i](s, a, function (e, t) {
                                  e && t && o < 5
                                      ? setTimeout(function () {
                                            n.read.call(n, s, a, i, o + 1, 2 * h, r);
                                        }, h)
                                      : r(e, t);
                              })
                            : r(null, {});
                    },
                },
                {
                    key: "prepareLoading",
                    value: function (e, t) {
                        var s = this,
                            a = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {},
                            i = 3 < arguments.length ? arguments[3] : void 0;
                        if (!this.backend) return this.logger.warn("No backend was added via i18next.use. Will not load resources."), i && i();
                        "string" == typeof e && (e = this.languageUtils.toResolveHierarchy(e));
                        e = this.queueLoad(e, (t = "string" == typeof t ? [t] : t), a, i);
                        if (!e.toLoad.length) return e.pending.length || i(), null;
                        e.toLoad.forEach(function (e) {
                            s.loadOne(e);
                        });
                    },
                },
                {
                    key: "load",
                    value: function (e, t, s) {
                        this.prepareLoading(e, t, {}, s);
                    },
                },
                {
                    key: "reload",
                    value: function (e, t, s) {
                        this.prepareLoading(e, t, { reload: !0 }, s);
                    },
                },
                {
                    key: "loadOne",
                    value: function (s) {
                        var a = this,
                            i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "",
                            e = s.split("|"),
                            n = e[0],
                            o = e[1];
                        this.read(n, o, "read", void 0, void 0, function (e, t) {
                            e && a.logger.warn("".concat(i, "loading namespace ").concat(o, " for language ").concat(n, " failed"), e),
                                !e && t && a.logger.log("".concat(i, "loaded namespace ").concat(o, " for language ").concat(n), t),
                                a.loaded(s, e, t);
                        });
                    },
                },
                {
                    key: "saveMissing",
                    value: function (e, t, s, a, i) {
                        var n = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : {};
                        this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(t)
                            ? this.logger.warn(
                                  'did not save key "'.concat(s, '" as the namespace "').concat(t, '" was not yet loaded'),
                                  "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"
                              )
                            : null != s && "" !== s && (this.backend && this.backend.create && this.backend.create(e, t, s, a, null, M({}, n, { isUpdate: i })), e && e[0] && this.store.addResource(e[0], t, s, a));
                    },
                },
            ]);
        var V = B;
        function B(e, t, s) {
            var a,
                i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};
            return (
                o(this, B),
                (a = r(this, l(B).call(this))),
                E && g.call(h(a)),
                (a.backend = e),
                (a.store = t),
                (a.services = s),
                (a.languageUtils = s.languageUtils),
                (a.options = i),
                (a.logger = d.create("backendConnector")),
                (a.state = {}),
                (a.queue = []),
                a.backend && a.backend.init && a.backend.init(s, i.backend, i),
                a
            );
        }
        function x(e) {
            return (
                "string" == typeof e.ns && (e.ns = [e.ns]),
                "string" == typeof e.fallbackLng && (e.fallbackLng = [e.fallbackLng]),
                "string" == typeof e.fallbackNS && (e.fallbackNS = [e.fallbackNS]),
                e.whitelist && (e.whitelist && e.whitelist.indexOf("cimode") < 0 && (e.whitelist = e.whitelist.concat(["cimode"])), (e.supportedLngs = e.whitelist)),
                e.nonExplicitWhitelist && (e.nonExplicitSupportedLngs = e.nonExplicitWhitelist),
                e.supportedLngs && e.supportedLngs.indexOf("cimode") < 0 && (e.supportedLngs = e.supportedLngs.concat(["cimode"])),
                e
            );
        }
        function C() {}
        return (
            t(k, g),
            e(k, [
                {
                    key: "init",
                    value: function () {
                        var e,
                            i = this,
                            t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                            s = 1 < arguments.length ? arguments[1] : void 0;
                        function a(e) {
                            return e ? ("function" == typeof e ? new e() : e) : null;
                        }
                        "function" == typeof t && ((s = t), (t = {})),
                            t.whitelist && !t.supportedLngs && this.logger.deprecate("whitelist", 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.'),
                            t.nonExplicitWhitelist &&
                                !t.nonExplicitSupportedLngs &&
                                this.logger.deprecate("whitelist", 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.'),
                            (this.options = M(
                                {},
                                {
                                    debug: !1,
                                    initImmediate: !0,
                                    ns: ["translation"],
                                    defaultNS: ["translation"],
                                    fallbackLng: ["dev"],
                                    fallbackNS: !1,
                                    whitelist: !1,
                                    nonExplicitWhitelist: !1,
                                    supportedLngs: !1,
                                    nonExplicitSupportedLngs: !1,
                                    load: "all",
                                    preload: !1,
                                    simplifyPluralSuffix: !0,
                                    keySeparator: ".",
                                    nsSeparator: ":",
                                    pluralSeparator: "_",
                                    contextSeparator: "_",
                                    partialBundledLanguages: !1,
                                    saveMissing: !1,
                                    updateMissing: !1,
                                    saveMissingTo: "fallback",
                                    saveMissingPlurals: !0,
                                    missingKeyHandler: !1,
                                    missingInterpolationHandler: !1,
                                    postProcess: !1,
                                    postProcessPassResolved: !1,
                                    returnNull: !0,
                                    returnEmptyString: !0,
                                    returnObjects: !1,
                                    joinArrays: !1,
                                    returnedObjectHandler: !1,
                                    parseMissingKeyHandler: !1,
                                    appendNamespaceToMissingKey: !1,
                                    appendNamespaceToCIMode: !1,
                                    overloadTranslationOptionHandler: function (e) {
                                        var t,
                                            s = {};
                                        return (
                                            "object" === O(e[1]) && (s = e[1]),
                                            "string" == typeof e[1] && (s.defaultValue = e[1]),
                                            "string" == typeof e[2] && (s.tDescription = e[2]),
                                            ("object" !== O(e[2]) && "object" !== O(e[3])) ||
                                                ((t = e[3] || e[2]),
                                                Object.keys(t).forEach(function (e) {
                                                    s[e] = t[e];
                                                })),
                                            s
                                        );
                                    },
                                    interpolation: {
                                        escapeValue: !0,
                                        format: function (e, t, s, a) {
                                            return e;
                                        },
                                        prefix: "{{",
                                        suffix: "}}",
                                        formatSeparator: ",",
                                        unescapePrefix: "-",
                                        nestingPrefix: "$t(",
                                        nestingSuffix: ")",
                                        nestingOptionsSeparator: ",",
                                        maxReplaces: 1e3,
                                        skipOnVariables: !1,
                                    },
                                },
                                this.options,
                                x(t)
                            )),
                            (this.format = this.options.interpolation.format),
                            (s = s || C),
                            this.options.isClone ||
                                (this.modules.logger ? d.init(a(this.modules.logger), this.options) : d.init(null, this.options),
                                (t = new H(this.options)),
                                (this.store = new R(this.options.resources, this.options)),
                                ((e = this.services).logger = d),
                                (e.resourceStore = this.store),
                                (e.languageUtils = t),
                                (e.pluralResolver = new U(t, { prepend: this.options.pluralSeparator, compatibilityJSON: this.options.compatibilityJSON, simplifyPluralSuffix: this.options.simplifyPluralSuffix })),
                                (e.interpolator = new J(this.options)),
                                (e.utils = { hasLoadedNamespace: this.hasLoadedNamespace.bind(this) }),
                                (e.backendConnector = new V(a(this.modules.backend), e.resourceStore, e, this.options)),
                                e.backendConnector.on("*", function (e) {
                                    for (var t = arguments.length, s = new Array(1 < t ? t - 1 : 0), a = 1; a < t; a++) s[a - 1] = arguments[a];
                                    i.emit.apply(i, [e].concat(s));
                                }),
                                this.modules.languageDetector && ((e.languageDetector = a(this.modules.languageDetector)), e.languageDetector.init(e, this.options.detection, this.options)),
                                this.modules.i18nFormat && ((e.i18nFormat = a(this.modules.i18nFormat)), e.i18nFormat.init && e.i18nFormat.init(this)),
                                (this.translator = new T(this.services, this.options)),
                                this.translator.on("*", function (e) {
                                    for (var t = arguments.length, s = new Array(1 < t ? t - 1 : 0), a = 1; a < t; a++) s[a - 1] = arguments[a];
                                    i.emit.apply(i, [e].concat(s));
                                }),
                                this.modules.external.forEach(function (e) {
                                    e.init && e.init(i);
                                })),
                            !this.options.fallbackLng ||
                                this.services.languageDetector ||
                                this.options.lng ||
                                (0 < (t = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng)).length && "dev" !== t[0] && (this.options.lng = t[0])),
                            this.services.languageDetector || this.options.lng || this.logger.warn("init: no languageDetector is used and no lng is defined"),
                            ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach(function (t) {
                                i[t] = function () {
                                    var e;
                                    return (e = i.store)[t].apply(e, arguments);
                                };
                            }),
                            ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach(function (t) {
                                i[t] = function () {
                                    var e;
                                    return (e = i.store)[t].apply(e, arguments), i;
                                };
                            });
                        function n() {
                            function e(e, t) {
                                i.isInitialized && !i.initializedStoreOnce && i.logger.warn("init: i18next is already initialized. You should call init just once!"),
                                    (i.isInitialized = !0),
                                    i.options.isClone || i.logger.log("initialized", i.options),
                                    i.emit("initialized", i.options),
                                    o.resolve(t),
                                    s(e, t);
                            }
                            if (i.languages && "v1" !== i.options.compatibilityAPI && !i.isInitialized) return e(null, i.t.bind(i));
                            i.changeLanguage(i.options.lng, e);
                        }
                        var o = u();
                        return this.options.resources || !this.options.initImmediate ? n() : setTimeout(n, 0), o;
                    },
                },
                {
                    key: "loadResources",
                    value: function (e) {
                        var t = this,
                            s = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : C,
                            a = "string" == typeof e ? e : this.language;
                        if (("function" == typeof e && (s = e), !this.options.resources || this.options.partialBundledLanguages)) {
                            if (a && "cimode" === a.toLowerCase()) return s();
                            var i = [],
                                e = function (e) {
                                    e &&
                                        t.services.languageUtils.toResolveHierarchy(e).forEach(function (e) {
                                            i.indexOf(e) < 0 && i.push(e);
                                        });
                                };
                            a ? e(a) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(e), this.options.preload && this.options.preload.forEach(e), this.services.backendConnector.load(i, this.options.ns, s);
                        } else s(null);
                    },
                },
                {
                    key: "reloadResources",
                    value: function (e, t, s) {
                        var a = u();
                        return (
                            (e = e || this.languages),
                            (t = t || this.options.ns),
                            (s = s || C),
                            this.services.backendConnector.reload(e, t, function (e) {
                                a.resolve(), s(e);
                            }),
                            a
                        );
                    },
                },
                {
                    key: "use",
                    value: function (e) {
                        if (!e) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
                        if (e.type)
                            return (
                                "backend" === e.type && (this.modules.backend = e),
                                ("logger" === e.type || (e.log && e.warn && e.error)) && (this.modules.logger = e),
                                "languageDetector" === e.type && (this.modules.languageDetector = e),
                                "i18nFormat" === e.type && (this.modules.i18nFormat = e),
                                "postProcessor" === e.type && b.addPostProcessor(e),
                                "3rdParty" === e.type && this.modules.external.push(e),
                                this
                            );
                        throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
                    },
                },
                {
                    key: "changeLanguage",
                    value: function (t, a) {
                        function e(e) {
                            var s = "string" == typeof (e = t || e || !i.services.languageDetector ? e : []) ? e : i.services.languageUtils.getBestMatchFromCodes(e);
                            s &&
                                (i.language || ((i.language = s), (i.languages = i.services.languageUtils.toResolveHierarchy(s))),
                                i.translator.language || i.translator.changeLanguage(s),
                                i.services.languageDetector && i.services.languageDetector.cacheUserLanguage(s)),
                                i.loadResources(s, function (e) {
                                    var t;
                                    (e = e),
                                        (t = s)
                                            ? ((i.language = t),
                                              (i.languages = i.services.languageUtils.toResolveHierarchy(t)),
                                              i.translator.changeLanguage(t),
                                              (i.isLanguageChangingTo = void 0),
                                              i.emit("languageChanged", t),
                                              i.logger.log("languageChanged", t))
                                            : (i.isLanguageChangingTo = void 0),
                                        n.resolve(function () {
                                            return i.t.apply(i, arguments);
                                        }),
                                        a &&
                                            a(e, function () {
                                                return i.t.apply(i, arguments);
                                            });
                                });
                        }
                        var i = this,
                            n = ((this.isLanguageChangingTo = t), u());
                        this.emit("languageChanging", t);
                        return (
                            t || !this.services.languageDetector || this.services.languageDetector.async
                                ? !t && this.services.languageDetector && this.services.languageDetector.async
                                    ? this.services.languageDetector.detect(e)
                                    : e(t)
                                : e(this.services.languageDetector.detect()),
                            n
                        );
                    },
                },
                {
                    key: "getFixedT",
                    value: function (e, t, o) {
                        function h(e, t) {
                            var s;
                            if ("object" !== O(t)) {
                                for (var a = arguments.length, i = new Array(2 < a ? a - 2 : 0), n = 2; n < a; n++) i[n - 2] = arguments[n];
                                s = r.options.overloadTranslationOptionHandler([e, t].concat(i));
                            } else s = M({}, t);
                            return (s.lng = s.lng || h.lng), (s.lngs = s.lngs || h.lngs), (s.ns = s.ns || h.ns), (t = r.options.keySeparator || "."), (t = o ? "".concat(o).concat(t).concat(e) : e), r.t(t, s);
                        }
                        var r = this;
                        return "string" == typeof e ? (h.lng = e) : (h.lngs = e), (h.ns = t), (h.keyPrefix = o), h;
                    },
                },
                {
                    key: "t",
                    value: function () {
                        var e;
                        return this.translator && (e = this.translator).translate.apply(e, arguments);
                    },
                },
                {
                    key: "exists",
                    value: function () {
                        var e;
                        return this.translator && (e = this.translator).exists.apply(e, arguments);
                    },
                },
                {
                    key: "setDefaultNamespace",
                    value: function (e) {
                        this.options.defaultNS = e;
                    },
                },
                {
                    key: "hasLoadedNamespace",
                    value: function (e) {
                        var s = this,
                            t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                        if (!this.isInitialized) return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
                        if (!this.languages || !this.languages.length) return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
                        var a = this.languages[0],
                            i = !!this.options && this.options.fallbackLng,
                            n = this.languages[this.languages.length - 1];
                        if ("cimode" === a.toLowerCase()) return !0;
                        function o(e, t) {
                            return -1 === (e = s.services.backendConnector.state["".concat(e, "|").concat(t)]) || 2 === e;
                        }
                        if (t.precheck) {
                            t = t.precheck(this, o);
                            if (void 0 !== t) return t;
                        }
                        return !!this.hasResourceBundle(a, e) || !this.services.backendConnector.backend || !(!o(a, e) || (i && !o(n, e)));
                    },
                },
                {
                    key: "loadNamespaces",
                    value: function (e, t) {
                        var s = this,
                            a = u();
                        return this.options.ns
                            ? ((e = "string" == typeof e ? [e] : e).forEach(function (e) {
                                  s.options.ns.indexOf(e) < 0 && s.options.ns.push(e);
                              }),
                              this.loadResources(function (e) {
                                  a.resolve(), t && t(e);
                              }),
                              a)
                            : (t && t(), Promise.resolve());
                    },
                },
                {
                    key: "loadLanguages",
                    value: function (e, t) {
                        var s = u(),
                            a = this.options.preload || [],
                            e = (e = "string" == typeof e ? [e] : e).filter(function (e) {
                                return a.indexOf(e) < 0;
                            });
                        return e.length
                            ? ((this.options.preload = a.concat(e)),
                              this.loadResources(function (e) {
                                  s.resolve(), t && t(e);
                              }),
                              s)
                            : (t && t(), Promise.resolve());
                    },
                },
                {
                    key: "dir",
                    value: function (e) {
                        return !(e = e || (this.languages && 0 < this.languages.length ? this.languages[0] : this.language)) ||
                            0 <=
                                [
                                    "ar",
                                    "shu",
                                    "sqr",
                                    "ssh",
                                    "xaa",
                                    "yhd",
                                    "yud",
                                    "aao",
                                    "abh",
                                    "abv",
                                    "acm",
                                    "acq",
                                    "acw",
                                    "acx",
                                    "acy",
                                    "adf",
                                    "ads",
                                    "aeb",
                                    "aec",
                                    "afb",
                                    "ajp",
                                    "apc",
                                    "apd",
                                    "arb",
                                    "arq",
                                    "ars",
                                    "ary",
                                    "arz",
                                    "auz",
                                    "avl",
                                    "ayh",
                                    "ayl",
                                    "ayn",
                                    "ayp",
                                    "bbz",
                                    "pga",
                                    "he",
                                    "iw",
                                    "ps",
                                    "pbt",
                                    "pbu",
                                    "pst",
                                    "prp",
                                    "prd",
                                    "ug",
                                    "ur",
                                    "ydd",
                                    "yds",
                                    "yih",
                                    "ji",
                                    "yi",
                                    "hbo",
                                    "men",
                                    "xmn",
                                    "fa",
                                    "jpr",
                                    "peo",
                                    "pes",
                                    "prs",
                                    "dv",
                                    "sam",
                                ].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))
                            ? "rtl"
                            : "ltr";
                    },
                },
                {
                    key: "createInstance",
                    value: function () {
                        return new k(0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, 1 < arguments.length ? arguments[1] : void 0);
                    },
                },
                {
                    key: "cloneInstance",
                    value: function () {
                        var t = this,
                            e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                            s = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : C,
                            e = M({}, this.options, e, { isClone: !0 }),
                            i = new k(e);
                        return (
                            ["store", "services", "language"].forEach(function (e) {
                                i[e] = t[e];
                            }),
                            (i.services = M({}, this.services)),
                            (i.services.utils = { hasLoadedNamespace: i.hasLoadedNamespace.bind(i) }),
                            (i.translator = new T(i.services, i.options)),
                            i.translator.on("*", function (e) {
                                for (var t = arguments.length, s = new Array(1 < t ? t - 1 : 0), a = 1; a < t; a++) s[a - 1] = arguments[a];
                                i.emit.apply(i, [e].concat(s));
                            }),
                            i.init(e, s),
                            (i.translator.options = i.options),
                            (i.translator.backendConnector.services.utils = { hasLoadedNamespace: i.hasLoadedNamespace.bind(i) }),
                            i
                        );
                    },
                },
                {
                    key: "toJSON",
                    value: function () {
                        return { options: this.options, store: this.store, language: this.language, languages: this.languages };
                    },
                },
            ]),
            new k()
        );
        function k() {
            var e,
                t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
                s = 1 < arguments.length ? arguments[1] : void 0;
            if ((o(this, k), (e = r(this, l(k).call(this))), E && g.call(h(e)), (e.options = x(t)), (e.services = {}), (e.logger = d), (e.modules = { external: [] }), s && !e.isInitialized && !t.isClone)) {
                if (!e.options.initImmediate) return e.init(t, s), r(e, h(e));
                setTimeout(function () {
                    e.init(t, s);
                }, 0);
            }
            return e;
        }
    }),
    (function (e, t) {
        "object" == typeof exports && "undefined" != typeof module
            ? (module.exports = t())
            : "function" == typeof define && define.amd
            ? define(t)
            : ((e = "undefined" != typeof globalThis ? globalThis : e || self).i18nextBrowserLanguageDetector = t());
    })(this, function () {
        "use strict";
        function a(e, t) {
            for (var s = 0; s < t.length; s++) {
                var a = t[s];
                (a.enumerable = a.enumerable || !1), (a.configurable = !0), "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);
            }
        }
        var e = [],
            n = e.forEach,
            o = e.slice;
        function s() {
            if (null === t)
                try {
                    t = "undefined" !== window && null !== window.localStorage;
                    var e = "i18next.translate.boo";
                    window.localStorage.setItem(e, "foo"), window.localStorage.removeItem(e);
                } catch (e) {
                    t = !1;
                }
            return t;
        }
        function i() {
            if (null === u)
                try {
                    u = "undefined" !== window && null !== window.sessionStorage;
                    var e = "i18next.translate.boo";
                    window.sessionStorage.setItem(e, "foo"), window.sessionStorage.removeItem(e);
                } catch (e) {
                    u = !1;
                }
            return u;
        }
        var h = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,
            r = function (e, t, s, a) {
                var i = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : { path: "/", sameSite: "strict" };
                s && ((i.expires = new Date()), i.expires.setTime(i.expires.getTime() + 60 * s * 1e3)),
                    a && (i.domain = a),
                    (document.cookie = (function (e, t, s) {
                        var s = s || {},
                            t = ((s.path = s.path || "/"), encodeURIComponent(t)),
                            a = "".concat(e, "=").concat(t);
                        if (0 < s.maxAge) {
                            e = +s.maxAge;
                            if (Number.isNaN(e)) throw new Error("maxAge should be a Number");
                            a += "; Max-Age=".concat(Math.floor(e));
                        }
                        if (s.domain) {
                            if (!h.test(s.domain)) throw new TypeError("option domain is invalid");
                            a += "; Domain=".concat(s.domain);
                        }
                        if (s.path) {
                            if (!h.test(s.path)) throw new TypeError("option path is invalid");
                            a += "; Path=".concat(s.path);
                        }
                        if (s.expires) {
                            if ("function" != typeof s.expires.toUTCString) throw new TypeError("option expires is invalid");
                            a += "; Expires=".concat(s.expires.toUTCString());
                        }
                        if ((s.httpOnly && (a += "; HttpOnly"), s.secure && (a += "; Secure"), s.sameSite))
                            switch ("string" == typeof s.sameSite ? s.sameSite.toLowerCase() : s.sameSite) {
                                case !0:
                                    a += "; SameSite=Strict";
                                    break;
                                case "lax":
                                    a += "; SameSite=Lax";
                                    break;
                                case "strict":
                                    a += "; SameSite=Strict";
                                    break;
                                case "none":
                                    a += "; SameSite=None";
                                    break;
                                default:
                                    throw new TypeError("option sameSite is invalid");
                            }
                        return a;
                    })(e, encodeURIComponent(t), i));
            },
            l = function (e) {
                for (var t = "".concat(e, "="), s = document.cookie.split(";"), a = 0; a < s.length; a++) {
                    for (var i = s[a]; " " === i.charAt(0); ) i = i.substring(1, i.length);
                    if (0 === i.indexOf(t)) return i.substring(t.length, i.length);
                }
                return null;
            },
            d = {
                name: "cookie",
                lookup: function (e) {
                    var t;
                    return (t = e.lookupCookie && "undefined" != typeof document && (e = l(e.lookupCookie)) ? e : t);
                },
                cacheUserLanguage: function (e, t) {
                    t.lookupCookie && "undefined" != typeof document && r(t.lookupCookie, e, t.cookieMinutes, t.cookieDomain, t.cookieOptions);
                },
            },
            g = {
                name: "querystring",
                lookup: function (e) {
                    var t;
                    if ("undefined" != typeof window)
                        for (
                            var s = window.location.search,
                                a = (s = !window.location.search && window.location.hash && -1 < window.location.hash.indexOf("?") ? window.location.hash.substring(window.location.hash.indexOf("?")) : s).substring(1).split("&"),
                                i = 0;
                            i < a.length;
                            i++
                        ) {
                            var n = a[i].indexOf("=");
                            0 < n && a[i].substring(0, n) === e.lookupQuerystring && (t = a[i].substring(n + 1));
                        }
                    return t;
                },
            },
            t = null,
            c = {
                name: "localStorage",
                lookup: function (e) {
                    var t;
                    return e.lookupLocalStorage && s() && (e = window.localStorage.getItem(e.lookupLocalStorage)) && (t = e), t;
                },
                cacheUserLanguage: function (e, t) {
                    t.lookupLocalStorage && s() && window.localStorage.setItem(t.lookupLocalStorage, e);
                },
            },
            u = null,
            m = {
                name: "sessionStorage",
                lookup: function (e) {
                    var t;
                    return e.lookupSessionStorage && i() && (e = window.sessionStorage.getItem(e.lookupSessionStorage)) && (t = e), t;
                },
                cacheUserLanguage: function (e, t) {
                    t.lookupSessionStorage && i() && window.sessionStorage.setItem(t.lookupSessionStorage, e);
                },
            },
            p = {
                name: "navigator",
                lookup: function (e) {
                    var t = [];
                    if ("undefined" != typeof navigator) {
                        if (navigator.languages) for (var s = 0; s < navigator.languages.length; s++) t.push(navigator.languages[s]);
                        navigator.userLanguage && t.push(navigator.userLanguage), navigator.language && t.push(navigator.language);
                    }
                    return 0 < t.length ? t : void 0;
                },
            },
            _ = {
                name: "htmlTag",
                lookup: function (e) {
                    var t,
                        e = e.htmlTag || ("undefined" != typeof document ? document.documentElement : null);
                    return (t = e && "function" == typeof e.getAttribute ? e.getAttribute("lang") : t);
                },
            },
            f = {
                name: "path",
                lookup: function (e) {
                    var t;
                    if ("undefined" != typeof window) {
                        var s = window.location.pathname.match(/\/([a-zA-Z-]*)/g);
                        if (s instanceof Array)
                            if ("number" == typeof e.lookupFromPathIndex) {
                                if ("string" != typeof s[e.lookupFromPathIndex]) return;
                                t = s[e.lookupFromPathIndex].replace("/", "");
                            } else t = s[0].replace("/", "");
                    }
                    return t;
                },
            },
            N = {
                name: "subdomain",
                lookup: function (e) {
                    var e = "number" == typeof e.lookupFromSubdomainIndex ? e.lookupFromSubdomainIndex + 1 : 1,
                        t = "undefined" != typeof window && window.location && window.location.hostname && window.location.hostname.match(/^(\w{2,5})\.(([a-z0-9-]{1,63}\.[a-z]{2,6})|localhost)/i);
                    if (t) return t[e];
                },
            };
        e = (function () {
            function i(e) {
                var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
                    s = this,
                    a = i;
                if (!(s instanceof a)) throw new TypeError("Cannot call a class as a function");
                (this.type = "languageDetector"), (this.detectors = {}), this.init(e, t);
            }
            var e, t, s;
            return (
                (e = i),
                (t = [
                    {
                        key: "init",
                        value: function (e) {
                            var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},
                                s = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
                            (this.services = e),
                                (this.options = (function (s) {
                                    return (
                                        n.call(o.call(arguments, 1), function (e) {
                                            if (e) for (var t in e) void 0 === s[t] && (s[t] = e[t]);
                                        }),
                                        s
                                    );
                                })(t, this.options || {}, {
                                    order: ["querystring", "cookie", "localStorage", "sessionStorage", "navigator", "htmlTag"],
                                    lookupQuerystring: "lng",
                                    lookupCookie: "i18next",
                                    lookupLocalStorage: "i18nextLng",
                                    lookupSessionStorage: "i18nextLng",
                                    caches: ["localStorage"],
                                    excludeCacheFor: ["cimode"],
                                })),
                                this.options.lookupFromUrlIndex && (this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex),
                                (this.i18nOptions = s),
                                this.addDetector(d),
                                this.addDetector(g),
                                this.addDetector(c),
                                this.addDetector(m),
                                this.addDetector(p),
                                this.addDetector(_),
                                this.addDetector(f),
                                this.addDetector(N);
                        },
                    },
                    {
                        key: "addDetector",
                        value: function (e) {
                            this.detectors[e.name] = e;
                        },
                    },
                    {
                        key: "detect",
                        value: function (e) {
                            var t = this,
                                s = ((e = e || this.options.order), []);
                            return (
                                e.forEach(function (e) {
                                    t.detectors[e] && (e = (e = t.detectors[e].lookup(t.options)) && "string" == typeof e ? [e] : e) && (s = s.concat(e));
                                }),
                                this.services.languageUtils.getBestMatchFromCodes ? s : 0 < s.length ? s[0] : null
                            );
                        },
                    },
                    {
                        key: "cacheUserLanguage",
                        value: function (t, e) {
                            var s = this;
                            !(e = e || this.options.caches) ||
                                (this.options.excludeCacheFor && -1 < this.options.excludeCacheFor.indexOf(t)) ||
                                e.forEach(function (e) {
                                    s.detectors[e] && s.detectors[e].cacheUserLanguage(t, s.options);
                                });
                        },
                    },
                ]) && a(e.prototype, t),
                s && a(e, s),
                Object.defineProperty(e, "prototype", { writable: !1 }),
                i
            );
        })();
        return (e.type = "languageDetector"), e;
    }),
    (function (t) {
        class e extends Phaser.Game {
            constructor() {
                var e;
                super({
                    enableDebug: !1,
                    width: Constants.GAME_WIDTH,
                    height: Constants.GAME_HEIGHT,
                    renderer: Phaser.AUTO,
                    parent: "content",
                    transparent: !0,
                    antialias: !0,
                    preserveDrawingBuffer: !1,
                    physicsConfig: null,
                    seed: "",
                    state: null,
                    forceSetTimeOut: !1,
                }),
                    (this.clearBeforeRender = !1),
                    Phaser.Device.whenReady(() => {
                        this.stage.disableVisibilityChange = !0;
                        var e = this.device.desktop ? "click" : "touchstart";
                        document.getElementById("content").addEventListener(e, (e) => {
                            this.gameResumed(e);
                        });
                    }),
                    null != (e = window._azerionIntegration) && e.sa && (h5branding.Utils.ASSET_LOCATION = "assets/"),
                    h5branding.SplashLoader.getInstance({ gameId: Constants.GAMEDISTRIBUTION_ID, gameName: Constants.GAME_TITLE, gameTitle: Constants.GAME_TITLE, libs: [], version: version })
                        .create()
                        .then(() => {
                            Fabrique.LocalizationHandler.getInstance(this).initBrowserDetect(), this.state.add("game", { create: this.stateCreator.bind(this), preload: this.statePreloader.bind(this) }, !0);
                        });
            }
            statePreloader() {
                libs.forEach((e) => {
                    this.load.script(e, e);
                });
            }
            stateCreator() {
                this.plugins.add(PhaserNineSlice.Plugin),
                    this.plugins.add(PhaserSuperStorage.StoragePlugin),
                    this.plugins.add(PhaserCachebuster.CacheBuster),
                    this.plugins.add(PhaserSpine.SpinePlugin),
                    (this.storage.forcePromises = !0),
                    this.storage.setNamespace("mdynasty"),
                    this.state.add(t.Boot.Name, t.Boot, !1),
                    this.state.add(t.Menu.Name, t.Menu, !1),
                    this.state.add(t.MenuMap.Name, t.MenuMap, !1),
                    this.state.add(t.Gameplay.Name, t.Gameplay, !1);
                var e = () => {
                    this.recursiveUpdateText(this.stage);
                };
                WebFont.load({ custom: { families: ["Aller Display", "Days"], urls: ["assets/css/AllerDisplay.css", "assets/css/days.css"] }, active: e, inactive: e }), this.state.start(t.Boot.Name), this.state.remove("game");
            }
            recursiveUpdateText(e) {
                e instanceof Phaser.Text && (e.dirty = !0),
                    e.children &&
                        0 < e.children.length &&
                        e.children.forEach((e) => {
                            this.recursiveUpdateText(e);
                        });
            }
        }
        t.Game = e;
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (e) {
        e.Deck = class {
            constructor() {
                this.uniq = [];
                for (let e = 0; e < Constants.UNIQ_TILES; e++) this.uniq[e] = e;
            }
            createDeck(t) {
                (this.last = -1), (this.uniq = Utils.shuffleNumArray(this.uniq)), (this.level = []);
                for (let e = 0; e < t / 2; e++) this.level.push(this.uniq[e % this.uniq.length]);
                this.level = Utils.shuffleNumArray(this.level);
                var s = [];
                for (let e = 0; e < this.level.length; e++) s.push(this.level[e]), s.push(this.level[e]);
                this.level = s;
            }
            noCombo() {
                (this.last = -1),
                    (this.level = this.level.sort(function (e, t) {
                        return e - t;
                    }));
                let t = [];
                for (let e = 0; e < this.level.length; e += 2) t.push(this.level[e]);
                t = Utils.shuffleNumArray(t);
                for (let e = 0; e < t.length; e++) (this.level[2 * e] = t[e]), (this.level[2 * e + 1] = t[e]);
            }
            getNext() {
                return this.last++, this.level[this.last];
            }
            removeTiles(t, s) {
                let a = 0;
                for (let e = this.level.length - 1; 0 <= e && ((this.level[e] !== t && this.level[e] !== s) || (a++, this.level.splice(e, 1), 2 !== a)); e--);
            }
            hasTiles() {
                return 0 < this.level.length;
            }
        };
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (e) {
        e.Backend = class {
            constructor() {
                (this.gameover = !1), (this.score = 0), (this.success = !1);
            }
            generateResponse() {
                return { score: this.score, gameover: this.gameover, success: this.success, config: {} };
            }
        };
    })((MahjongDynasty = MahjongDynasty || {}));
class SaveAPI {
    constructor(e) {
        this.game = e;
    }
    static isCapable() {
        return !(void 0 === window.localStorage);
    }
    static getAccess(t) {
        if (!this.isCapable()) return null;
        try {
            return JSON.parse(localStorage.getItem(t));
        } catch (e) {
            return window.localStorage.getItem(t);
        }
    }
    static setAccess(e, t) {
        if (!this.isCapable()) return null;
        try {
            var s = window.localStorage.getItem(e);
            (s < t || null === s) && window.localStorage.setItem(e, JSON.stringify(t));
        } catch (e) {
            DOMException.QUOTA_EXCEEDED_ERR;
        }
    }
    static setForce(e, t) {
        if (!this.isCapable()) return null;
        try {
            window.localStorage.setItem(e, JSON.stringify(t));
        } catch (e) {
            DOMException.QUOTA_EXCEEDED_ERR;
        }
    }
    static generateDefaultData() {
        var t = new GameSave();
        t.levels = [];
        for (let e = 0; e < Constants.COUNT_OF_LEVELS; ++e) {
            var s = new LevelSave();
            (s.score = 0), (s.time = 0), (s.stars = 0), (s.isComplete = !1), (s.isActive = !1), (s.levelNumber = e + 1), t.levels.push(s);
        }
        (t.levels[0].isActive = !0), (t.lastLevel = 0), (t.tutShown = !1), (t.pows = []);
        for (let e = 0; e < Constants.POWS_NUM; ++e) t.pows[e] = 1;
        return t;
    }
    static clear() {
        if (!this.isCapable()) return null;
        window.localStorage.clear();
    }
}
(SaveAPI.SAVE_DATA = "FGPMahjongData"), (SaveAPI.UNIQ_ID = "FGPMahjongUniqId"), (SaveAPI.First = "FGPMahjongFirst");
class GameSave {}
class LevelSave {}
class SaveGame {
    constructor(e) {
        (this.gameName = "mahjong_dynasty"),
            (this.firstPlay = !0),
            (this.game = e),
            this.game.storage.getItem("sg").then((e) => {
                null == e ? ((this.savedGame = this.generateDefaultData()), (this.firstPlay = !0), this.save()) : this.restore();
            });
    }
    static getInstance(e) {
        return SaveGame.instance || (SaveGame.instance = new SaveGame(e)), SaveGame.instance;
    }
    generateDefaultData() {
        var t = { lastLevel: 0, tutShown: !1, pows: [], levels: [], m: !0, sf: !0 };
        for (let e = 0; e < Constants.COUNT_OF_LEVELS; ++e) {
            var s = new LevelSave();
            (s.score = 0), (s.time = 0), (s.stars = 0), (s.isComplete = !1), (s.isActive = !1), (s.levelNumber = e + 1), t.levels.push(s);
        }
        t.levels[0].isActive = !0;
        for (let e = 0; e < Constants.POWS_NUM; ++e) t.pows[e] = 1;
        return t;
    }
    get music() {
        return this.savedGame.m;
    }
    set music(e) {
        (this.savedGame.m = e), this.save();
    }
    get sfx() {
        return this.savedGame.sf;
    }
    set sfx(e) {
        (this.savedGame.sf = e), this.save();
    }
    get lastLevel() {
        return this.savedGame.lastLevel;
    }
    get levels() {
        return this.savedGame.levels;
    }
    updateScore(e, t) {
        (this.savedGame.levels[e].score = t), this.save();
    }
    updateTime(e, t) {
        (this.savedGame.levels[e].time = t), this.save();
    }
    updateStars(e, t) {
        (this.savedGame.levels[e].stars = t), this.save();
    }
    updateLevelProgress(e) {
        (this.savedGame.levels[e].isComplete = !0), e + 1 < Constants.COUNT_OF_LEVELS && (this.savedGame.levels[e + 1].isActive = !0), this.save();
    }
    updatePows() {
        for (let e = 0; e < Constants.POWS_NUM; ++e) this.savedGame.pows[e] = Constants.pows[e];
        this.save();
    }
    get currentPows() {
        return this.savedGame.pows;
    }
    get isFirstPlay() {
        return this.firstPlay;
    }
    set isFirstPlay(e) {
        (this.firstPlay = e), this.save();
    }
    save() {
        var e = JSON.stringify(this.savedGame),
            t = this.hash(e);
        this.game.storage.setItem("sg", e), this.game.storage.setItem("h", t);
    }
    restore() {
        var e = this.game.storage.getItem("sg"),
            t = this.game.storage.getItem("h");
        let s, a;
        Promise.all([e, t]).then((e) => {
            if (((s = e[0] || ""), (a = e[1] || "0"), "" !== s && a === this.hash(s) && s && "" !== s))
                try {
                    var t = JSON.parse(s);
                    (this.savedGame = t), void 0 !== this.savedGame.tutShown && (this.firstPlay = this.savedGame.tutShown);
                } catch (e) {}
        });
    }
    hash(e) {
        let t = 0,
            s,
            a,
            i;
        if (0 !== e.length) for (s = 0, i = e.length; s < i; s++) (a = e.charCodeAt(s)), (t = (t << 5) - t + a), (t |= 0);
        return t.toString();
    }
}
class ScaleManager {
    static init(e) {
        (ScaleManager.game = e),
            (this.onResize = new Phaser.Signal()),
            (e.scale.pageAlignHorizontally = !0),
            (e.scale.pageAlignVertically = !0),
            (e.scale.scaleMode = Phaser.ScaleManager.USER_SCALE),
            (window.onresize = () => {
                ScaleManager.SizeCalculation(e);
            }),
            ScaleManager.SizeCalculation(e);
    }
    static onSizeChange() {
        ScaleManager.SizeCalculation(ScaleManager.game, !0);
    }
    static resizeCallback(e, t) {
        ScaleManager.SizeCalculation2(t.width, t.height);
    }
    static SizeCalculation(t, s = !0) {
        if (s || ScaleManager.lastWidth !== window.innerWidth || ScaleManager.lastHeight !== window.innerHeight) {
            if (((ScaleManager.lastWidth = window.innerWidth), (ScaleManager.lastHeight = window.innerHeight), -1 === ScaleManager.fixedScale)) {
                ScaleManager.GameWidth, ScaleManager.GameHeight;
                (s = Math.min(window.innerWidth / ScaleManager.GameWidth, window.innerHeight / ScaleManager.GameHeight)), (s = Math.max(s, 0.16));
                (document.getElementById("content").style.minHeight = window.innerHeight.toString() + "px"),
                    (a = window.innerWidth / s),
                    (i = window.innerHeight / s),
                    t.scale.setUserScale(s, s, 0, 0),
                    t.scale.setGameSize(a, i),
                    t.world.setBounds(0, 0, a, i),
                    t.scale.refresh(),
                    (this.scale = s);
            } else {
                var a = window.innerWidth,
                    i = window.innerHeight,
                    s = Constants.GAME_WIDTH * Constants.GAME_SCALE;
                let e = 1;
                e /= i < a ? a / s : i / s;
                document.getElementById("content").style.minHeight = window.innerHeight.toString() + "px";
                (s = Math.ceil(a * e)), (a = Math.ceil(i * e)), (i = 1 / e);
                t.scale.setUserScale(i, i, 0, 0), t.scale.setGameSize(s, a), t.world.setBounds(0, 0, s, a), t.scale.refresh(), (this.scale = i);
            }
            this.onResize.dispatch(),
                setTimeout(function () {
                    ScaleManager.SizeCalculation(t, !1);
                }, 5e3 / 60);
        }
    }
    static SizeCalculation2(t, s) {
        if (ScaleManager.lastWidth !== t || ScaleManager.lastHeight !== s) {
            if (((ScaleManager.lastWidth = t), (ScaleManager.lastHeight = s), -1 === ScaleManager.fixedScale)) {
                ScaleManager.GameWidth, ScaleManager.GameHeight;
                var a = Math.min(t / ScaleManager.GameWidth, s / ScaleManager.GameHeight),
                    a = Math.max(a, 0.16);
                (document.getElementById("content").style.minHeight = s.toString() + "px"),
                    (i = t / a),
                    (n = s / a),
                    ScaleManager.game.scale.setUserScale(a, a, 0, 0),
                    ScaleManager.game.scale.setGameSize(i, n),
                    ScaleManager.game.world.setBounds(0, 0, i, n),
                    ScaleManager.game.scale.refresh(),
                    (this.scale = a);
            } else {
                var i = Constants.GAME_WIDTH * Constants.GAME_SCALE;
                let e = 1;
                e /= s < t ? t / i : s / i;
                document.getElementById("content").style.minHeight = s.toString() + "px";
                var n = Math.ceil(t * e),
                    a = Math.ceil(s * e),
                    i = 1 / e;
                ScaleManager.game.scale.setUserScale(i, i, 0, 0), ScaleManager.game.scale.setGameSize(n, a), ScaleManager.game.world.setBounds(0, 0, n, a), ScaleManager.game.scale.refresh(), (this.scale = i);
            }
            this.onResize.dispatch();
        }
    }
    static bkgX() {
        return (ScaleManager.GameWidth - ScaleManager.MaxWidth) / 2;
    }
    static bkgY() {
        return (ScaleManager.GameHeight - ScaleManager.MaxHeight) / 2;
    }
    static by(e) {
        return ScaleManager.GameWidth / 2 - (ScaleManager.GameWidth / 2 - e);
    }
    static isPortrait() {
        return this.game.world.height > this.game.world.width;
    }
}
(ScaleManager.GameWidth = 1280), (ScaleManager.GameHeight = 720), (ScaleManager.MaxWidth = 1280), (ScaleManager.MaxHeight = 720), (ScaleManager.fixedScale = -1), (ScaleManager.lastWidth = -1), (ScaleManager.lastHeight = -1);
class Utils {
    static shuffleNumArray(a) {
        for (let e, t, s = a.length; s; ) (e = Math.floor(Math.random() * s)), (t = a[--s]), (a[s] = a[e]), (a[e] = t);
        return a;
    }
    static getAnimationString(t, s) {
        var a = [];
        for (let e = 1; e <= t; ++e) e < 10 ? a.push(s + "000" + e + ".png") : e < 100 ? a.push(s + "00" + e + ".png") : e < 1e3 ? a.push(s + "0" + e + ".png") : e < 1e3 && a.push(s + e + ".png");
        return a;
    }
    static getAnimation(t, s, a = 1) {
        var i = [];
        for (let e = a; e <= t; ++e) i.push(s + e + ".png");
        return i;
    }
    static getRandomInt(e, t) {
        t = e - 0.5 + Math.random() * (t - e + 1);
        return Math.round(t);
    }
}
class Vector {
    constructor(e, t, s) {
        (this.inX = e), (this.inY = t), (this.inZ = s);
    }
}
(Vector.LEFT = new Vector(-1, 0, 0)),
    (Vector.LEFT_1 = new Vector(-1, 1, 0)),
    (Vector.RIGHT = new Vector(2, 0, 0)),
    (Vector.RIGHT_1 = new Vector(2, 1, 0)),
    (Vector.BOTTOM = new Vector(0, 2, 0)),
    (Vector.BOTTOM_1 = new Vector(1, 2, 0)),
    (Vector.UPPER = new Vector(0, 0, 1)),
    (Vector.UPPER_1 = new Vector(1, 0, 1)),
    (Vector.UPPER_2 = new Vector(0, 1, 1)),
    (Vector.UPPER_3 = new Vector(1, 1, 1)),
    (Vector.UPPER2 = new Vector(0, 0, 2)),
    (Vector.UPPER2_1 = new Vector(1, 0, 2)),
    (Vector.UPPER2_2 = new Vector(0, 1, 2)),
    (Vector.UPPER2_3 = new Vector(1, 1, 2)),
    (Vector.UPPER3 = new Vector(0, 0, 3)),
    (Vector.UPPER3_1 = new Vector(1, 0, 3)),
    (Vector.UPPER3_2 = new Vector(0, 1, 3)),
    (Vector.UPPER3_3 = new Vector(1, 1, 3));
class Atlases {}
(Atlases.Interface = "interface"), (Atlases.Fun = "fangameplay"), (Atlases.list = [Atlases.Interface, Atlases.Fun]);
class Constants {}
(Constants.BKG_MENU_SIZE = 1091),
    (Constants.GAME_SCALE = 1),
    (Constants.CALCULATED_WIDTH = 0),
    (Constants.CALCULATED_HEIGHT = 0),
    (Constants.GAME_WIDTH = 1280),
    (Constants.GAME_HEIGHT = 720),
    (Constants.LANDSCAPE_LOCKED = !1),
    (Constants.PORTRAIT_LOCKED = !1),
    (Constants.GAME_KEY = "31111284d17a8dc243bfaac240771b66"),
    (Constants.SECRET_KEY = "0438617b13e655a8436f125b928882a63080182f"),
    (Constants.GOOGLE_ID = "UA-114327842-28"),
    (Constants.GOOGLE_APP_NAME = "Mahjong Dynasty"),
    (Constants.GAMEDISTRIBUTION_ID = "21c1b91ec16c4f1fb6ae5b18ad792f13"),
    (Constants.GAMEDISTRIBUTION_USER = "ABD36C6C-E74B-4BA7-BE87-0AB01F98D30D-s1"),
    (Constants.GAME_TITLE = "Mahjong Dynasty"),
    (Constants.OPEN_LEVEL = 0),
    (Constants.COUNT_OF_LEVELS = 100),
    (Constants.ACTIVE_LEVEL = 0),
    (Constants.LAST_LEVEL = 0),
    (Constants.LAST_AVAILABLE_LEVEL = -1),
    (Constants.IS_FRESH_LEVEL = !1),
    (Constants.AUTO_START = !1),
    (Constants.UNIQ_TILES = 42),
    (Constants.SCALE_PORTRAIT = 1.78),
    (Constants.SCALE_LANDSCAPE = 1),
    (Constants.CUR_SCALE = Constants.SCALE_LANDSCAPE),
    (Constants.COMBOMETER_ADD = 0.4),
    (Constants.COMBOMETER_TIME = 20),
    (Constants.COMBOMETER_TIME_CHANGE = 0.1),
    (Constants.COMBOMETER_MOD = 0.25),
    (Constants.POWS_NUM = 5),
    (Constants.pows = []),
    (Constants.SUPPORTED_LANGUAGES = ["en", "ru", "ja"]);
class Fonts {}
(Fonts.Tangak = "Tangak"),
    (Fonts.Equinox = "Equinox"),
    (Fonts.EquinoxWhite = "EquinoxWhite"),
    (Fonts.EquinoxDarkBer = "EquinoxDarkBer"),
    (Fonts.EquinoxYellow = "EquinoxYellow"),
    (Fonts.OxygenWhite = "OxygenWhite"),
    (Fonts.OxygenWhiteShadow = "OxygenWhiteShadow"),
    (Fonts.OxygenBer = "OxygenBer"),
    (Fonts.OxygenRegularB = "OxygenRegularB"),
    (Fonts.list = [Fonts.Tangak, Fonts.Equinox, Fonts.EquinoxWhite, Fonts.EquinoxDarkBer, Fonts.EquinoxYellow, Fonts.OxygenWhite, Fonts.OxygenWhiteShadow, Fonts.OxygenBer, Fonts.OxygenRegularB]);
class Images {}
(Images.MainFonLand = "mainfon_land.jpg"),
    (Images.MainFonPort = "mainfon_port.jpg"),
    (Images.BgImage1 = "back1.jpg"),
    (Images.BgImage2 = "back2.jpg"),
    (Images.BgImage3 = "back3.jpg"),
    (Images.BgImage4 = "back4.jpg"),
    (Images.BgImage5 = "back5.jpg"),
    (Images.BgImage6 = "back6.jpg"),
    (Images.BgImage7 = "back7.jpg"),
    (Images.BgImage8 = "back8.jpg"),
    (Images.BgImage9 = "back9.jpg"),
    (Images.BgImage10 = "back10.jpg"),
    (Images.TutLandscape = "tutl.png"),
    (Images.TutPortrait = "tutp.png"),
    (Images.list = [
        Images.BgImage1,
        Images.BgImage2,
        Images.BgImage3,
        Images.BgImage4,
        Images.BgImage5,
        Images.BgImage6,
        Images.BgImage7,
        Images.BgImage8,
        Images.BgImage9,
        Images.BgImage10,
        Images.MainFonLand,
        Images.MainFonPort,
        Images.TutLandscape,
        Images.TutPortrait,
    ]);
class LevelData {}
class NeededAtlases {}
(NeededAtlases.atlasMap = {
    19: "atlas_imagesatlases0",
    27: "atlas_imagesatlases0",
    mahjong_01_02_p2_bush: "atlas_imagesatlases0",
    mahjong_01_03_p1_tree2: "atlas_imagesatlases0",
    mahjong_02_02_p2: "atlas_imagesatlases0",
    mahjong_03_04_mount3: "atlas_imagesatlases0",
    mahjong_03_06_dragon_blue: "atlas_imagesatlases0",
    mahjong_03_08_p1: "atlas_imagesatlases0",
    mahjong_03_09_mount4: "atlas_imagesatlases0",
    mahjong_03_10_mount5: "atlas_imagesatlases0",
    mahjong_03_11_shadow: "atlas_imagesatlases0",
    mahjong_04_08_light: "atlas_imagesatlases0",
    mahjong_06_03_p1_adv2: "atlas_imagesatlases0",
    mahjong_09_03_p1_temple: "atlas_imagesatlases0",
    mahjong_09_03_p1_torches: "atlas_imagesatlases0",
    mahjong_10_07_statue: "atlas_imagesatlases0",
    mahjong_10_10_elephants: "atlas_imagesatlases0",
    map_level_done_fon: "atlas_imagesatlases0",
    map_level_undone: "atlas_imagesatlases0",
    panel_bonus: "atlas_imagesatlases0",
    panel_powerups: "atlas_imagesatlases0",
    tile_dark: "atlas_imagesatlases0",
    tile_fon: "atlas_imagesatlases0",
    mahjong_09_02_p2: "atlas_imagesatlases1",
    mahjong_10_03_p3: "atlas_imagesatlases1",
    mahjong_10_05_p2: "atlas_imagesatlases1",
    mahjong_06_02_p2: "atlas_imagesatlases2",
    mahjong_07_03_p1: "atlas_imagesatlases2",
    mahjong_08_02_p2: "atlas_imagesatlases2",
    empty: "atlas_imagesatlases20",
    mahjong_01_bird11: "atlas_imagesatlases20",
    mahjong_01_bird12: "atlas_imagesatlases20",
    mahjong_01_bird21: "atlas_imagesatlases20",
    mahjong_01_bird22: "atlas_imagesatlases20",
    mahjong_02_bird11: "atlas_imagesatlases20",
    mahjong_02_bird12: "atlas_imagesatlases20",
    mahjong_02_bird13: "atlas_imagesatlases20",
    mahjong_02_bird21: "atlas_imagesatlases20",
    mahjong_02_bird22: "atlas_imagesatlases20",
    mahjong_02_bird23: "atlas_imagesatlases20",
    mahjong_04_04_flag: "atlas_imagesatlases20",
    mahjong_04_04_flag2: "atlas_imagesatlases20",
    mahjong_04_04_flag3: "atlas_imagesatlases20",
    mahjong_04_bird11: "atlas_imagesatlases20",
    mahjong_04_bird12: "atlas_imagesatlases20",
    mahjong_05_bird11: "atlas_imagesatlases20",
    mahjong_05_bird12: "atlas_imagesatlases20",
    mahjong_05_bird13: "atlas_imagesatlases20",
    mahjong_05_flag11: "atlas_imagesatlases20",
    mahjong_05_flag12: "atlas_imagesatlases20",
    mahjong_05_flag13: "atlas_imagesatlases20",
    mahjong_05_flag21: "atlas_imagesatlases20",
    mahjong_05_flag22: "atlas_imagesatlases20",
    mahjong_05_flag23: "atlas_imagesatlases20",
    mahjong_07_03_bird11: "atlas_imagesatlases20",
    mahjong_07_03_bird12: "atlas_imagesatlases20",
    mahjong_07_03_bird13: "atlas_imagesatlases20",
    mahjong_07_03_bird21: "atlas_imagesatlases20",
    mahjong_07_03_bird22: "atlas_imagesatlases20",
    mahjong_07_03_bird23: "atlas_imagesatlases20",
    mahjong_07_03_bird31: "atlas_imagesatlases20",
    mahjong_07_03_bird32: "atlas_imagesatlases20",
    mahjong_07_03_bird33: "atlas_imagesatlases20",
    mahjong_07_03_fish1: "atlas_imagesatlases20",
    mahjong_07_03_fish2: "atlas_imagesatlases20",
    mahjong_07_03_fish3: "atlas_imagesatlases20",
    mahjong_07_03_fish4: "atlas_imagesatlases20",
    mahjong_07_03_fish5: "atlas_imagesatlases20",
    mahjong_08_bird11: "atlas_imagesatlases20",
    mahjong_08_bird12: "atlas_imagesatlases20",
    mahjong_08_bird21: "atlas_imagesatlases20",
    mahjong_08_bird22: "atlas_imagesatlases20",
    screen_btn_close: "atlas_imagesatlases20",
    screen_btn_continue: "atlas_imagesatlases20",
    screen_btn_continue2: "atlas_imagesatlases20",
    screen_btn_home: "atlas_imagesatlases20",
    screen_btn_moregames: "atlas_imagesatlases20",
    screen_btn_play: "atlas_imagesatlases20",
    screen_btn_restart: "atlas_imagesatlases20",
    screen_btn_snd_off: "atlas_imagesatlases20",
    screen_btn_snd_on: "atlas_imagesatlases20",
    screen_btn_tryagain: "atlas_imagesatlases20",
    screen_levelcomplete_fon: "atlas_imagesatlases20",
    screen_levelcomplete_powerup_eye: "atlas_imagesatlases20",
    screen_levelcomplete_powerup_help: "atlas_imagesatlases20",
    screen_levelcomplete_powerup_shuffle: "atlas_imagesatlases20",
    screen_levelcomplete_powerup_sword: "atlas_imagesatlases20",
    screen_levelcomplete_powerup_undo: "atlas_imagesatlases20",
    screen_levelcomplete_star_off: "atlas_imagesatlases20",
    screen_levelcomplete_star_on: "atlas_imagesatlases20",
    screen_levelcomplete_text: "atlas_imagesatlases20",
    screen_levelcomplete_text_score: "atlas_imagesatlases20",
    screen_levelcomplete_text_youwon: "atlas_imagesatlases20",
    screen_levelfailed_text: "atlas_imagesatlases20",
    0: "atlas_imagesatlases3",
    1: "atlas_imagesatlases3",
    3: "atlas_imagesatlases3",
    4: "atlas_imagesatlases3",
    5: "atlas_imagesatlases3",
    7: "atlas_imagesatlases3",
    8: "atlas_imagesatlases3",
    11: "atlas_imagesatlases3",
    14: "atlas_imagesatlases3",
    25: "atlas_imagesatlases3",
    38: "atlas_imagesatlases3",
    btn_powerups_digits_fon: "atlas_imagesatlases3",
    funnygames: "atlas_imagesatlases3",
    hiero: "atlas_imagesatlases3",
    logo: "atlas_imagesatlases3",
    mahjong_01_02_p2: "atlas_imagesatlases3",
    mahjong_01_03_p1_tree3: "atlas_imagesatlases3",
    mahjong_01_03_p1_tree4: "atlas_imagesatlases3",
    mahjong_02_bird31: "atlas_imagesatlases3",
    mahjong_03_01_p2: "atlas_imagesatlases3",
    mahjong_03_02_mount1: "atlas_imagesatlases3",
    mahjong_03_05_balloon: "atlas_imagesatlases3",
    mahjong_04_shark1: "atlas_imagesatlases3",
    mahjong_04_shark2: "atlas_imagesatlases3",
    mahjong_04_shark3: "atlas_imagesatlases3",
    mahjong_05_leafs1: "atlas_imagesatlases3",
    mahjong_05_smoke1: "atlas_imagesatlases3",
    mahjong_05_smoke2: "atlas_imagesatlases3",
    mahjong_05_smoke3: "atlas_imagesatlases3",
    mahjong_05_smoke4: "atlas_imagesatlases3",
    mahjong_06_01_p3_adv: "atlas_imagesatlases3",
    mahjong_06_01_p3_win: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate1: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate2: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate3: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate4: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate5: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate6: "atlas_imagesatlases3",
    mahjong_08_02_p2_plate7: "atlas_imagesatlases3",
    mahjong_08_02_p2_tree2: "atlas_imagesatlases3",
    mahjong_08_03_p1: "atlas_imagesatlases3",
    mahjong_08_03_p1_man: "atlas_imagesatlases3",
    mahjong_08_03_p1_tree1: "atlas_imagesatlases3",
    mahjong_08_03_p1_tree2: "atlas_imagesatlases3",
    mahjong_09_02_p2_boats: "atlas_imagesatlases3",
    mahjong_10_08_statue_lhand: "atlas_imagesatlases3",
    mahjong_10_09_statue_rhand: "atlas_imagesatlases3",
    map_level_done_star_off: "atlas_imagesatlases3",
    map_level_done_star_on: "atlas_imagesatlases3",
    panel_score: "atlas_imagesatlases3",
    panel_score_text: "atlas_imagesatlases3",
    scale_bonus: "atlas_imagesatlases3",
    screen_pause_fon: "atlas_imagesatlases3",
    screen_pause_text: "atlas_imagesatlases3",
    tile_shine: "atlas_imagesatlases3",
    mahjong_01_03_p1: "atlas_imagesatlases4",
    mahjong_04_01_p3: "atlas_imagesatlases4",
    mahjong_07_02_p2: "atlas_imagesatlases4",
    mahjong_09_03_p1: "atlas_imagesatlases4",
    mahjong_02_03_p1: "atlas_imagesatlases5",
    mahjong_05_02_p2: "atlas_imagesatlases5",
    mahjong_06_03_p1: "atlas_imagesatlases5",
    mahjong_10_01_fon: "atlas_imagesatlases5",
    2: "atlas_imagesatlases6",
    6: "atlas_imagesatlases6",
    12: "atlas_imagesatlases6",
    13: "atlas_imagesatlases6",
    15: "atlas_imagesatlases6",
    17: "atlas_imagesatlases6",
    18: "atlas_imagesatlases6",
    23: "atlas_imagesatlases6",
    34: "atlas_imagesatlases6",
    36: "atlas_imagesatlases6",
    39: "atlas_imagesatlases6",
    42: "atlas_imagesatlases6",
    arrow: "atlas_imagesatlases6",
    mahjong_01_02_p2_rocks: "atlas_imagesatlases6",
    mahjong_01_03_p1_boat: "atlas_imagesatlases6",
    mahjong_01_04_gates: "atlas_imagesatlases6",
    mahjong_01_05_tree: "atlas_imagesatlases6",
    mahjong_02_02_p2_tree1: "atlas_imagesatlases6",
    mahjong_02_03_p1_tree4: "atlas_imagesatlases6",
    mahjong_03_03_mount2: "atlas_imagesatlases6",
    mahjong_03_07_dragon_green: "atlas_imagesatlases6",
    mahjong_04_05_boat2: "atlas_imagesatlases6",
    mahjong_04_06_boat3: "atlas_imagesatlases6",
    mahjong_04_07_boat4: "atlas_imagesatlases6",
    mahjong_04_09_p1: "atlas_imagesatlases6",
    mahjong_06_02_p2_adv1: "atlas_imagesatlases6",
    mahjong_06_02_p2_adv2: "atlas_imagesatlases6",
    mahjong_06_02_p2_win1: "atlas_imagesatlases6",
    mahjong_06_03_p1_adv1: "atlas_imagesatlases6",
    mahjong_07_01_p3: "atlas_imagesatlases6",
    mahjong_07_04_boats: "atlas_imagesatlases6",
    mahjong_08_02_p2_tree1: "atlas_imagesatlases6",
    mahjong_09_01_p3: "atlas_imagesatlases6",
    mahjong_09_02_p2_statue: "atlas_imagesatlases6",
    mahjong_10_02_light: "atlas_imagesatlases6",
    mahjong_10_04_boat: "atlas_imagesatlases6",
    mahjong_10_06_p1: "atlas_imagesatlases6",
    scale_combo: "atlas_imagesatlases6",
    9: "atlas_imagesatlases7",
    10: "atlas_imagesatlases7",
    16: "atlas_imagesatlases7",
    20: "atlas_imagesatlases7",
    21: "atlas_imagesatlases7",
    22: "atlas_imagesatlases7",
    24: "atlas_imagesatlases7",
    26: "atlas_imagesatlases7",
    28: "atlas_imagesatlases7",
    29: "atlas_imagesatlases7",
    30: "atlas_imagesatlases7",
    31: "atlas_imagesatlases7",
    32: "atlas_imagesatlases7",
    33: "atlas_imagesatlases7",
    35: "atlas_imagesatlases7",
    37: "atlas_imagesatlases7",
    40: "atlas_imagesatlases7",
    41: "atlas_imagesatlases7",
    btn_powerups_eye: "atlas_imagesatlases7",
    btn_powerups_help: "atlas_imagesatlases7",
    btn_powerups_shuffle: "atlas_imagesatlases7",
    btn_powerups_sword: "atlas_imagesatlases7",
    btn_powerups_undo: "atlas_imagesatlases7",
    btn_ui_pause: "atlas_imagesatlases7",
    mahjong_01_01_p3: "atlas_imagesatlases7",
    mahjong_01_03_p1_back: "atlas_imagesatlases7",
    mahjong_02_02_p2_tree2: "atlas_imagesatlases7",
    mahjong_02_02_p2_tree3: "atlas_imagesatlases7",
    mahjong_02_02_p2_tree4: "atlas_imagesatlases7",
    mahjong_02_03_p1_tree1: "atlas_imagesatlases7",
    mahjong_02_03_p1_tree2: "atlas_imagesatlases7",
    mahjong_02_03_p1_tree3: "atlas_imagesatlases7",
    mahjong_04_02_boat1: "atlas_imagesatlases7",
    mahjong_04_03_p2: "atlas_imagesatlases7",
    mahjong_06_02_p2_win2: "atlas_imagesatlases7",
    mahjong_06_03_p1_win1: "atlas_imagesatlases7",
    mahjong_06_03_p1_win2: "atlas_imagesatlases7",
    mahjong_08_01_p3: "atlas_imagesatlases7",
    mahjong_08_03_p1_tree3: "atlas_imagesatlases7",
    mahjong_09_02_p2_torch_light: "atlas_imagesatlases7",
    mahjong_09_02_p2_torches: "atlas_imagesatlases7",
    mahjong_10_11_elhead1: "atlas_imagesatlases7",
    mahjong_10_12_elhead2: "atlas_imagesatlases7",
    scale_bonus_star: "atlas_imagesatlases7",
    mahjong_02_01_p3: "atlas_imagesatlases8",
    mahjong_05_01_p3: "atlas_imagesatlases8",
    mahjong_05_03_p1: "atlas_imagesatlases8",
    mahjong_05_leafs2: "atlas_imagesatlases8",
    mahjong_05_leafs3: "atlas_imagesatlases8",
    mahjong_06_01_p3: "atlas_imagesatlases8",
    blue_button: "mahjong_dynasty_btn",
    green_button: "mahjong_dynasty_btn",
    green_button_small: "mahjong_dynasty_btn",
    red_button: "mahjong_dynasty_btn",
}),
    (NeededAtlases.atlas_imagesatlases0 = "atlas_imagesatlases0"),
    (NeededAtlases.atlas_imagesatlases1 = "atlas_imagesatlases1"),
    (NeededAtlases.atlas_imagesatlases2 = "atlas_imagesatlases2"),
    (NeededAtlases.atlas_imagesatlases20 = "atlas_imagesatlases20"),
    (NeededAtlases.atlas_imagesatlases3 = "atlas_imagesatlases3"),
    (NeededAtlases.atlas_imagesatlases4 = "atlas_imagesatlases4"),
    (NeededAtlases.atlas_imagesatlases5 = "atlas_imagesatlases5"),
    (NeededAtlases.atlas_imagesatlases6 = "atlas_imagesatlases6"),
    (NeededAtlases.atlas_imagesatlases7 = "atlas_imagesatlases7"),
    (NeededAtlases.atlas_imagesatlases8 = "atlas_imagesatlases8"),
    (NeededAtlases.atlas_buttons = "mahjong_dynasty_btn"),
    (NeededAtlases.list = [
        NeededAtlases.atlas_imagesatlases0,
        NeededAtlases.atlas_imagesatlases1,
        NeededAtlases.atlas_imagesatlases2,
        NeededAtlases.atlas_imagesatlases20,
        NeededAtlases.atlas_imagesatlases3,
        NeededAtlases.atlas_imagesatlases4,
        NeededAtlases.atlas_imagesatlases5,
        NeededAtlases.atlas_imagesatlases6,
        NeededAtlases.atlas_imagesatlases7,
        NeededAtlases.atlas_imagesatlases8,
        NeededAtlases.atlas_buttons,
    ]);
class NeededImages {}
(NeededImages[19] = "19"),
    (NeededImages[27] = "27"),
    (NeededImages.MAHJONG_01_02_P2_BUSH = "mahjong_01_02_p2_bush"),
    (NeededImages.MAHJONG_01_03_P1_TREE2 = "mahjong_01_03_p1_tree2"),
    (NeededImages.MAHJONG_02_02_P2 = "mahjong_02_02_p2"),
    (NeededImages.MAHJONG_03_04_MOUNT3 = "mahjong_03_04_mount3"),
    (NeededImages.MAHJONG_03_06_DRAGON_BLUE = "mahjong_03_06_dragon_blue"),
    (NeededImages.MAHJONG_03_08_P1 = "mahjong_03_08_p1"),
    (NeededImages.MAHJONG_03_09_MOUNT4 = "mahjong_03_09_mount4"),
    (NeededImages.MAHJONG_03_10_MOUNT5 = "mahjong_03_10_mount5"),
    (NeededImages.MAHJONG_03_11_SHADOW = "mahjong_03_11_shadow"),
    (NeededImages.MAHJONG_04_08_LIGHT = "mahjong_04_08_light"),
    (NeededImages.MAHJONG_06_03_P1_ADV2 = "mahjong_06_03_p1_adv2"),
    (NeededImages.MAHJONG_09_03_P1_TEMPLE = "mahjong_09_03_p1_temple"),
    (NeededImages.MAHJONG_09_03_P1_TORCHES = "mahjong_09_03_p1_torches"),
    (NeededImages.MAHJONG_10_07_STATUE = "mahjong_10_07_statue"),
    (NeededImages.MAHJONG_10_10_ELEPHANTS = "mahjong_10_10_elephants"),
    (NeededImages.MAP_LEVEL_DONE_FON = "map_level_done_fon"),
    (NeededImages.MAP_LEVEL_UNDONE = "map_level_undone"),
    (NeededImages.PANEL_BONUS = "panel_bonus"),
    (NeededImages.PANEL_POWERUPS = "panel_powerups"),
    (NeededImages.TILE_DARK = "tile_dark"),
    (NeededImages.TILE_FON = "tile_fon"),
    (NeededImages.MAHJONG_09_02_P2 = "mahjong_09_02_p2"),
    (NeededImages.MAHJONG_10_03_P3 = "mahjong_10_03_p3"),
    (NeededImages.MAHJONG_10_05_P2 = "mahjong_10_05_p2"),
    (NeededImages.MAHJONG_06_02_P2 = "mahjong_06_02_p2"),
    (NeededImages.MAHJONG_07_03_P1 = "mahjong_07_03_p1"),
    (NeededImages.MAHJONG_08_02_P2 = "mahjong_08_02_p2"),
    (NeededImages.EMPTY = "empty"),
    (NeededImages.MAHJONG_01_BIRD11 = "mahjong_01_bird11"),
    (NeededImages.MAHJONG_01_BIRD12 = "mahjong_01_bird12"),
    (NeededImages.MAHJONG_01_BIRD21 = "mahjong_01_bird21"),
    (NeededImages.MAHJONG_01_BIRD22 = "mahjong_01_bird22"),
    (NeededImages.MAHJONG_02_BIRD11 = "mahjong_02_bird11"),
    (NeededImages.MAHJONG_02_BIRD12 = "mahjong_02_bird12"),
    (NeededImages.MAHJONG_02_BIRD13 = "mahjong_02_bird13"),
    (NeededImages.MAHJONG_02_BIRD21 = "mahjong_02_bird21"),
    (NeededImages.MAHJONG_02_BIRD22 = "mahjong_02_bird22"),
    (NeededImages.MAHJONG_02_BIRD23 = "mahjong_02_bird23"),
    (NeededImages.MAHJONG_04_04_FLAG = "mahjong_04_04_flag"),
    (NeededImages.MAHJONG_04_04_FLAG2 = "mahjong_04_04_flag2"),
    (NeededImages.MAHJONG_04_04_FLAG3 = "mahjong_04_04_flag3"),
    (NeededImages.MAHJONG_04_BIRD11 = "mahjong_04_bird11"),
    (NeededImages.MAHJONG_04_BIRD12 = "mahjong_04_bird12"),
    (NeededImages.MAHJONG_05_BIRD11 = "mahjong_05_bird11"),
    (NeededImages.MAHJONG_05_BIRD12 = "mahjong_05_bird12"),
    (NeededImages.MAHJONG_05_BIRD13 = "mahjong_05_bird13"),
    (NeededImages.MAHJONG_05_FLAG11 = "mahjong_05_flag11"),
    (NeededImages.MAHJONG_05_FLAG12 = "mahjong_05_flag12"),
    (NeededImages.MAHJONG_05_FLAG13 = "mahjong_05_flag13"),
    (NeededImages.MAHJONG_05_FLAG21 = "mahjong_05_flag21"),
    (NeededImages.MAHJONG_05_FLAG22 = "mahjong_05_flag22"),
    (NeededImages.MAHJONG_05_FLAG23 = "mahjong_05_flag23"),
    (NeededImages.MAHJONG_07_03_BIRD11 = "mahjong_07_03_bird11"),
    (NeededImages.MAHJONG_07_03_BIRD12 = "mahjong_07_03_bird12"),
    (NeededImages.MAHJONG_07_03_BIRD13 = "mahjong_07_03_bird13"),
    (NeededImages.MAHJONG_07_03_BIRD21 = "mahjong_07_03_bird21"),
    (NeededImages.MAHJONG_07_03_BIRD22 = "mahjong_07_03_bird22"),
    (NeededImages.MAHJONG_07_03_BIRD23 = "mahjong_07_03_bird23"),
    (NeededImages.MAHJONG_07_03_BIRD31 = "mahjong_07_03_bird31"),
    (NeededImages.MAHJONG_07_03_BIRD32 = "mahjong_07_03_bird32"),
    (NeededImages.MAHJONG_07_03_BIRD33 = "mahjong_07_03_bird33"),
    (NeededImages.MAHJONG_07_03_FISH1 = "mahjong_07_03_fish1"),
    (NeededImages.MAHJONG_07_03_FISH2 = "mahjong_07_03_fish2"),
    (NeededImages.MAHJONG_07_03_FISH3 = "mahjong_07_03_fish3"),
    (NeededImages.MAHJONG_07_03_FISH4 = "mahjong_07_03_fish4"),
    (NeededImages.MAHJONG_07_03_FISH5 = "mahjong_07_03_fish5"),
    (NeededImages.MAHJONG_08_BIRD11 = "mahjong_08_bird11"),
    (NeededImages.MAHJONG_08_BIRD12 = "mahjong_08_bird12"),
    (NeededImages.MAHJONG_08_BIRD21 = "mahjong_08_bird21"),
    (NeededImages.MAHJONG_08_BIRD22 = "mahjong_08_bird22"),
    (NeededImages.SCREEN_BTN_CLOSE = "screen_btn_close"),
    (NeededImages.SCREEN_BTN_CONTINUE = "screen_btn_continue"),
    (NeededImages.SCREEN_BTN_CONTINUE2 = "screen_btn_continue2"),
    (NeededImages.SCREEN_BTN_HOME = "screen_btn_home"),
    (NeededImages.SCREEN_BTN_MOREGAMES = "screen_btn_moregames"),
    (NeededImages.SCREEN_BTN_PLAY = "screen_btn_play"),
    (NeededImages.SCREEN_BTN_RESTART = "screen_btn_restart"),
    (NeededImages.SCREEN_BTN_SND_OFF = "screen_btn_snd_off"),
    (NeededImages.SCREEN_BTN_SND_ON = "screen_btn_snd_on"),
    (NeededImages.SCREEN_BTN_TRYAGAIN = "screen_btn_tryagain"),
    (NeededImages.SCREEN_LEVELCOMPLETE_FON = "screen_levelcomplete_fon"),
    (NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_EYE = "screen_levelcomplete_powerup_eye"),
    (NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_HELP = "screen_levelcomplete_powerup_help"),
    (NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_SHUFFLE = "screen_levelcomplete_powerup_shuffle"),
    (NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_SWORD = "screen_levelcomplete_powerup_sword"),
    (NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_UNDO = "screen_levelcomplete_powerup_undo"),
    (NeededImages.SCREEN_LEVELCOMPLETE_STAR_OFF = "screen_levelcomplete_star_off"),
    (NeededImages.SCREEN_LEVELCOMPLETE_STAR_ON = "screen_levelcomplete_star_on"),
    (NeededImages.SCREEN_LEVELCOMPLETE_TEXT = "screen_levelcomplete_text"),
    (NeededImages.SCREEN_LEVELCOMPLETE_TEXT_SCORE = "screen_levelcomplete_text_score"),
    (NeededImages.SCREEN_LEVELCOMPLETE_TEXT_YOUWON = "screen_levelcomplete_text_youwon"),
    (NeededImages.SCREEN_LEVELFAILED_TEXT = "screen_levelfailed_text"),
    (NeededImages[0] = "0"),
    (NeededImages[1] = "1"),
    (NeededImages[3] = "3"),
    (NeededImages[4] = "4"),
    (NeededImages[5] = "5"),
    (NeededImages[7] = "7"),
    (NeededImages[8] = "8"),
    (NeededImages[11] = "11"),
    (NeededImages[14] = "14"),
    (NeededImages[25] = "25"),
    (NeededImages[38] = "38"),
    (NeededImages.BTN_POWERUPS_DIGITS_FON = "btn_powerups_digits_fon"),
    (NeededImages.FUNNYGAMES = "funnygames"),
    (NeededImages.HIERO = "hiero"),
    (NeededImages.LOGO = "logo"),
    (NeededImages.MAHJONG_01_02_P2 = "mahjong_01_02_p2"),
    (NeededImages.MAHJONG_01_03_P1_TREE3 = "mahjong_01_03_p1_tree3"),
    (NeededImages.MAHJONG_01_03_P1_TREE4 = "mahjong_01_03_p1_tree4"),
    (NeededImages.MAHJONG_02_BIRD31 = "mahjong_02_bird31"),
    (NeededImages.MAHJONG_03_01_P2 = "mahjong_03_01_p2"),
    (NeededImages.MAHJONG_03_02_MOUNT1 = "mahjong_03_02_mount1"),
    (NeededImages.MAHJONG_03_05_BALLOON = "mahjong_03_05_balloon"),
    (NeededImages.MAHJONG_04_SHARK1 = "mahjong_04_shark1"),
    (NeededImages.MAHJONG_04_SHARK2 = "mahjong_04_shark2"),
    (NeededImages.MAHJONG_04_SHARK3 = "mahjong_04_shark3"),
    (NeededImages.MAHJONG_05_LEAFS1 = "mahjong_05_leafs1"),
    (NeededImages.MAHJONG_05_SMOKE1 = "mahjong_05_smoke1"),
    (NeededImages.MAHJONG_05_SMOKE2 = "mahjong_05_smoke2"),
    (NeededImages.MAHJONG_05_SMOKE3 = "mahjong_05_smoke3"),
    (NeededImages.MAHJONG_05_SMOKE4 = "mahjong_05_smoke4"),
    (NeededImages.MAHJONG_06_01_P3_ADV = "mahjong_06_01_p3_adv"),
    (NeededImages.MAHJONG_06_01_P3_WIN = "mahjong_06_01_p3_win"),
    (NeededImages.MAHJONG_08_02_P2_PLATE1 = "mahjong_08_02_p2_plate1"),
    (NeededImages.MAHJONG_08_02_P2_PLATE2 = "mahjong_08_02_p2_plate2"),
    (NeededImages.MAHJONG_08_02_P2_PLATE3 = "mahjong_08_02_p2_plate3"),
    (NeededImages.MAHJONG_08_02_P2_PLATE4 = "mahjong_08_02_p2_plate4"),
    (NeededImages.MAHJONG_08_02_P2_PLATE5 = "mahjong_08_02_p2_plate5"),
    (NeededImages.MAHJONG_08_02_P2_PLATE6 = "mahjong_08_02_p2_plate6"),
    (NeededImages.MAHJONG_08_02_P2_PLATE7 = "mahjong_08_02_p2_plate7"),
    (NeededImages.MAHJONG_08_02_P2_TREE2 = "mahjong_08_02_p2_tree2"),
    (NeededImages.MAHJONG_08_03_P1 = "mahjong_08_03_p1"),
    (NeededImages.MAHJONG_08_03_P1_MAN = "mahjong_08_03_p1_man"),
    (NeededImages.MAHJONG_08_03_P1_TREE1 = "mahjong_08_03_p1_tree1"),
    (NeededImages.MAHJONG_08_03_P1_TREE2 = "mahjong_08_03_p1_tree2"),
    (NeededImages.MAHJONG_09_02_P2_BOATS = "mahjong_09_02_p2_boats"),
    (NeededImages.MAHJONG_10_08_STATUE_LHAND = "mahjong_10_08_statue_lhand"),
    (NeededImages.MAHJONG_10_09_STATUE_RHAND = "mahjong_10_09_statue_rhand"),
    (NeededImages.MAP_LEVEL_DONE_STAR_OFF = "map_level_done_star_off"),
    (NeededImages.MAP_LEVEL_DONE_STAR_ON = "map_level_done_star_on"),
    (NeededImages.PANEL_SCORE = "panel_score"),
    (NeededImages.PANEL_SCORE_TEXT = "panel_score_text"),
    (NeededImages.SCALE_BONUS = "scale_bonus"),
    (NeededImages.SCREEN_PAUSE_FON = "screen_pause_fon"),
    (NeededImages.SCREEN_PAUSE_TEXT = "screen_pause_text"),
    (NeededImages.TILE_SHINE = "tile_shine"),
    (NeededImages.MAHJONG_01_03_P1 = "mahjong_01_03_p1"),
    (NeededImages.MAHJONG_04_01_P3 = "mahjong_04_01_p3"),
    (NeededImages.MAHJONG_07_02_P2 = "mahjong_07_02_p2"),
    (NeededImages.MAHJONG_09_03_P1 = "mahjong_09_03_p1"),
    (NeededImages.MAHJONG_02_03_P1 = "mahjong_02_03_p1"),
    (NeededImages.MAHJONG_05_02_P2 = "mahjong_05_02_p2"),
    (NeededImages.MAHJONG_06_03_P1 = "mahjong_06_03_p1"),
    (NeededImages.MAHJONG_10_01_FON = "mahjong_10_01_fon"),
    (NeededImages[2] = "2"),
    (NeededImages[6] = "6"),
    (NeededImages[12] = "12"),
    (NeededImages[13] = "13"),
    (NeededImages[15] = "15"),
    (NeededImages[17] = "17"),
    (NeededImages[18] = "18"),
    (NeededImages[23] = "23"),
    (NeededImages[34] = "34"),
    (NeededImages[36] = "36"),
    (NeededImages[39] = "39"),
    (NeededImages[42] = "42"),
    (NeededImages.ARROW = "arrow"),
    (NeededImages.MAHJONG_01_02_P2_ROCKS = "mahjong_01_02_p2_rocks"),
    (NeededImages.MAHJONG_01_03_P1_BOAT = "mahjong_01_03_p1_boat"),
    (NeededImages.MAHJONG_01_04_GATES = "mahjong_01_04_gates"),
    (NeededImages.MAHJONG_01_05_TREE = "mahjong_01_05_tree"),
    (NeededImages.MAHJONG_02_02_P2_TREE1 = "mahjong_02_02_p2_tree1"),
    (NeededImages.MAHJONG_02_03_P1_TREE4 = "mahjong_02_03_p1_tree4"),
    (NeededImages.MAHJONG_03_03_MOUNT2 = "mahjong_03_03_mount2"),
    (NeededImages.MAHJONG_03_07_DRAGON_GREEN = "mahjong_03_07_dragon_green"),
    (NeededImages.MAHJONG_04_05_BOAT2 = "mahjong_04_05_boat2"),
    (NeededImages.MAHJONG_04_06_BOAT3 = "mahjong_04_06_boat3"),
    (NeededImages.MAHJONG_04_07_BOAT4 = "mahjong_04_07_boat4"),
    (NeededImages.MAHJONG_04_09_P1 = "mahjong_04_09_p1"),
    (NeededImages.MAHJONG_06_02_P2_ADV1 = "mahjong_06_02_p2_adv1"),
    (NeededImages.MAHJONG_06_02_P2_ADV2 = "mahjong_06_02_p2_adv2"),
    (NeededImages.MAHJONG_06_02_P2_WIN1 = "mahjong_06_02_p2_win1"),
    (NeededImages.MAHJONG_06_03_P1_ADV1 = "mahjong_06_03_p1_adv1"),
    (NeededImages.MAHJONG_07_01_P3 = "mahjong_07_01_p3"),
    (NeededImages.MAHJONG_07_04_BOATS = "mahjong_07_04_boats"),
    (NeededImages.MAHJONG_08_02_P2_TREE1 = "mahjong_08_02_p2_tree1"),
    (NeededImages.MAHJONG_09_01_P3 = "mahjong_09_01_p3"),
    (NeededImages.MAHJONG_09_02_P2_STATUE = "mahjong_09_02_p2_statue"),
    (NeededImages.MAHJONG_10_02_LIGHT = "mahjong_10_02_light"),
    (NeededImages.MAHJONG_10_04_BOAT = "mahjong_10_04_boat"),
    (NeededImages.MAHJONG_10_06_P1 = "mahjong_10_06_p1"),
    (NeededImages.SCALE_COMBO = "scale_combo"),
    (NeededImages[9] = "9"),
    (NeededImages[10] = "10"),
    (NeededImages[16] = "16"),
    (NeededImages[20] = "20"),
    (NeededImages[21] = "21"),
    (NeededImages[22] = "22"),
    (NeededImages[24] = "24"),
    (NeededImages[26] = "26"),
    (NeededImages[28] = "28"),
    (NeededImages[29] = "29"),
    (NeededImages[30] = "30"),
    (NeededImages[31] = "31"),
    (NeededImages[32] = "32"),
    (NeededImages[33] = "33"),
    (NeededImages[35] = "35"),
    (NeededImages[37] = "37"),
    (NeededImages[40] = "40"),
    (NeededImages[41] = "41"),
    (NeededImages.BTN_POWERUPS_EYE = "btn_powerups_eye"),
    (NeededImages.BTN_POWERUPS_HELP = "btn_powerups_help"),
    (NeededImages.BTN_POWERUPS_SHUFFLE = "btn_powerups_shuffle"),
    (NeededImages.BTN_POWERUPS_SWORD = "btn_powerups_sword"),
    (NeededImages.BTN_POWERUPS_UNDO = "btn_powerups_undo"),
    (NeededImages.BTN_UI_PAUSE = "btn_ui_pause"),
    (NeededImages.MAHJONG_01_01_P3 = "mahjong_01_01_p3"),
    (NeededImages.MAHJONG_01_03_P1_BACK = "mahjong_01_03_p1_back"),
    (NeededImages.MAHJONG_02_02_P2_TREE2 = "mahjong_02_02_p2_tree2"),
    (NeededImages.MAHJONG_02_02_P2_TREE3 = "mahjong_02_02_p2_tree3"),
    (NeededImages.MAHJONG_02_02_P2_TREE4 = "mahjong_02_02_p2_tree4"),
    (NeededImages.MAHJONG_02_03_P1_TREE1 = "mahjong_02_03_p1_tree1"),
    (NeededImages.MAHJONG_02_03_P1_TREE2 = "mahjong_02_03_p1_tree2"),
    (NeededImages.MAHJONG_02_03_P1_TREE3 = "mahjong_02_03_p1_tree3"),
    (NeededImages.MAHJONG_04_02_BOAT1 = "mahjong_04_02_boat1"),
    (NeededImages.MAHJONG_04_03_P2 = "mahjong_04_03_p2"),
    (NeededImages.MAHJONG_06_02_P2_WIN2 = "mahjong_06_02_p2_win2"),
    (NeededImages.MAHJONG_06_03_P1_WIN1 = "mahjong_06_03_p1_win1"),
    (NeededImages.MAHJONG_06_03_P1_WIN2 = "mahjong_06_03_p1_win2"),
    (NeededImages.MAHJONG_08_01_P3 = "mahjong_08_01_p3"),
    (NeededImages.MAHJONG_08_03_P1_TREE3 = "mahjong_08_03_p1_tree3"),
    (NeededImages.MAHJONG_09_02_P2_TORCH_LIGHT = "mahjong_09_02_p2_torch_light"),
    (NeededImages.MAHJONG_09_02_P2_TORCHES = "mahjong_09_02_p2_torches"),
    (NeededImages.MAHJONG_10_11_ELHEAD1 = "mahjong_10_11_elhead1"),
    (NeededImages.MAHJONG_10_12_ELHEAD2 = "mahjong_10_12_elhead2"),
    (NeededImages.SCALE_BONUS_STAR = "scale_bonus_star"),
    (NeededImages.MAHJONG_02_01_P3 = "mahjong_02_01_p3"),
    (NeededImages.MAHJONG_05_01_P3 = "mahjong_05_01_p3"),
    (NeededImages.MAHJONG_05_03_P1 = "mahjong_05_03_p1"),
    (NeededImages.MAHJONG_05_LEAFS2 = "mahjong_05_leafs2"),
    (NeededImages.MAHJONG_05_LEAFS3 = "mahjong_05_leafs3"),
    (NeededImages.MAHJONG_06_01_P3 = "mahjong_06_01_p3"),
    (NeededImages.RED_BUTTON = "red_button"),
    (NeededImages.BLUE_BUTTON = "blue_button"),
    (NeededImages.GREEN_BUTTON = "green_button"),
    (NeededImages.GREEN_BUTTON_SMALL = "green_button_small");
class Sounds {}
(Sounds.Click = "mahjong_menu_click_1_1"),
    (Sounds.Win = "mahjong_win_1"),
    (Sounds.Tile_select1 = "mahjong_select_1"),
    (Sounds.Tile_match = "mahjong_select_success_1"),
    (Sounds.Start_level_tiles1 = "mahjong_flyout_click_1_1"),
    (Sounds.Start_level_tiles2 = "mahjong_flyout_click_2_1"),
    (Sounds.Start_level_tiles3 = "mahjong_flyout_click_3_1"),
    (Sounds.Start_level_tiles4 = "mahjong_flyout_click_4_1"),
    (Sounds.LevelStarts = [Sounds.Start_level_tiles1, Sounds.Start_level_tiles2, Sounds.Start_level_tiles3, Sounds.Start_level_tiles4]),
    (Sounds.ScoreAdd1 = "mahjong_score_add_1_1"),
    (Sounds.ScoreAdd2 = "mahjong_score_add_2_1"),
    (Sounds.ScoreAdd3 = "mahjong_score_add_3_1"),
    (Sounds.ScoreAdd4 = "mahjong_score_add_4_1"),
    (Sounds.ScoreAdd5 = "mahjong_score_add_5_1"),
    (Sounds.ScoreAdds = [Sounds.ScoreAdd1, Sounds.ScoreAdd2, Sounds.ScoreAdd3, Sounds.ScoreAdd4, Sounds.ScoreAdd5]),
    (Sounds.Star1 = "mahjong_1_star_1"),
    (Sounds.Star2 = "mahjong_2_stars_1"),
    (Sounds.Star3 = "mahjong_3_stars_1"),
    (Sounds.Stars = [Sounds.Star1, Sounds.Star2, Sounds.Star3]),
    (Sounds.AmbCity = "mahjong_amb_city_1"),
    (Sounds.AmbFire = "mahjong_amb_fireworks_1"),
    (Sounds.AmbJungle = "mahjong_amb_jungle_1"),
    (Sounds.AmbMegapolis = "mahjong_amb_megapolis_1"),
    (Sounds.AmbNature = "mahjong_amb_nature_1"),
    (Sounds.AmbStorm = "mahjong_amb_storm_1"),
    (Sounds.AmbWater = "mahjong_amb_water_1"),
    (Sounds.Ambs = [
        [Sounds.AmbNature, Sounds.AmbWater],
        [Sounds.AmbCity, Sounds.AmbWater],
        [Sounds.AmbFire],
        [Sounds.AmbStorm],
        [Sounds.AmbNature],
        [Sounds.AmbMegapolis],
        [Sounds.AmbNature, Sounds.AmbWater],
        [Sounds.AmbCity, Sounds.AmbWater],
        [Sounds.AmbNature, Sounds.AmbWater],
        [Sounds.AmbJungle, Sounds.AmbWater],
    ]),
    (Sounds.PowerupClick = "mahjong_cheat_1"),
    (Sounds.UnlockedLevel = "mahjong_next_level_1"),
    (Sounds.Music = "mahjong_mus_1"),
    (Sounds.list = [
        Sounds.Click,
        Sounds.Music,
        Sounds.Start_level_tiles1,
        Sounds.Start_level_tiles2,
        Sounds.Start_level_tiles3,
        Sounds.Start_level_tiles4,
        Sounds.Win,
        Sounds.Tile_select1,
        Sounds.Tile_match,
        Sounds.Star1,
        Sounds.Star2,
        Sounds.Star3,
        Sounds.ScoreAdd1,
        Sounds.ScoreAdd2,
        Sounds.ScoreAdd3,
        Sounds.ScoreAdd4,
        Sounds.ScoreAdd5,
        Sounds.AmbCity,
        Sounds.AmbFire,
        Sounds.AmbJungle,
        Sounds.AmbMegapolis,
        Sounds.AmbNature,
        Sounds.AmbStorm,
        Sounds.AmbWater,
        Sounds.PowerupClick,
        Sounds.UnlockedLevel,
    ]),
    (function (o) {
        let e;
        var t;
        ((t = e = e || {}).PAUSED = "Paused"), (t.RESUMED = "Resumed");
        class s {
            constructor() {
                this.contentStatus = e.RESUMED;
            }
            static getInstance() {
                return s.instance || (s.instance = new s()), s.instance;
            }
            init(e) {
                this.game = e;
                e = window._azerionIntegration.advType;
                (this.azAdWrapper = new window.h5ads.AdWrapper(e, Constants.GAMEDISTRIBUTION_ID)), this.addListeners();
            }
            addListeners() {
                this.azAdWrapper.on(h5ads.AdEvents.CONTENT_PAUSED, () => {
                    o.PauseHandler.getInstance(this.game).pause(), (this.contentStatus = e.PAUSED);
                }),
                    this.azAdWrapper.on(h5ads.AdEvents.CONTENT_RESUMED, () => {
                        (this.contentStatus = e.RESUMED), o.PauseHandler.getInstance(this.game).resume();
                    });
            }
            showAd(e, t, s, a = !0) {
                a && o.LoaderHelper.show();
                let i = () => {
                        o.LoaderHelper.hide(), s && s.call(this), this.azAdWrapper.removeListener(h5ads.AdEvents.CONTENT_PAUSED, i);
                    },
                    n = () => {
                        o.LoaderHelper.hide(), t && t.call(this), this.azAdWrapper.removeListener(h5ads.AdEvents.CONTENT_RESUMED, n);
                    };
                this.azAdWrapper.on(h5ads.AdEvents.CONTENT_RESUMED, n), this.azAdWrapper.on(h5ads.AdEvents.CONTENT_PAUSED, i), this.azAdWrapper.showAd(h5ads.AdType.interstitial);
            }
            isAdPlaying() {
                return this.contentStatus === e.PAUSED;
            }
        }
        o.AdHandler = s;
    })((Fabrique = Fabrique || {})),
    (function (e) {
        {
            e = e.Effects || (e.Effects = {});
            class t extends Phaser.Graphics {
                constructor(e, t, s = null) {
                    super(e), this.beginFill(t, 1), this.drawRect(0, 0, this.game.width, this.game.height);
                    e.add.group(this, "white", !0).add(this);
                    t = this.game.add.tween(this);
                    t.to({ alpha: 0 }, 100),
                        t.onComplete.add(() => {
                            null !== s && s();
                        }),
                        t.start();
                }
            }
            e.FadeFromColor = t;
        }
    })((Fabrique = Fabrique || {}));
class FadeInOut {
    constructor(e) {
        (this.fadeColor = 0), (this.game = e);
    }
    static Init(e) {
        FadeInOut.instance = new FadeInOut(e);
    }
    fadeTo(e, t) {
        this.createBkg(), (this.spr_bg.alpha = 0), (this.nextState = e), (this.ars = t), this.game.add.existing(this.spr_bg);
        e = this.game.add.tween(this.spr_bg);
        e.to({ alpha: 1 }, 500, null), e.onComplete.add(this.changeState, this), e.start();
    }
    createBkg() {
        (this.spr_bg = this.game.make.graphics(0, 0)), this.spr_bg.beginFill(this.fadeColor, 1), this.spr_bg.drawRect(0, 0, this.game.world.width, this.game.world.height), this.spr_bg.endFill();
    }
    changeState() {
        this.game.state.start(this.nextState, !0, !1, this.ars);
    }
    fadeOut() {
        this.createBkg(), (this.spr_bg.alpha = 1), this.game.add.existing(this.spr_bg);
        var e = this.game.add.tween(this.spr_bg);
        e.to({ alpha: 0 }, 500, null), e.start();
    }
}
!(function (e) {
    {
        e = e.Effects || (e.Effects = {});
        class t extends Phaser.Graphics {
            constructor(e, t, s, a) {
                super(e), (this.alpha = 0), this.beginFill(t, 1), this.drawRect(0, 0, this.game.width, this.game.height), e.add.existing(this);
                t = this.game.add.tween(this);
                t.to({ alpha: 1 }, 100),
                    t.onComplete.add(() => {
                        e.state.start(s, !0, !1, a);
                    }),
                    t.start();
            }
        }
        e.FadeToColor = t;
    }
})((Fabrique = Fabrique || {})),
    (function (e) {
        {
            e = e.Effects || (e.Effects = {});
            class s {
                static fromTop(e, t) {
                    s.boundsSet || s.setBounds(e),
                        (e.world.cacheAsBitmap = !0),
                        e.add
                            .tween(e.camera)
                            .from({ y: e.height }, s.SlideTime, s.EaseIn, !0)
                            .onComplete.add(() => {
                                void 0 !== t && t(), (e.world.cacheAsBitmap = !1);
                            });
                }
                static toRight(e, t) {
                    s.boundsSet || s.setBounds(e),
                        (e.world.cacheAsBitmap = !0),
                        e.add
                            .tween(e.camera)
                            .to({ x: -e.width }, s.SlideTime, s.EaseOut, !0)
                            .onComplete.add(() => {
                                void 0 !== t && t(), (e.world.cacheAsBitmap = !1);
                            });
                }
                static fromRight(e, t) {
                    s.boundsSet || s.setBounds(e),
                        (e.world.cacheAsBitmap = !0),
                        e.add
                            .tween(e.camera)
                            .from({ x: -e.width }, s.SlideTime, s.EaseIn, !0)
                            .onComplete.add(() => {
                                void 0 !== t && t(), (e.world.cacheAsBitmap = !1);
                            });
                }
                static toLeft(e, t) {
                    s.boundsSet || s.setBounds(e),
                        (e.world.cacheAsBitmap = !0),
                        e.add
                            .tween(e.camera)
                            .to({ x: e.width }, s.SlideTime, s.EaseOut, !0)
                            .onComplete.add(() => {
                                void 0 !== t && t(), (e.world.cacheAsBitmap = !1);
                            });
                }
                static fromLeft(e, t) {
                    s.boundsSet || s.setBounds(e),
                        (e.world.cacheAsBitmap = !0),
                        e.add
                            .tween(e.camera)
                            .from({ x: e.width }, s.SlideTime, s.EaseIn, !0)
                            .onComplete.add(() => {
                                void 0 !== t && t(), (e.world.cacheAsBitmap = !1);
                            });
                }
                static setBounds(e) {
                    e.world.setBounds(-e.width, -e.height, 3 * e.width, 3 * e.height), (s.boundsSet = !0);
                }
            }
            (s.SlideTime = 250), (s.EaseIn = Phaser.Easing.Quartic.Out), (s.EaseOut = Phaser.Easing.Quartic.In), (s.boundsSet = !1), (e.SlideState = s);
        }
    })((Fabrique = Fabrique || {})),
    (function (e) {
        e.LoaderHelper = class {
            static show() {
                var e = document.getElementById("loader");
                e && (e.style.display = "block");
            }
            static hide() {
                var e = document.getElementById("loader");
                e && (e.style.display = "none");
            }
        };
    })((Fabrique = Fabrique || {})),
    (function (e) {
        let t;
        var s;
        ((s = t = e.LocalizationType || (e.LocalizationType = {})).English = "en"), (s.Russian = "ru"), (s.Japanese = "ja");
        class a {
            constructor(e) {
                this.game = e;
            }
            static getInstance(e) {
                return a.instance || (a.instance = new a(e)), a.instance;
            }
            initBrowserDetect() {
                this.languageDetector = new i18nextBrowserLanguageDetector(null, {
                    order: ["navigator", "querystring", "cookie", "localStorage", "sessionStorage", "htmlTag"],
                    lookupQuerystring: "lng",
                    lookupCookie: "i18next",
                    lookupLocalStorage: "i18nextLng",
                    lookupSessionStorage: "i18nextLng",
                    caches: ["localStorage"],
                    excludeCacheFor: ["cimode"],
                });
            }
            initI18Next() {
                i18next
                    .use(this.languageDetector)
                    .init({
                        fallbackLng: "en",
                        debug: !1,
                        resources: { en: { translation: this.game.cache.getJSON(t.English) }, ru: { translation: this.game.cache.getJSON(t.Russian) }, ja: { translation: this.game.cache.getJSON(t.Japanese) } },
                    })
                    .then((e) => {
                        i18next.changeLanguage(this.getDefaultLanguage());
                    });
            }
            getDefaultLanguage() {
                if (h5branding.Hosts.isAeria()) return "ja";
                {
                    let e = i18next.language;
                    return -1 !== e.indexOf("-") && (e = e.split("-")[0]), (e = -1 === Constants.SUPPORTED_LANGUAGES.indexOf(e) ? t.English : e);
                }
            }
            getValue(e) {
                return i18next.t(e);
            }
            getInterpolatedValue(e, t) {
                return i18next.t(e, t);
            }
        }
        e.LocalizationHandler = a;
    })((Fabrique = Fabrique || {})),
    (function (e) {
        class t {
            constructor(e) {
                (this.music = null), (this.audioInstances = {}), (this.sound = e.sound);
            }
            static getInstance(e) {
                if (null === t.instance) {
                    if (!e) throw new Error("Cant create a new instance without a game");
                    t.instance = new t(e);
                }
                return t.instance;
            }
            play(e, t = 1, s = !1) {
                return SaveGame.getInstance().sfx ? (this.audioInstances.hasOwnProperty(e) || (this.audioInstances[e] = this.sound.add(e)), this.audioInstances[e].play(void 0, void 0, t, s, !0), this.audioInstances[e]) : null;
            }
            stop(e) {
                this.audioInstances.hasOwnProperty(e) && this.audioInstances[e].stop();
            }
            playMusic(e) {
                !SaveGame.getInstance().music || (null !== this.music && this.music.name === e) || (null !== this.music && this.music.name !== e && this.music.stop(), (this.music = this.sound.play(e, 1, !0)));
            }
            fadeMusicVolume(e, t) {
                this.music && this.music.fadeTo(e, t);
            }
            stopMusic() {
                null !== this.music && this.music.isPlaying && this.music.stop();
            }
            toggleSfx() {
                SaveGame.getInstance().sfx = !SaveGame.getInstance().sfx;
            }
            toggleMusic() {
                (SaveGame.getInstance().music = !SaveGame.getInstance().music), SaveGame.getInstance().music ? this.music && this.music.play(void 0, void 0, 1, !0) : this.music && this.music.isPlaying && this.stopMusic();
            }
        }
        (t.instance = null), (e.SoundManager = t);
    })((MahjongDynasty = MahjongDynasty || {}));
class Button extends Phaser.Button {
    constructor(e, t, s, a, i, n, o, h, r, l) {
        super(e, t, s, a, i, n, o, h, r, l),
            (this.overText = "2.png"),
            (this.outText = "1.png"),
            (this.baseHeightOffset = 1),
            (this.detectPortraitScale = !1),
            (this.gHeight = this.height),
            (this.gWidth = this.width),
            (this.scalex = 1),
            (this.scaley = 1),
            this.anchor.set(0.5),
            e.world.addChild(this),
            this.onInputDown.add(this.onBtnClick, this),
            this.onInputUp.add(this.onBtnUp, this),
            o !== NeededImages.SCREEN_BTN_CLOSE && this.addShine(),
            (this.isDown = !1);
    }
    addShine(e, t, s) {
        0 < this.height &&
            ((s = s || this.height),
            (t = t || 0.82 * this.height),
            (e = e || 0.94 * this.width),
            this.masko ? this.masko.clear() : (this.masko = this.game.make.graphics(0, 0)),
            this.masko.beginFill(16777215),
            this.masko.drawRoundedRect(-e / 2, -s / 2, e, t, Math.round(e / 20)),
            this.masko.endFill(),
            this.addChild(this.masko),
            this.shine1 ? this.shine1.clear() : (this.shine1 = this.game.make.graphics(0, 0)),
            this.shine1.beginFill(16777215, 0.11),
            this.shine1.moveTo(-Button.shineW - Button.shineShift, -s / 2 + t),
            this.shine1.lineTo(-Button.shineW, -s / 2),
            this.shine1.lineTo(0, -s / 2),
            this.shine1.lineTo(-Button.shineShift, -s / 2 + t),
            this.shine1.lineTo(-Button.shineW - Button.shineShift, -s / 2 + t),
            this.shine1.endFill(),
            this.addChild(this.shine1),
            (this.shine1.visible = !1),
            (this.shine1.mask = this.masko));
    }
    reverseSprite(e, t) {
        let s = 1,
            a = 1;
        e && (s = -1), t && (a = -1), this.setScale(this.scalex * s, this.scaley * a);
    }
    onBtnClick() {
        MahjongDynasty.SoundManager.getInstance().play(Sounds.Click),
            (this.isDown = !0),
            (this.btnTween = this.game.add.tween(this.scale).to({ x: 0.95 * this.scalex * this.getCurScale(), y: 0.95 * this.scaley * this.getCurScale() }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !1));
    }
    addButtonText(e, t, s) {
        (this.textButton = this.game.add.bitmapText(0, 0, s, e, t)), this.textButton.anchor.set(0.5), this.addChild(this.textButton);
    }
    deactivate(e = 0.5) {
        (this.inputEnabled = !1), (this.alpha = e);
    }
    activate(e = 1) {
        (this.inputEnabled = !0), (this.alpha = e);
    }
    setAnimation() {
        this.events.onInputOver.add(this.overBtnFunc, this), this.events.onInputOut.add(this.outBtnFunc, this);
    }
    changeSpriteOver() {
        this.events.onInputOver.add(this.overFrame, this), this.events.onInputOut.add(this.outFrame, this);
    }
    overFrame() {
        this.frameName = this.name + this.overText;
    }
    outFrame() {
        this.frameName = this.name + this.outText;
    }
    setScale(e, t) {
        (this.scalex = e), (this.scaley = void 0 === t ? e : t), this.scale.set(this.scalex * this.getCurScale(), this.scaley * this.getCurScale()), (this.gHeight = this.height), (this.gWidth = this.width);
    }
    overBtnFunc(e) {
        (this.btnTween = this.game.add.tween(e.scale).to({ x: 1.1 * this.scalex * this.getCurScale(), y: 1.1 * this.scaley * this.getCurScale() }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !1)), this.showShine();
    }
    outBtnFunc(e) {
        this.isDown || (this.btnTween = this.game.add.tween(e.scale).to({ x: this.scalex * this.getCurScale(), y: this.scaley * this.getCurScale() }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !1)), this.hideShine();
    }
    onShineOver() {
        this.shine1.visible = !1;
    }
    onBtnUp() {
        (this.isDown = !1), (this.btnTween = this.game.add.tween(this.scale).to({ x: this.scalex * this.getCurScale(), y: this.scaley * this.getCurScale() }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !1));
    }
    showShine() {
        this.shine1 &&
            (this.shineTween && this.shineTween.stop(),
            (this.shine1.visible = !0),
            (this.shine1.x = -this.width / 2),
            (this.shineTween = this.game.add.tween(this.shine1).to({ x: this.width / 2 + Button.shineW + Button.shineShift }, 450, Phaser.Easing.Linear.None, !1)),
            this.shineTween.onComplete.addOnce(this.onShineOver, this),
            this.shineTween.start());
    }
    hideShine() {
        this.shine1 && (this.shineTween && this.shineTween.stop(), (this.shine1.visible = !1));
    }
    getCurScale() {
        return this.detectPortraitScale ? Constants.CUR_SCALE : 1;
    }
}
(Button.shineW = 60), (Button.shineShift = 60);
class FireParticle extends Phaser.Particle {
    constructor(e, t, s, a, i) {
        super(e, t, s, a, i);
    }
    onEmit() {
        0 === FireParticle.count && (Math.random() < 0.6 ? FireParticle.shuffle2(FireParticle.baseColors) : (FireParticle.baseColors2 = FireParticle.shuffle(FireParticle.baseColors))),
            FireParticle.count++,
            FireParticle.count === FireParticle.maxParticles && (FireParticle.count = 0);
        var e = Math.round(Math.random() * Math.PI * 2 * 10) / 10,
            t = 1 + 7 * Math.random(),
            s = 3.5 * Math.sqrt(t - 0.75) * 25;
        (this.x = Math.cos(e) * t),
            (this.y = Math.sin(e) * t),
            (this.angle = (180 * e) / Math.PI),
            (this.body.velocity.x = s * Math.cos(e)),
            (this.body.velocity.y = s * Math.sin(e)),
            (this.scale.x = this.scale.y = 0.075 / Math.pow(t, 1 / 3)),
            (this.tint = FireParticle.baseColors2[Math.floor(t / 3)]),
            (this.blendMode = PIXI.blendModes.ADD);
    }
    static shuffle(t) {
        for (let e = t.length - 1; 0 < e; e--) {
            var s = Math.floor(Math.random() * (e + 1));
            [t[e], t[s]] = [t[s], t[e]];
        }
        return t;
    }
    static shuffle2(t) {
        FireParticle.baseColors2 = [];
        for (let e = t.length - 1; 0 < e; e--) FireParticle.baseColors2.push(t[Math.floor(Math.random() * t.length)]);
    }
}
(FireParticle.baseColors = [16777215, 7536391, 12856025]),
    (FireParticle.baseColors2 = []),
    (FireParticle.count = 0),
    (FireParticle.maxParticles = 200),
    (function (e) {
        class t extends Phaser.Text {
            constructor(e, t, s, a, i, n, o) {
                super(e, t, s, a, i), (this.maxWidth = n), (this.maxHeight = o), this.game.add.existing(this);
            }
            setText(e) {
                return super.setText(e), (this.maxWidth || this.maxHeight) && this.makeFontFit(), this;
            }
            setMaxSize(e, t) {
                (this.maxWidth = e), (this.maxHeight = t);
            }
            makeFontFit() {
                let e;
                for (; this.width > this.maxWidth || this.height > this.maxHeight; ) {
                    if ((e = parseInt(this.fontSize.toString().replace("px", ""), 10) - 1) < 10) {
                        (e = 10), (this.fontSize = e);
                        break;
                    }
                    this.fontSize = e;
                }
            }
        }
        e.Label = t;
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (l) {
        class e extends Phaser.Button {
            constructor(e, t, s, a, i, n, o, h, r) {
                super(e, t, s, Atlases.Interface, n, o),
                    this.anchor.set(0.5),
                    (this.maxWidth = h || this.width),
                    (this.maxHeight = r || this.height),
                    (this.label = new l.Label(this.game, 0, 2 * Constants.GAME_SCALE, a, i, this.maxWidth, this.maxHeight)),
                    this.label.anchor.set(0.5),
                    this.addChild(this.label),
                    this.game.add.existing(this);
            }
            createTexture(e) {
                var t = this.game.make.graphics(0, 0);
                t
                    .beginFill(0, 0.3)
                    .drawRoundedRect(5, 5 * Constants.GAME_SCALE, this.maxWidth - 10 * Constants.GAME_SCALE, this.maxHeight, 15 * Constants.GAME_SCALE)
                    .beginFill(e)
                    .drawRoundedRect(0, 0, this.maxWidth, this.maxHeight, 15 * Constants.GAME_SCALE)
                    .lineStyle(3, 16777215)
                    .drawRoundedRect(0, 0, this.maxWidth - 2, this.maxHeight - 2, 15 * Constants.GAME_SCALE)
                    .endFill(),
                    (this.texture = t.generateTexture()),
                    t.destroy(!0);
            }
            setText(e) {
                this.label.setText(e);
            }
            updateScaling(e) {
                this.scale.set(e), this.label.setMaxSize(0.9 * this.width, 0.98 * this.height), this.label.setText(this.label.text);
            }
            destroy(e) {
                this.label.destroy(e), (this.id = null), (this.label = null), super.destroy(e);
            }
        }
        l.LabeledButton = e;
    })((MahjongDynasty = MahjongDynasty || {}));
class LabeledInfo extends Phaser.Group {
    constructor(e, t, s, a, i) {
        super(e),
            (this.label = this.game.add.bitmapText(0, 0, a, t, 23, this)),
            this.label.anchor.set(0.5, 1),
            (this.label.align = "center"),
            this.add(this.label),
            (this.info = this.game.add.bitmapText(0, this.label.y + 5, i, s, 30, this)),
            this.info.anchor.set(0.5, 0),
            (this.info.align = "center"),
            this.add(this.info);
    }
    rescale(e, t) {
        (this.x = e), (this.y = t);
    }
    changeLabelTint(e) {
        (this.label.cacheAsBitmap = !1), (this.label.tint = e), (this.label.cacheAsBitmap = !0);
    }
}
class LayerIndicator extends Phaser.Group {
    constructor(e, t = 2) {
        super(e), (this.tiles = []), (this.zLayer = t), (this.menutiles = this.game.cache.getJSON("menu").all[0]);
        for (let e = 0; e < this.menutiles.count; ++e) {
            var s = new LevelBtn(this.game, e, void 0, this);
            this.coordinateToCell(s, this.menutiles.tiles[e]),
                this.add(s),
                s.addButtonText((e + 1).toString(), 35, Fonts.EquinoxDarkBer),
                (s.textButton.y = -50),
                (s.textButton.x = Tile.X_CORRECTION + 4),
                (this.tileWidth = this.width),
                (this.tileHeight = this.height),
                this.tiles.push(s);
        }
        this.game.add.existing(this), this.getTilesSize(this.menutiles);
    }
    setStartZ() {
        for (let e = 0; e < this.tiles.length; ++e)
            this.tiles[e].inZ > this.zLayer ? (this.tiles[e].alpha = 0) : ((this.tiles[e].alpha = 1), (this.tiles[e].inputEnabled = !1)),
                this.tiles[e].inZ > this.zLayer - 1 ? ((this.tiles[e].inputEnabled = this.tiles[e].isActive), (this.tiles[e].bkgGraphic.alpha = 0)) : (this.tiles[e].bkgGraphic.alpha = 1),
                this.tiles[e].inZ > this.zLayer && (this.tiles[e].inputEnabled = !1);
    }
    getTilesSize(t) {
        let s = t.tiles[0],
            a = t.tiles[0];
        for (let e = 1; e < t.count; ++e) s.inX >= t.tiles[e].inX && (s = t.tiles[e]).inZ < t.tiles[e].inZ && (s = t.tiles[e]), a.inY >= t.tiles[e].inY && (a = t.tiles[e]).inZ < t.tiles[e].inZ && (a = t.tiles[e]);
        (this.shiftx = ((s.inX - 1) * Tile.TILE_WIDTH) / 2 + (s.inZ + 1) * Tile.X_CORRECTION), (this.shifty = ((a.inY - 1) * Tile.TILE_HEIGHT) / 2 + (a.inZ + 1) * Tile.Y_CORRECTION);
    }
    setTileGroup() {
        let e = 320;
        ScaleManager.isPortrait() && (e = 100);
        var t = this.game.world.width / (this.tileWidth + e),
            s = this.game.world.height / (this.tileHeight + 100 + 50),
            a = t < s ? t : s,
            t = t < s ? 0 : 50;
        this.scale.set(a), (this.x = (this.game.world.width - this.tileWidth * a) / 2 - this.shiftx * a), (this.y = (this.game.world.height - t - this.tileHeight * a) / 2 - this.shifty * a + t);
    }
    coordinateToCell(e, t) {
        e.inZ = t.inZ;
        t = this.getPos(t);
        (e.x = t.inX), (e.y = t.inY), (e.sortBy = t.inZ);
    }
    setLayer(e) {
        this.zLayer += e;
        for (let e = 0; e < this.tiles.length; ++e)
            this.tiles[e].inZ > this.zLayer ? this.tiles[e].setVisible(0) : (this.tiles[e].setVisible(1), (this.tiles[e].inputEnabled = !1)),
                this.tiles[e].inZ > this.zLayer - 1 ? ((this.tiles[e].inputEnabled = this.tiles[e].isActive), this.tiles[e].setBlue(0)) : this.tiles[e].setBlue(1),
                this.tiles[e].inZ > this.zLayer && (this.tiles[e].inputEnabled = !1);
    }
    fillLevels(t, s) {
        for (let e = 0; e < this.tiles.length; ++e) this.tiles[e].onInputDown.add(t, s), SaveGame.getInstance().levels[e].isActive ? this.tiles[e].setAccess(!0) : this.tiles[e].setAccess(!1);
        this.setStartZ();
    }
    getPos(e) {
        return new Vector((e.inX * Tile.TILE_WIDTH) / 2 + e.inZ * Tile.X_CORRECTION, (e.inY * Tile.TILE_HEIGHT) / 2 + e.inZ * Tile.Y_CORRECTION, 1e3 * e.inZ + e.inX + e.inY);
    }
    rescale() {
        this.setTileGroup(), this.sort("sortBy", Phaser.Group.SORT_ASCENDING);
    }
}
class LevelBtn extends Button {
    constructor(e, t, s, a) {
        super(e, 0, 0, Atlases.Fun, s, a, LevelBtn.BKG_NAME, LevelBtn.BKG_NAME, LevelBtn.BKG_NAME, LevelBtn.BKG_NAME),
            (this.TILE_WIDTH = 9.45),
            (this.TILE_HEIGHT = 12.45),
            this.anchor.set(0.5),
            (this.num = t),
            (this.inputEnabled = !1),
            (this.bkgGraphic = this.game.add.sprite(-this.width / 2, -this.height / 2, Atlases.Fun, "dark_tile.png")),
            this.addChild(this.bkgGraphic);
    }
    createTiles() {
        var t,
            s = this.game.add.bitmapData(this.TILE_WIDTH - 1.5, this.TILE_HEIGHT - 1.5 * 1.31746),
            a = (s.fill(8, 51, 130), Constants.LEVELS.all[this.num]),
            i = (this.getTilesSize(a), this.game.add.bitmapData(this.tileWidth / 2, this.tileHeight / 2));
        for (let e = 0; e < a.count; ++e) 0 === a.tiles[e].inZ && ((t = this.getPos(a.tiles[e])), i.draw(s, t.inX, t.inY));
        (this.tilesgroup = this.game.add.sprite(0, 0, i)), this.tilesgroup.anchor.set(0.5), this.addChild(this.tilesgroup), this.setTileGroup();
    }
    createLock() {
        (this.close = this.game.add.sprite(Tile.X_CORRECTION + 4, Tile.Y_CORRECTION + 25, Atlases.Fun, "levelselect_locked.png")), this.close.anchor.set(0.5), this.close.scale.set(0.9), (this.close.alpha = 0.6), this.addChild(this.close);
    }
    getTilesSize(t) {
        let s = t.tiles[0],
            a = t.tiles[0],
            i = t.tiles[0],
            n = t.tiles[0];
        for (let e = 1; e < t.count; ++e)
            0 === t.tiles[e].inZ && (s.inX >= t.tiles[e].inX && (s = t.tiles[e]), a.inY >= t.tiles[e].inY && (a = t.tiles[e]), i.inX <= t.tiles[e].inX && (i = t.tiles[e]), n.inY <= t.tiles[e].inY && (n = t.tiles[e]));
        (this.tileWidth = (i.inX - s.inX + 2) * this.TILE_WIDTH), (this.tileHeight = (n.inY - a.inY + 2) * this.TILE_HEIGHT), (this.shiftx = s.inX), (this.shifty = a.inY);
    }
    setTileGroup() {
        var e = Tile.TILE_HEIGHT / (this.tilesgroup.height + 80),
            t = Tile.TILE_WIDTH / (this.tilesgroup.width + 20);
        this.tilesgroup.scale.set(t < e ? t : e), (this.tilesgroup.x = Tile.X_CORRECTION + 4), (this.tilesgroup.y = 30 + Tile.Y_CORRECTION);
    }
    coordinateToCell(e, t) {
        t = this.getPos(t);
        (e.x = t.inX), (e.y = t.inY);
    }
    getPos(e) {
        return new Vector(((e.inX - this.shiftx) * this.TILE_WIDTH) / 2, ((e.inY - this.shifty) * this.TILE_HEIGHT) / 2, 1e3 * e.inZ + e.inX + e.inY);
    }
    setBlue(e = 1) {
        this.setTweens(this.darktween, this.bkgGraphic, e);
    }
    setVisible(e = 1) {
        this.setTweens(this.visibletween, this, e);
    }
    setTweens(e, t, s = 1) {
        void 0 !== e && e.stop(), s !== t.alpha && this.game.add.tween(t).to({ alpha: s }, 500, Phaser.Easing.Linear.None, !0, 0, 0, !1);
    }
    setAccess(e) {
        (this.isActive = e) ? ((this.inputEnabled = !0), this.createTiles()) : ((this.inputEnabled = !1), this.createLock()), this.bkgGraphic.moveUp();
    }
}
(LevelBtn.BKG_NAME = "tile.png"),
    (function (i) {
        class t {
            constructor(e) {
                (this.sounds = []), (this.volumes = []), (this.tweens = new i.Tweens(e)), (this.subMaps = []);
                for (let e = 0; e < 10; e++) this.volumes[e] = 0;
                t.obj || (t.obj = e.cache.getJSON("map")), (this.scaleMin = t.obj.scaleMin || 0.8), (this.scaleMax = t.obj.scaleMax || 1.2), (this.scrollOffset = t.obj.scrollOffset || 0);
                for (let e = 0; e < t.obj.subMaps.length; e++) this.subMaps.push(i.SubMap.fromObject(t.obj.subMaps[e]));
                this.calculateGeneratedYForSubmaps();
            }
            static init(e) {
                t.instance = new t(e);
            }
            loadTextures(t) {
                for (let e = 0; e < this.subMaps.length; e++) {
                    var s = this.subMaps[e].getTextureList();
                    for (let e = 0; e < s.length; e++) t.load.image(s[e], s[e]);
                }
            }
            calculateGeneratedYForSubmaps() {
                let e = Constants.CALCULATED_HEIGHT,
                    t = (e = window.innerWidth > window.innerHeight ? Math.round(window.innerHeight / ScaleManager.scale) : e);
                for (let e = 0; e < this.subMaps.length; e++) (this.subMaps[e].generatedY = t - this.subMaps[e].height / 2), (t -= this.subMaps[e].height);
            }
            draw(t) {
                for (let e = this.subMaps.length - 1; 0 <= e; e--) this.subMaps[e].draw(t), this.checkTween(e, this.subMaps[e].scrollProgress), this.checkSounds(e, this.subMaps[e].scrollProgress);
            }
            preventOverScroll() {
                0 < this.scrollOffset && (this.scrollOffset = 0);
                var e = this.subMaps[this.subMaps.length - 1],
                    e = e.generatedY - e.height / 2;
                this.scrollOffset < e && (this.scrollOffset = e);
            }
            scroll(e, t) {
                return (this.scrollOffset += t), this.preventOverScroll(), t;
            }
            scrollTo(e, t) {
                return (this.scrollOffset = t), this.preventOverScroll(), t;
            }
            checkTween(e, t) {
                this.tweens.checkTween(e, t, this.subMaps[e]);
            }
            shutdown() {
                if ((this.tweens.shutdown(), SaveGame.getInstance().music && this.sounds))
                    for (let t = 0; t < 10; t++)
                        if (this.sounds[t]) {
                            for (let e = 0; e < this.sounds[t].length; e++) this.sounds[t][e] && (this.sounds[t][e].stop(), (this.sounds[t][e] = null));
                            (this.sounds[t] = null), (this.volumes[t] = 0);
                        }
                for (let e = 0; e < this.subMaps.length; e++) this.subMaps[e].shutdown();
                (t.mapBtns = []), (t.instance = null);
            }
            checkSounds(t, e) {
                if (SaveGame.getInstance().music)
                    if (e < 0 || 100 < e) {
                        if (this.sounds[t]) {
                            for (let e = 0; e < this.sounds[t].length; e++) this.sounds[t][e] && this.sounds[t][e].stop();
                            (this.sounds[t] = null), (this.volumes[t] = 0);
                        }
                    } else {
                        var s,
                            a = this.getVolume(e);
                        if (this.sounds[t]) {
                            if (this.volumes[t] !== a) {
                                this.volumes[t] = a;
                                for (let e = 0; e < this.sounds[t].length; e++) this.sounds[t][e].volume = a;
                            }
                        } else {
                            this.sounds[t] = [];
                            for (let e = 0; e < Sounds.Ambs[t].length; e++) (s = i.SoundManager.getInstance().play(Sounds.Ambs[t][e], a, !0)), (this.sounds[t][e] = s);
                            this.volumes[t] = a;
                        }
                    }
            }
            getVolume(e) {
                50 < e && (e = 100 - e);
                let t = ((5 * Math.floor(e / 5)) / 100) * 0.5;
                return t < 0.025 ? (t = 0) : 0.5 < t && (t = 0.5), t;
            }
        }
        (t.width = 1280), (t.height = 720), (t.mapBtns = []), (i.Map = t);
    })((MahjongDynasty = MahjongDynasty || {}));
var SubMap = MahjongDynasty.SubMap;
class MapBtn extends Button {
    constructor(e, t, s, a) {
        super(e, 0, 0, null, s, a), (this.starsOnImg = []), (this.starsOffImg = []), this.anchor.set(0.5), (this.num = t), (this.inputEnabled = !1);
    }
    setAccess(e, t = 0) {
        (this.isActive = e), (this.stars = t), this.isActive ? ((this.inputEnabled = !0), this.createLevelDone(this.stars)) : ((this.inputEnabled = !1), this.createLevelUndone());
    }
    createLevelDone(t) {
        for (
            this.undoneFon && this.undoneFon.destroy(),
                this.doneFon || ((this.doneFon = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.MAP_LEVEL_DONE_FON], NeededImages.MAP_LEVEL_DONE_FON)), this.addChild(this.doneFon), this.doneFon.anchor.set(0.5));
            this.starsOffImg.length < 3;

        ) {
            var e = this.game.make.image(0, 0, NeededAtlases.atlasMap[NeededImages.MAP_LEVEL_DONE_STAR_OFF], NeededImages.MAP_LEVEL_DONE_STAR_OFF);
            e.anchor.set(0.5), this.starsOffImg.push(e), this.addChild(e);
        }
        for (this.positionStars(this.starsOffImg); this.starsOnImg.length < t; ) {
            var s = this.game.make.image(0, 0, NeededAtlases.atlasMap[NeededImages.MAP_LEVEL_DONE_STAR_ON], NeededImages.MAP_LEVEL_DONE_STAR_ON);
            s.anchor.set(0.5), this.starsOnImg.push(s), this.addChild(s);
        }
        this.positionStars(this.starsOnImg);
        for (let e = 0; e < 3; e++) (this.starsOffImg[e].visible = !(t > e)), this.starsOnImg[e] && (this.starsOnImg[e].visible = t > e);
        this.addText();
    }
    createLevelUndone() {
        this.undoneFon || ((this.undoneFon = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.MAP_LEVEL_UNDONE], NeededImages.MAP_LEVEL_UNDONE)), this.addChild(this.undoneFon), this.undoneFon.anchor.set(0.5)),
            this.starsOffImg.length,
            this.addText();
    }
    addText() {
        this.numText || ((this.numText = this.game.make.bitmapText(0, 0, Fonts.Tangak, "0", 42)), this.numText.anchor.set(0.5), this.numText.position.set(0, 17), (this.numText.align = "center"), this.numText.setText("" + this.num)),
            this.addChild(this.numText);
    }
    positionStars(t) {
        var s = [
            [-32, -20],
            [0, -30],
            [32, -20],
        ];
        for (let e = 0; e < t.length; e++) t[e].position.set(s[e][0], s[e][1]);
    }
    shutdown() {
        (this.subMap = null), this.numText.destroy(!0), this.doneFon && this.doneFon.destroy(!0), this.undoneFon && this.undoneFon.destroy(!0);
        for (let e = 0; e < this.starsOnImg.length; e++) this.starsOnImg[e].destroy(!0);
        this.starsOnImg = null;
        for (let e = 0; e < this.starsOffImg.length; e++) this.starsOffImg[e].destroy(!0);
        this.starsOffImg = null;
    }
}
var TileSpriteType,
    Fabrique,
    MahjongDynasty,
    Gameplay = MahjongDynasty.Gameplay;
class PowerupBtn extends Button {
    constructor(e, t, s, a) {
        super(e, 0, 0, NeededAtlases.atlasMap[t], null, null, t, t, t, t),
            (this.detectPortraitScale = !0),
            this.anchor.set(0.5),
            (this.num = 0),
            (this.state = a),
            (this.callback = s),
            this.addElements(),
            this.updateText(),
            this.setAnimation();
    }
    addElements() {
        (this.numFon = this.game.add.sprite(30, -48, NeededAtlases.atlasMap[NeededImages.BTN_POWERUPS_DIGITS_FON], NeededImages.BTN_POWERUPS_DIGITS_FON)),
            this.numFon.anchor.set(0.5),
            this.addChild(this.numFon),
            (this.numText = this.game.add.bitmapText(0, 0, Fonts.EquinoxWhite, "0", 27)),
            this.numText.anchor.set(0.5, 0),
            this.numText.position.set(30, -58),
            (this.numText.align = "center"),
            this.addChild(this.numText);
    }
    onBtnUp() {
        super.onBtnUp(), this.onClick();
    }
    onClick() {
        this.isOn && 0 < this.num && this.callback(this.state);
    }
    updateText() {
        this.numText.setText("" + this.num);
    }
    setNum(e) {
        (this.num = e), this.updateText(), (Constants.pows[this.id] = e), this.refresh();
    }
    refresh() {
        0 < this.num ? this.switchOn() : this.switchOff();
    }
    switchOn() {
        (this.isOn = !0), (this.tint = -1);
    }
    switchOff() {
        (this.isOn = !1), (this.tint = 7829367);
    }
    minusNum() {
        this.setNum(this.num - 1);
    }
    turning(e) {
        e ? (this.numFon.position.set(30, -48), this.numText.position.set(30, -58)) : (this.numFon.position.set(44, -44), this.numText.position.set(44, -54));
    }
    onBtnClick() {
        0 < this.num &&
            (MahjongDynasty.SoundManager.getInstance().play(Sounds.PowerupClick),
            (this.isDown = !0),
            (this.btnTween = this.game.add.tween(this.scale).to({ x: 0.95 * this.scalex * this.getCurScale(), y: 0.95 * this.scaley * this.getCurScale() }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !1)));
    }
    overBtnFunc(e) {
        this.isOn && this.showShine();
    }
    outBtnFunc(e) {
        this.hideShine();
    }
}
class ProgressBar extends Phaser.Group {
    constructor(e, t, s) {
        super(e),
            (this.starSpeeds = []),
            this.position.set(t, s),
            this.game.add.existing(this),
            (this.bar = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCALE_BONUS], NeededImages.SCALE_BONUS)),
            this.bar.anchor.set(0.5, 1),
            (this.barMask = this.game.make.graphics(0, 0)),
            this.barMask.beginFill(16777215),
            this.barMask.drawRect(this.bar.x - this.bar.width / 2, this.bar.y, this.bar.width, -ProgressBar.BAR_H),
            this.addChild(this.barMask),
            (this.bar.mask = this.barMask),
            (this.comboMeter = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCALE_COMBO], NeededImages.SCALE_COMBO)),
            this.comboMeter.anchor.set(0.5, 0.5),
            (this.comboMeterMask = this.game.make.graphics(0, 0)),
            this.comboMeterMask.beginFill(16777215),
            this.comboMeterMask.drawRect(this.comboMeter.x - this.comboMeter.width / 2, 0, this.comboMeter.width, -this.comboMeter.height),
            this.comboMeter.addChild(this.comboMeterMask),
            (this.comboMeterMask.y = this.comboMeter.height / 2),
            (this.comboMeter.mask = this.comboMeterMask),
            (this.comboMeterScoreText = this.game.add.bitmapText(0, 0, Fonts.EquinoxWhite, "x1", 66)),
            this.comboMeterScoreText.anchor.set(0.5),
            (this.isBarStop = !1),
            (this.onEndBar = new Phaser.Signal()),
            (this.currTime = 0),
            (this.isStarted = !1),
            this.addChild(this.bar),
            this.addChild(this.comboMeter),
            this.addChild(this.comboMeterScoreText),
            (this.stars = []);
        for (let e = 0; e < 3; e++) this.stars[e] = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCALE_BONUS_STAR], NeededImages.SCALE_BONUS_STAR);
        this.comboSpeed = 1 / Constants.COMBOMETER_TIME / 1e3;
    }
    countOfTiles(e) {
        var t,
            s = ProgressBar.MILISEC_FOR_ONE_TILE_STARS.length;
        (this.fullBar = e * ProgressBar.MILISEC_FOR_ONE_TILE_STARS[s - 1]), (this.starPercent = []);
        for (let e = 0; e < s; e++) this.starPercent[e] = ProgressBar.MILISEC_FOR_ONE_TILE_STARS[e] / ProgressBar.MILISEC_FOR_ONE_TILE_STARS[s - 1];
        for (let e = 0; e < 3; e++) (t = this.stars[e]).anchor.set(0.5, 0.5), (t.y = 0 - ProgressBar.BAR_H * (1 - this.starPercent[e])), (t.x = 0), this.addChild(t);
        this.countOfUserStars = 3;
    }
    setBonusPoints(e) {}
    foundPair(e) {
        (this.currTime -= e), this.currTime < 0 && (this.currTime = 0);
    }
    rescale(e, t, s, a = !1) {
        this.scale.set(s), this.position.set(e, t), this.turning(a);
    }
    turning(e) {
        if (e) {
            (this.angle = 90),
                (this.comboMeter.angle = 270),
                this.comboMeter.position.set(0, -ProgressBar.BAR_H - 62),
                (this.comboMeterScoreText.angle = this.comboMeter.angle),
                this.comboMeterScoreText.position.set(this.comboMeter.x + 5, this.comboMeter.y + 0);
            for (let e = 0; e < 3; ++e) this.stars[e].angle = 270;
        } else {
            (this.angle = 0), (this.comboMeter.angle = 0), this.comboMeter.position.set(0, 60), (this.comboMeterScoreText.angle = this.comboMeter.angle), this.comboMeterScoreText.position.set(this.comboMeter.x, this.comboMeter.y + 5);
            for (let e = 0; e < 3; ++e) this.stars[e].angle = 0;
        }
    }
    update() {
        this.updateComboBar(this.game.time.elapsedMS);
    }
    updateBarProgress(e) {
        this.barTween && this.barTween.stop(), (this.barTween = this.game.add.tween(this.barMask.scale).to({ y: e }, 450, Phaser.Easing.Cubic.Out, !0, 0));
    }
    addCombo() {
        this.combo < 1 ? ((this.comboHeight += Constants.COMBOMETER_ADD), 1 <= this.comboHeight && ((this.comboHeight = 1), (this.combo += 1), this.animateCombo())) : ((this.combo += 1), this.animateCombo()), this.updateComboBar(0, !0);
    }
    getCombo() {
        return this.combo;
    }
    setCombo(e) {
        (this.combo = e), (this.comboHeight = 0), this.updateComboBar(0, !0);
    }
    resetCombo() {
        (this.combo = 0), (this.comboHeight = 0), this.updateComboBarNumber(), this.updateComboBarHeight();
    }
    updateComboBar(e, t = !1) {
        (0 < this.comboHeight || t) &&
            ((this.comboHeight -= e * this.comboSpeed * (1 + Constants.COMBOMETER_TIME_CHANGE * this.combo)), this.comboHeight < 0 && ((this.comboHeight = 0), (this.combo = 0)), this.updateComboBarNumber(), this.updateComboBarHeight());
    }
    updateComboBarNumber() {
        this.comboMeterScoreText.text = "x" + (this.combo + 1).toString();
    }
    updateComboBarHeight() {
        this.comboMeterMask.scale.set(1, this.comboHeight);
    }
    animateCombo() {
        this.tween1 && this.tween1.stop(),
            this.tween2 && this.tween2.stop(),
            this.comboMeter.scale.set(1, 1),
            this.comboMeterScoreText.scale.set(1, 1),
            (this.tween1 = this.game.add.tween(this.comboMeter.scale).to({ x: 1.3, y: 1.3 }, 450, Phaser.Easing.Elastic.In, !0, 0).yoyo(!0, 100)),
            (this.tween2 = this.game.add.tween(this.comboMeterScoreText.scale).to({ x: 1.35, y: 1.35 }, 550, Phaser.Easing.Elastic.In, !0, 0).yoyo(!0, 50));
    }
    setStarpoints(e) {
        this.starpoints = e || [5e4, 1e5, 15e4];
        for (let e = 0; e < this.starpoints.length; e++)
            0 === e
                ? (this.starSpeeds[e] = +ProgressBar.PERCENT_PER_STARS[e] / this.starpoints[e])
                : (this.starSpeeds[e] = (ProgressBar.PERCENT_PER_STARS[e] - ProgressBar.PERCENT_PER_STARS[e - 1]) / (this.starpoints[e] - this.starpoints[e - 1]));
        var t;
        for (let e = (this.starSpeeds[3] = 0); e < 3; e++) (t = this.stars[e]).anchor.set(0.5, 0.5), (t.y = -ProgressBar.BAR_H * ProgressBar.PERCENT_PER_STARS[e]), (t.x = 0), this.addChild(t), (t.alpha = 0.25);
        this.countOfUserStars = 0;
    }
    setBarPoints(t) {
        var e;
        let s = 0,
            a = 3;
        if (t < this.starpoints[2])
            for (let e = 0; e < 3; e++)
                if (t < this.starpoints[e]) {
                    (s = this.starSpeeds[e]), (a = e);
                    break;
                }
        for (; a > this.countOfUserStars; )
            this.countOfUserStars++,
                this.game.add.tween(this.stars[this.countOfUserStars - 1]).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, !0, 0, 0, !1),
                MahjongDynasty.SoundManager.getInstance().play(Sounds.Stars[this.countOfUserStars - 1]);
        let i = 0,
            n = 0;
        0 < a && ((i = ProgressBar.PERCENT_PER_STARS[a - 1]), (n = this.starpoints[a - 1])), (e = i + (t - n) * s), this.updateBarProgress(e);
    }
}
(ProgressBar.MILISEC_FOR_ONE_TILE_STARS = [1700, 2900, 3900, 5e3]), (ProgressBar.PERCENT_PER_STARS = [0.3, 0.6, 0.9]), (ProgressBar.BAR_H = 341);
class SoundButton2 extends Button {
    constructor(e, t, s, a, i, n) {
        super(e, s, a, i, null, null, n, n, n, n), (this.typeB = t), (this.isOn = SaveGame.getInstance().music), (this.elements = []), this.createElements(), this.setVolume(), this.addShine(70, 70, 84);
    }
    createElements() {
        let e = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_SND_OFF], NeededImages.SCREEN_BTN_SND_OFF);
        e.anchor.set(0.5),
            (e.visible = !1),
            this.addChildAt(e, 0),
            this.elements.push(e),
            (e = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_SND_ON], NeededImages.SCREEN_BTN_SND_ON)).anchor.set(0.5),
            (e.visible = !1),
            this.addChildAt(e, 1),
            this.elements.push(e);
    }
    toggleMusic() {
        MahjongDynasty.SoundManager.getInstance().toggleMusic(), MahjongDynasty.SoundManager.getInstance().toggleSfx(), this.updateVolume();
    }
    setVolume() {
        (this.elements[0].visible = !this.isOn), (this.elements[1].visible = this.isOn);
    }
    updateVolume() {
        (this.isOn = SaveGame.getInstance().music), this.setVolume(), this.isOn && MahjongDynasty.SoundManager.getInstance().playMusic(Sounds.Music);
    }
    onBtnUp() {
        super.onBtnUp(), this.toggleMusic();
    }
}
!(function (o) {
    class h {
        constructor(e) {
            (this.num = e), (this.dynamicOffset = [[0, 0, 0]]), (this.x = 0), (this.y = 0), (this.spriteAvailable = !1);
        }
        draw(e, t) {
            var s = h.calcDynamicOffset(this, t.scrollProgress),
                e =
                    (this.spriteAvailable || ((this.mapBtn = new MapBtn(e, this.num, void 0, this)), (this.mapBtn.subMap = t), e.world.addChild(this.mapBtn), (o.Map.mapBtns[this.num - 1] = this.mapBtn), (this.spriteAvailable = !0)),
                    this.mapBtn.anchor.set(0.5, 0.5),
                    o.Map.instance.scaleMin),
                a = o.Map.instance.scaleMax,
                i = Math.min(100, Math.abs(100 - t.scrollProgress)),
                a = t.calculatedX + (s[1] + this.x) * (i = ((100 - i) / 100) * (a - e) + e),
                e = t.calculatedY + (s[2] + this.y) * i;
            let n = 0.8;
            ScaleManager.isPortrait() && (n = 0.95), (this.mapBtn.scale.x = i * n), (this.mapBtn.scale.y = i * n), (this.mapBtn.x = a), (this.mapBtn.y = e);
        }
        static calcDynamicOffset(t, s) {
            if (s <= 0) return t.dynamicOffset[0];
            if (100 <= s) return t.dynamicOffset[t.dynamicOffset.length - 1];
            var a,
                i,
                n,
                o = [s, 0, 0];
            if (1 < t.dynamicOffset.length)
                for (let e = 0; e < t.dynamicOffset.length - 1; e++)
                    t.dynamicOffset[e][0] <= s &&
                        t.dynamicOffset[e + 1][0] > s &&
                        ((a = t.dynamicOffset[e]), (i = t.dynamicOffset[e + 1]), (n = (s - a[0]) / (i[0] - a[0])), (o[1] = a[1] + n * (i[1] - a[1])), (o[2] = a[2] + n * (i[2] - a[2])));
            return o;
        }
        static fromObject(e) {
            var t = new h(e.num);
            return (t.x = e.x), (t.y = e.y), (t.dynamicOffset = e.dynamicOffset), t;
        }
        shutdown() {
            (this.dynamicOffset = null), this.mapBtn.shutdown();
        }
    }
    o.SubButton = h;
})((MahjongDynasty = MahjongDynasty || {})),
    (function (n) {
        function o(e) {
            return e.split(".")[0].split("/")[2].toLowerCase();
        }
        class h {
            constructor() {
                (this.dynamicOffset = [[0, 0, 0]]), (this.x = 0), (this.y = 0), (this.spriteAvailable = !1);
            }
            draw(e, t) {
                var s = h.calcDynamicOffset(this, t.scrollProgress),
                    e =
                        (this.spriteAvailable ||
                            ((this.sprite = e.add.sprite(-1e3, -1e3)),
                            (this.sprite2 = e.make.sprite(0, 0, NeededAtlases.atlasMap[o(this.texture)], o(this.texture))),
                            (this.spriteAvailable = !0),
                            (this.sprite.visible = t.isVisible),
                            this.sprite.addChild(this.sprite2)),
                        this.sprite2.anchor.set(this.anchorX, this.anchorY),
                        n.Map.instance.scaleMin),
                    a = n.Map.instance.scaleMax,
                    i = Math.min(100, Math.abs(100 - t.scrollProgress)),
                    a = t.calculatedX + (s[1] + this.x) * (i = ((100 - i) / 100) * (a - e) + e),
                    e = t.calculatedY + (s[2] + this.y) * i;
                (this.sprite.scale.x = i), (this.sprite.scale.y = i), (this.sprite.x = a), (this.sprite.y = e);
            }
            static calcDynamicOffset(t, s) {
                if (s <= 0) return t.dynamicOffset[0];
                if (100 <= s) return t.dynamicOffset[t.dynamicOffset.length - 1];
                var a,
                    i,
                    n,
                    o = [s, 0, 0];
                if (1 < t.dynamicOffset.length)
                    for (let e = 0; e < t.dynamicOffset.length - 1; e++)
                        t.dynamicOffset[e][0] <= s &&
                            t.dynamicOffset[e + 1][0] > s &&
                            ((a = t.dynamicOffset[e]), (i = t.dynamicOffset[e + 1]), (n = (s - a[0]) / (i[0] - a[0])), (o[1] = a[1] + n * (i[1] - a[1])), (o[2] = a[2] + n * (i[2] - a[2])));
                return o;
            }
            static fromObject(e) {
                var t = new h();
                return (t.texture = e.texture), (t.x = e.x), (t.y = e.y), (t.dynamicOffset = e.dynamicOffset), (t.anchorX = e.anchorX || 0.5), (t.anchorY = e.anchorY || 0.5), (t.id = e.id || ""), t;
            }
            shutdown() {
                (this.dynamicOffset = null), this.sprite.destroy(!0), this.sprite2.destroy(!0);
            }
        }
        n.SubElement = h;
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (a) {
        a.SubMap = class e {
            constructor() {
                (this.subElements = []),
                    (this.subElements2 = []),
                    (this.subButtons = []),
                    (this.x = 0),
                    (this.y = 0),
                    (this.generatedX = 0),
                    (this.generatedY = 0),
                    (this.height = 100),
                    (this.calculatedX = 0),
                    (this.calculatedY = 0),
                    (this.isVisible = !0);
            }
            static fromObject(t) {
                var s = new e();
                s.height = t.height;
                for (let e = 0; e < t.subElements.length; e++) s.subElements.push(a.SubElement.fromObject(t.subElements[e]));
                if (((s.dynamicOffset = t.dynamicOffset), t.subButtons)) for (let e = 0; e < t.subButtons.length; e++) s.subButtons.push(a.SubButton.fromObject(t.subButtons[e]));
                if (t.subElements2) for (let e = 0; e < t.subElements2.length; e++) s.subElements2.push(a.SubElement.fromObject(t.subElements2[e]));
                return s;
            }
            getTextureList() {
                var t = [];
                for (let e = 0; e < this.subElements.length; e++) t.push(this.subElements[e].texture);
                for (let e = 0; e < this.subElements2.length; e++) t.push(this.subElements2[e].texture);
                return t;
            }
            draw(t) {
                this.calcScrollProgress(), void 0 !== this.scrollProgress && (this.scrollProgress < -40 || 140 < this.scrollProgress) ? this.switchVisible(!1) : this.switchVisible(!0);
                var e = a.SubElement.calcDynamicOffset(this, this.scrollProgress);
                (this.calculatedX = t.world.width / 2 + e[1] + this.x), (this.calculatedY = e[2] + this.y + (this.generatedY - a.Map.instance.scrollOffset));
                for (let e = 0; e < this.subElements.length; e++) this.subElements[e].draw(t, this);
                if (this.isVisible || t) for (let e = 0; e < this.subButtons.length; e++) this.subButtons[e].draw(t, this);
                for (let e = 0; e < this.subElements2.length; e++) this.subElements2[e].draw(t, this);
            }
            calcScrollProgress() {
                var e = a.Map.height + a.Map.instance.scrollOffset + this.height / 2,
                    t = a.Map.height + a.Map.instance.scrollOffset - a.Map.height - this.height / 2;
                this.scrollProgress = (100 * (this.generatedY - t)) / (e - t);
            }
            switchVisible(t) {
                if (this.isVisible !== t) {
                    this.isVisible = t;
                    for (let e = 0; e < this.subElements.length; e++) this.subElements[e].sprite && (this.subElements[e].sprite.visible = t);
                    for (let e = 0; e < this.subElements2.length; e++) this.subElements2[e].sprite && (this.subElements2[e].sprite.visible = t);
                    for (let e = 0; e < this.subButtons.length; e++) this.subButtons[e] && this.subButtons[e].mapBtn && (this.subButtons[e].mapBtn.visible = t);
                }
            }
            shutdown() {
                for (let e = 0; e < this.subElements.length; e++) this.subElements[e].shutdown();
                for (let e = 0; e < this.subElements2.length; e++) this.subElements2[e].shutdown();
                for (let e = 0; e < this.subButtons.length; e++) this.subButtons[e].shutdown();
                this.dynamicOffset = null;
            }
        };
    })((MahjongDynasty = MahjongDynasty || {}));
class Tile extends Phaser.Sprite {
    constructor(e, t) {
        super(e, 0, 0, NeededAtlases.atlasMap[NeededImages.TILE_FON], NeededImages.TILE_FON),
            (this.useTileShine = !1),
            (this.name = t),
            (this.currentSpriteType = TileSpriteType.Simple),
            this.scale.set(Tile.SCALE),
            this.anchor.set(0.5, 0.5),
            (this.picture = this.game.make.sprite(Tile.X_CORRECTION / 2, Tile.Y_CORRECTION / 2, NeededAtlases.atlasMap[0], 0)),
            this.picture.anchor.set(0.5),
            (this.isMoving = !1),
            this.addChild(this.picture),
            this.useTileShine && ((this.tileShine = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.TILE_SHINE], NeededImages.TILE_SHINE)), this.tileShine.anchor.set(0.5), this.addChild(this.tileShine)),
            (this.dark = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.TILE_DARK], NeededImages.TILE_DARK)),
            this.dark.anchor.set(0.5, 0.5),
            (this.select = this.game.make.sprite(-6, -11, Atlases.Fun, "selected_tile.png")),
            this.select.anchor.set(0.5, 0.5),
            this.select.scale.set(Tile.NEW_TILE_SCALEX, Tile.NEW_TILE_SCALEY),
            (this.light = this.game.make.sprite(0, 0, Atlases.Fun, "select_effect0001.png")),
            this.light.anchor.set(0.5, 0.5),
            this.light.animations.add("anim", Utils.getAnimationString(14, "select_effect"), 30, !0),
            (this.shine = this.game.make.sprite(-5, -10, Atlases.Fun, "shine0.png")),
            this.shine.anchor.set(0.5, 0.5),
            this.shine.scale.set(1.05 * Tile.NEW_TILE_SCALEX, 1.02 * Tile.NEW_TILE_SCALEY),
            this.shine.animations.add("anim", Utils.getAnimation(7, "shine", 0), 15, !1).onComplete.add(() => {
                this.shine.visible = !1;
            }, this),
            (this.shine.visible = !1),
            (this.shinetimer = this.game.time.create());
    }
    hintShine() {
        (this.shine.visible = !0),
            this.shine.animations.play("anim"),
            this.shinetimer.loop(
                2e3,
                () => {
                    (this.shine.visible = !0), this.shine.animations.play("anim");
                },
                this
            ),
            this.shinetimer.start(),
            this.addChild(this.shine);
    }
    stopHintShine() {
        this.shinetimer.running && this.shinetimer.stop(!0), this.shine.animations.getAnimation("anim").isFinished && (this.shine.visible = !1), this.contains(this.shine) && this.removeChild(this.shine);
    }
    addToScreen(e) {
        (this.inputEnabled = !0), (this.isDeactivated = !1), e.addChild(this);
    }
    coordinateToCell(e) {
        (this.inX = e.inX), (this.inY = e.inY), (this.inZ = e.inZ);
        e = this.getPos(e);
        (this.x = e.inX), (this.y = e.inY), (this.sortBy = e.inZ);
    }
    moveTo(e, t) {
        t ? this.coordinateToCell(e) : ((this.inX = e.inX), (this.inY = e.inY), (this.inZ = e.inZ), (t = this.getPos(e)), this.game.add.tween(this).to({ x: t.inX, y: t.inY, sortBy: t.inZ }, 500, Phaser.Easing.Exponential.In, !0));
    }
    getPos(e) {
        return new Vector((e.inX * Tile.TILE_WIDTH) / 2 + e.inZ * Tile.X_CORRECTION, (e.inY * Tile.TILE_HEIGHT) / 2 + e.inZ * Tile.Y_CORRECTION, 1e3 * e.inZ + e.inX + e.inY);
    }
    setTileType(e) {
        (this.tileType = e), this.picture.key !== NeededAtlases.atlasMap[e] && this.picture.loadTexture(NeededAtlases.atlasMap[e]), (this.picture.frameName = "" + e);
    }
    startShowAnimate(e = 200) {
        this.game.add.tween(this.scale).to({ y: Tile.SCALE, x: Tile.SCALE }, 600, Phaser.Easing.Bounce.Out, !0, (this.inZ + 1) * e + 400 * Math.random(), 0, !1);
    }
    setPause(e) {
        this.picture.visible = !e;
    }
    changeSpriteColor(e) {
        if (e !== this.currentSpriteType) {
            switch ((this.currentSpriteType, TileSpriteType.Dark, this.currentSpriteType === TileSpriteType.Hightlight && this.removeSelect(), e)) {
                case TileSpriteType.Simple:
                case TileSpriteType.Dark:
                    break;
                case TileSpriteType.Hightlight:
                    this.addChild(this.light), this.addChild(this.select), this.light.animations.play("anim");
            }
            this.currentSpriteType = e;
        }
    }
    playLight() {
        this.addChild(this.light), this.light.animations.play("anim");
    }
    removeSelect() {
        this.removeChild(this.light), this.removeChild(this.select);
    }
    setDistinguish() {
        this.addChild(this.select);
    }
    deactivate() {
        return this.stopHintShine(), this.resetDark(), (this.inX = this.inY = this.inZ = -1), (this.currentSpriteType = TileSpriteType.Simple), (this.isDeactivated = !0), this;
    }
    isSameType(e) {
        return e === this.tileType;
    }
    setDark() {
        this.addChild(this.dark);
    }
    resetDark() {
        this.removeChild(this.dark);
    }
}
(Tile.SCALE = 1),
    (Tile.TILE_WIDTH = 116 * Tile.SCALE),
    (Tile.TILE_HEIGHT = 158 * Tile.SCALE),
    (Tile.X_CORRECTION = -12),
    (Tile.Y_CORRECTION = -20),
    (Tile.NEW_TILE_SCALEX = 116 / 105),
    (Tile.NEW_TILE_SCALEY = 158 / 138),
    (function (e) {
        (e[(e.Simple = 0)] = "Simple"), (e[(e.Dark = 1)] = "Dark"), (e[(e.Hightlight = 2)] = "Hightlight");
    })((TileSpriteType = TileSpriteType || {})),
    (function (e) {
        class i {
            constructor(e) {
                (this.activeTweensNums = []),
                    (this.tweens = []),
                    (this.anims = []),
                    (this.emits = []),
                    (this.game = e),
                    i.templeMask ||
                        ((i.templeMask = this.game.make.graphics(0, 0)),
                        i.templeMask.beginFill(16777215),
                        (e = 220),
                        i.templeMask.drawPolygon([new Phaser.Point(-70, e), new Phaser.Point(70, -e), new Phaser.Point(90, -e), new Phaser.Point(-50, e)]),
                        i.templeMask.drawPolygon([new Phaser.Point(-140, e), new Phaser.Point(0, -e), new Phaser.Point(20, -e), new Phaser.Point(-120, e)]));
            }
            checkTween(e, t, s) {
                void 0 !== t &&
                    (-1 !== this.activeTweensNums.indexOf(e) && (t > i.SCROLL_MAX || t < i.SCROLL_MIN) ? this.stopTweens(e) : -1 === this.activeTweensNums.indexOf(e) && t >= i.SCROLL_MIN && t <= i.SCROLL_MAX && this.startTweens(e, s));
            }
            startTweens(t, e) {
                if (null == this.tweens[t]) this.addTweens(t, e);
                else {
                    for (let e = 0; e < this.tweens[t].length; e++) this.tweens[t][e].resume();
                    for (let e = 0; e < this.anims[t].length; e++) this.anims[t][e].play();
                    for (let e = 0; e < this.emits[t].length; e++) (this.emits[t][e].on = !0), (this.emits[t][e].visible = !0);
                }
                this.activeTweensNums.push(t);
            }
            stopTweens(t) {
                if (null != this.tweens[t]) {
                    for (let e = 0; e < this.tweens[t].length; e++) this.tweens[t][e].pause();
                    for (let e = 0; e < this.anims[t].length; e++) this.anims[t][e].stop();
                    for (let e = 0; e < this.emits[t].length; e++) (this.emits[t][e].on = !1), (this.emits[t][e].visible = !1);
                }
                this.activeTweensNums.splice(this.activeTweensNums.indexOf(t), 1);
            }
            addTweens(e, t) {
                switch (((this.tweens[e] = []), (this.anims[e] = []), (this.emits[e] = []), e)) {
                    case 0:
                        this.addTweens0(t, e);
                        break;
                    case 1:
                        this.addTweens1(t, e);
                        break;
                    case 2:
                        this.addTweens2(t, e);
                        break;
                    case 3:
                        this.addTweens3(t, e);
                        break;
                    case 4:
                        this.addTweens4(t, e);
                        break;
                    case 5:
                        this.addTweens5(t, e);
                        break;
                    case 6:
                        this.addTweens6(t, e);
                        break;
                    case 7:
                        this.addTweens7(t, e);
                        break;
                    case 8:
                        this.addTweens8(t, e);
                        break;
                    case 9:
                        this.addTweens9(t, e);
                }
            }
            getObject(t, s) {
                for (let e = 0; e < t.subElements.length; e++) if (-1 !== t.subElements[e].id.indexOf(s) || -1 !== t.subElements[e].texture.indexOf(s)) return t.subElements[e].sprite2;
                for (let e = 0; e < t.subElements2.length; e++) if (-1 !== t.subElements2[e].id.indexOf(s) || -1 !== t.subElements2[e].texture.indexOf(s)) return t.subElements2[e].sprite2;
                return null;
            }
            getObject1(t, s) {
                for (let e = 0; e < t.subElements.length; e++) if (-1 !== t.subElements[e].id.indexOf(s) || -1 !== t.subElements[e].texture.indexOf(s)) return t.subElements[e].sprite;
                for (let e = 0; e < t.subElements2.length; e++) if (-1 !== t.subElements2[e].id.indexOf(s) || -1 !== t.subElements2[e].texture.indexOf(s)) return t.subElements2[e].sprite;
                return null;
            }
            shutdown() {
                for (let t = 0; t < this.tweens.length; t++)
                    if (null != this.tweens[t]) {
                        for (let e = 0; e < this.tweens[t].length; e++) this.tweens[t][e].stop(), (this.tweens[t][e] = null);
                        this.tweens[t] = null;
                    }
                (this.tweens = []), (this.activeTweensNums = []);
                for (let t = 0; t < this.anims.length; t++)
                    if (null != this.anims[t]) {
                        for (let e = 0; e < this.anims[t].length; e++) this.anims[t][e].stop(), this.anims[t][e].update(), this.anims[t][e].destroy(), (this.anims[t][e] = null);
                        this.anims[t] = null;
                    }
                this.anims = [];
                for (let t = 0; t < this.emits.length; t++)
                    if (null != this.emits[t]) {
                        for (let e = 0; e < this.emits[t].length; e++) (this.emits[t][e].on = !1), this.emits[t][e].kill(), this.emits[t][e].destroy(!0);
                        this.emits[t] = null;
                    }
                this.emits = [];
            }
            addTweens0(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_01_05_TREE),
                    a = this.game.add.tween(s);
                (s.angle = -1),
                    a.to({ angle: 1 }, 2e3).to({ angle: -1 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_03_P1_TREE2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.2),
                    a.to({ angle: 1.2 }, 3e3).to({ angle: -1.2 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_03_P1_TREE3)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.4),
                    a.to({ angle: -1.4 }, 3500).to({ angle: 1.4 }, 3500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_03_P1_TREE4)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1),
                    a.to({ angle: 1 }, 3e3).to({ angle: -1 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_03_P1_BOAT)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -0.75),
                    a.to({ angle: 0.75 }, 1500).to({ angle: -0.75 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_02_P2_BUSH)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -0.75),
                    a.to({ angle: 0.75 }, 2e3).to({ angle: -0.75 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                var i = 1500;
                (s = this.getObject(e, "light1")),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0.2),
                    a.to({ alpha: 0.9 }, i).delay(750).to({ alpha: 0.2 }, i).delay(i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (i = 2500),
                    (s = this.getObject(e, "light2")),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0.2),
                    a.to({ alpha: 0.9 }, 5e3).delay(1250).to({ alpha: 0.2 }, i).delay(0).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (i = 3500),
                    (s = this.getObject(e, "light3")),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0.2),
                    a.to({ alpha: 0.9 }, i).delay(1750).to({ alpha: 0.2 }, 7e3).delay(0).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_BIRD11)),
                    (a = this.game.add.tween(s));
                (s.x = -700),
                    (s.y = -100),
                    a.to({ x: 700, y: 30 }, 16e3).delay(1200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_01_BIRD21)),
                    (a = this.game.add.tween(s)),
                    (s.x = 700),
                    (s.y = 140),
                    a.to({ x: -700, y: -20 }, 2e4).delay(1200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                let n = (s = this.getObject(e, NeededImages.MAHJONG_01_BIRD11)).animations.add("anim", [NeededImages.MAHJONG_01_BIRD11, NeededImages.MAHJONG_01_BIRD12], 10, !0);
                n.play(), this.anims[t].push(n), (s = this.getObject(e, NeededImages.MAHJONG_01_BIRD21)), (n = s.animations.add("anim", [NeededImages.MAHJONG_01_BIRD21, NeededImages.MAHJONG_01_BIRD22], 8, !0)).play(), this.anims[t].push(n);
            }
            addTweens1(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_02_02_P2_TREE1),
                    a = this.game.add.tween(s);
                (s.angle = -0.8),
                    a.to({ angle: 0.8 }, 2e3).to({ angle: -0.8 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_02_P2_TREE2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.6),
                    a.to({ angle: -1.6 }, 1500).to({ angle: 1.6 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_02_P2_TREE3)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 0.7),
                    a.to({ angle: -0.7 }, 2500).to({ angle: 0.7 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_02_P2_TREE4)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.5),
                    a.to({ angle: -1.5 }, 2e3).to({ angle: 1.5 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_03_P1_TREE1)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 0.9),
                    a.to({ angle: -0.9 }, 2e3).to({ angle: 0.9 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_03_P1_TREE2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1),
                    a.to({ angle: -1 }, 2500).to({ angle: 1 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_03_P1_TREE3)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 0.7),
                    a.to({ angle: -0.7 }, 2500).to({ angle: 0.7 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_03_P1_TREE4)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.5),
                    a.to({ angle: 1.5 }, 1500).to({ angle: -1.5 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_BIRD11)),
                    (a = this.game.add.tween(s));
                (s.x = -700),
                    (s.y = 90),
                    a.to({ x: 700, y: -10 }, 16e3).delay(1200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_BIRD21)),
                    (a = this.game.add.tween(s)),
                    (s.x = 700),
                    (s.y = -60),
                    a.to({ x: -700, y: 30 }, 14e3).delay(800).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                let i = (s = this.getObject(e, NeededImages.MAHJONG_02_BIRD11)).animations.add("anim", [NeededImages.MAHJONG_02_BIRD11, NeededImages.MAHJONG_02_BIRD12, NeededImages.MAHJONG_02_BIRD13], 15, !0);
                i.play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, NeededImages.MAHJONG_02_BIRD21)),
                    (i = s.animations.add("anim", [NeededImages.MAHJONG_02_BIRD21, NeededImages.MAHJONG_02_BIRD22, NeededImages.MAHJONG_02_BIRD23], 18, !0)).play(),
                    this.anims[t].push(i);
            }
            addTweens2(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_03_05_BALLOON),
                    a = this.game.add.tween(s);
                a.to({ y: 20 }, 3e3).to({ y: 0 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_03_07_DRAGON_GREEN)),
                    (a = this.game.add.tween(s)).to({ y: 10 }, 3500).to({ y: 0 }, 3500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_03_06_DRAGON_BLUE)),
                    (a = this.game.add.tween(s)).to({ y: 7 }, 3200).to({ y: 0 }, 3200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "firework1"));
                var i = FireParticle.maxParticles;
                let n = this.game.add.emitter(0, 0, i);
                s.addChild(n),
                    (n.particleClass = FireParticle),
                    n.makeParticles([NeededAtlases.atlasMap[NeededImages.MAHJONG_04_08_LIGHT]], [NeededImages.MAHJONG_04_08_LIGHT]),
                    (n.gravity = 250),
                    n.setAlpha(1, 0, 1e3, Phaser.Easing.Cubic.In),
                    n.setSize(1, 1),
                    n.setXSpeed(-300, 300),
                    n.setYSpeed(-300, 300),
                    n.flow(1e3, 1500, i, -1),
                    this.emits[t].push(n),
                    (s = this.getObject(e, "firework2")),
                    (n = this.game.add.emitter(0, 0, i)),
                    s.addChild(n),
                    (n.particleClass = FireParticle),
                    n.makeParticles([NeededAtlases.atlasMap[NeededImages.MAHJONG_04_08_LIGHT]], [NeededImages.MAHJONG_04_08_LIGHT]),
                    (n.gravity = 250),
                    n.setAlpha(1, 0, 1e3, Phaser.Easing.Cubic.In),
                    n.setSize(1, 1),
                    n.setXSpeed(-300, 300),
                    n.setYSpeed(-300, 300),
                    n.flow(1e3, 2e3, i, -1),
                    this.emits[t].push(n),
                    (s = this.getObject(e, "firework3")),
                    (n = this.game.add.emitter(0, 0, i)),
                    s.addChild(n),
                    (n.particleClass = FireParticle),
                    n.makeParticles([NeededAtlases.atlasMap[NeededImages.MAHJONG_04_08_LIGHT]], [NeededImages.MAHJONG_04_08_LIGHT]),
                    (n.gravity = 250),
                    n.setAlpha(1, 0, 1e3, Phaser.Easing.Cubic.In),
                    n.setSize(1, 1),
                    n.setXSpeed(-300, 300),
                    n.setYSpeed(-300, 300),
                    n.flow(1e3, 2500, i, -1),
                    this.emits[t].push(n);
            }
            addTweens3(e, t) {
                let s = this.getObject(e, "light41"),
                    a = this.game.add.tween(s);
                (s.alpha = 0),
                    a.to({ alpha: 1 }, 250).to({ alpha: 0 }, 250).delay(1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "light42")),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.delay(1200).to({ alpha: 1 }, 400).to({ alpha: 0 }, 400).delay(400).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_04_02_BOAT1)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.6),
                    a.to({ angle: 1.6 }, 2500).to({ angle: -1.6 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_04_05_BOAT2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.2),
                    a.to({ angle: -1.2 }, 3e3).to({ angle: 1.2 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_04_06_BOAT3)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.4),
                    a.to({ angle: 1.4 }, 2800).to({ angle: -1.4 }, 2800).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_04_07_BOAT4)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.6),
                    a.to({ angle: -1.6 }, 2400).to({ angle: 1.6 }, 2400).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_04_BIRD11));
                (a = this.game.add.tween(s)).to({ x: -40, y: -20 }, 2500).to({ x: 0, y: 0 }, 7500).repeatAll(-1), a.start(), this.tweens[t].push(a);
                let i = (s = this.getObject(e, NeededImages.MAHJONG_04_04_FLAG)).animations.add("anim", [NeededImages.MAHJONG_04_04_FLAG, NeededImages.MAHJONG_04_04_FLAG2, NeededImages.MAHJONG_04_04_FLAG3], 6, !0);
                i.play(), this.anims[t].push(i), (s = this.getObject(e, NeededImages.MAHJONG_04_BIRD11)), (i = s.animations.add("anim", [NeededImages.MAHJONG_04_BIRD11, NeededImages.MAHJONG_04_BIRD12], 2, !0)).play(), this.anims[t].push(i);
            }
            addTweens4(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_05_LEAFS1),
                    a = this.game.add.tween(s);
                var i = 1400;
                (s.x = i),
                    a.to({ x: -i, y: -60, angle: 50 }, 35e3).delay(3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_05_LEAFS2)),
                    (a = this.game.add.tween(s)),
                    (s.x = i),
                    a.to({ x: -i, y: 60, angle: -50 }, 45e3).delay(5e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_05_LEAFS3)),
                    (a = this.game.add.tween(s)),
                    (s.x = i),
                    a.to({ x: -i, y: -100, angle: 50 }, 55e3).delay(7e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_05_BIRD11)),
                    (a = this.game.add.tween(s)),
                    (s.x = 700),
                    (s.y = 130),
                    a.to({ x: -700, y: -60 }, 2e4).delay(1200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "smoke00")),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({ alpha: 1, y: -40 }, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "smoke01")),
                    (a = this.game.add.tween(s)).to({ y: -40 }, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "smoke02")),
                    (a = this.game.add.tween(s)).to({ y: -35 }, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "smoke03")),
                    (a = this.game.add.tween(s)).to({ y: -40 }, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, "smoke04")),
                    (a = this.game.add.tween(s)).to({ y: -40, alpha: 0 }, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                let n = (s = this.getObject(e, NeededImages.MAHJONG_05_FLAG11)).animations.add("anim", [NeededImages.MAHJONG_05_FLAG11, NeededImages.MAHJONG_05_FLAG12, NeededImages.MAHJONG_05_FLAG13], 4, !0);
                n.play(),
                    this.anims[t].push(n),
                    (s = this.getObject(e, NeededImages.MAHJONG_05_FLAG21)),
                    (n = s.animations.add("anim", [NeededImages.MAHJONG_05_FLAG21, NeededImages.MAHJONG_05_FLAG22, NeededImages.MAHJONG_05_FLAG23], 3, !0)).play(),
                    this.anims[t].push(n),
                    (s = this.getObject(e, NeededImages.MAHJONG_05_BIRD11)),
                    (n = s.animations.add("anim", [NeededImages.MAHJONG_05_BIRD11, NeededImages.MAHJONG_05_BIRD12, NeededImages.MAHJONG_05_BIRD13], 5, !0)).play(),
                    this.anims[t].push(n);
            }
            addTweens5(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_06_01_P3_WIN),
                    a = this.game.add.tween(s);
                var i = 200;
                (s.alpha = 0),
                    a.to({ alpha: 1 }, i, Phaser.Easing.Linear.None, !1, 2500).to({ alpha: 0 }, i, Phaser.Easing.Linear.None, !1, 5e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_01_P3_ADV)),
                    (a = this.game.add.tween(s)).delay(3e3).to({ alpha: 0 }, i).delay(1500).to({ alpha: 1 }, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_02_P2_WIN1)),
                    (a = this.game.add.tween(s)).to({ alpha: 1 }, i, Phaser.Easing.Linear.None, !1, 1e3).to({ alpha: 0 }, i, Phaser.Easing.Linear.None, !1, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_02_P2_WIN2)),
                    (a = this.game.add.tween(s)).to({ alpha: 1 }, i, Phaser.Easing.Linear.None, !1, 1500).to({ alpha: 0 }, i, Phaser.Easing.Linear.None, !1, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_02_P2_ADV1)),
                    (a = this.game.add.tween(s)).delay(1750).to({ alpha: 0 }, i).delay(1750).to({ alpha: 1 }, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_02_P2_ADV2)),
                    (a = this.game.add.tween(s)).delay(1250).to({ alpha: 0 }, i).delay(1250).to({ alpha: 1 }, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (i = 250),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_03_P1_WIN1)),
                    (a = this.game.add.tween(s)).to({ alpha: 1 }, i, Phaser.Easing.Linear.None, !1, 1200).to({ alpha: 0 }, i, Phaser.Easing.Linear.None, !1, 2400).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_03_P1_WIN2)),
                    (a = this.game.add.tween(s)).to({ alpha: 1 }, i, Phaser.Easing.Linear.None, !1, 1600).to({ alpha: 0 }, i, Phaser.Easing.Linear.None, !1, 3200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_03_P1_ADV1)),
                    (a = this.game.add.tween(s)).delay(1300).to({ alpha: 0 }, i).delay(1300).to({ alpha: 1 }, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_06_03_P1_ADV2)),
                    (a = this.game.add.tween(s)).delay(1700).to({ alpha: 0 }, i).delay(1700).to({ alpha: 1 }, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
            }
            addTweens6(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_07_04_BOATS),
                    a = this.game.add.tween(s);
                a.to({ x: 1.5, y: 3 }, 3e3).to({ x: 0, y: 0 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD31)),
                    (a = this.game.add.tween(s)).to({ x: 3, y: -6 }, 3500).to({ x: 0, y: 0 }, 3500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD21)),
                    (a = this.game.add.tween(s)).to({ x: 4, y: -8 }, 2800).to({ x: 0, y: 0 }, 2800).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD11)),
                    (a = this.game.add.tween(s)).to({ x: -3, y: -6 }, 3200).to({ x: 0, y: 0 }, 3200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                let i = (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD31)).animations.add(
                    "anim",
                    [NeededImages.MAHJONG_07_03_BIRD31, NeededImages.MAHJONG_07_03_BIRD32, NeededImages.MAHJONG_07_03_BIRD33, NeededImages.MAHJONG_07_03_BIRD32],
                    3,
                    !0
                );
                i.play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD21)),
                    (i = s.animations.add("anim", [NeededImages.MAHJONG_07_03_BIRD21, NeededImages.MAHJONG_07_03_BIRD22, NeededImages.MAHJONG_07_03_BIRD23, NeededImages.MAHJONG_07_03_BIRD22], 4, !0)).play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, NeededImages.MAHJONG_07_03_BIRD11)),
                    (i = s.animations.add("anim", [NeededImages.MAHJONG_07_03_BIRD11, NeededImages.MAHJONG_07_03_BIRD12, NeededImages.MAHJONG_07_03_BIRD13, NeededImages.MAHJONG_07_03_BIRD12], 3, !0)).play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, "fish01")),
                    (i = s.animations.add(
                        "anim",
                        [
                            NeededImages.MAHJONG_07_03_FISH1,
                            NeededImages.MAHJONG_07_03_FISH2,
                            NeededImages.MAHJONG_07_03_FISH3,
                            NeededImages.MAHJONG_07_03_FISH4,
                            NeededImages.MAHJONG_07_03_FISH5,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                        ],
                        5,
                        !0
                    )).play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, "fish02")),
                    (i = s.animations.add(
                        "anim",
                        [
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.MAHJONG_07_03_FISH1,
                            NeededImages.MAHJONG_07_03_FISH2,
                            NeededImages.MAHJONG_07_03_FISH3,
                            NeededImages.MAHJONG_07_03_FISH4,
                            NeededImages.MAHJONG_07_03_FISH5,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                        ],
                        5,
                        !0
                    )).play(),
                    this.anims[t].push(i),
                    (s = this.getObject(e, "fish03")),
                    (i = s.animations.add(
                        "anim",
                        [
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.EMPTY,
                            NeededImages.MAHJONG_07_03_FISH1,
                            NeededImages.MAHJONG_07_03_FISH2,
                            NeededImages.MAHJONG_07_03_FISH3,
                            NeededImages.MAHJONG_07_03_FISH4,
                            NeededImages.MAHJONG_07_03_FISH5,
                        ],
                        5,
                        !0
                    )).play(),
                    this.anims[t].push(i);
            }
            addTweens7(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_08_03_P1_TREE1),
                    a = this.game.add.tween(s);
                (s.angle = -0.8),
                    a.to({ angle: 0.8 }, 2e3).to({ angle: -0.8 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_03_P1_TREE2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.6),
                    a.to({ angle: -1.6 }, 1500).to({ angle: 1.6 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_03_P1_TREE3)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -0.9),
                    a.to({ angle: 0.9 }, 2300).to({ angle: -0.9 }, 2300).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_TREE1)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 1.2),
                    a.to({ angle: -1.2 }, 1700).to({ angle: 1.2 }, 1700).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_TREE2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.1),
                    a.to({ angle: 1.1 }, 1900).to({ angle: -1.1 }, 1900).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE1)), (a = this.game.add.tween(s)), (i = 2100);
                var i,
                    n = 300;
                (s.alpha = 0),
                    a.to({}, n).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, i).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE2)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 600).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 1800).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE3)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 900).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE4)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 1200).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 1200).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE5)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 1500).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 900).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE6)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 1800).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 600).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_02_P2_PLATE7)),
                    (a = this.game.add.tween(s)),
                    (s.alpha = 0),
                    a.to({}, 2100).to({ alpha: 1 }, n, Phaser.Easing.Linear.None, !1).to({ alpha: 0 }, n, Phaser.Easing.Linear.None, !1).to({}, 300).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_03_P1_MAN)),
                    (a = this.game.add.tween(s)).to({ x: 70, y: -16 }, 9e3).to({ angle: -30 }, 1e-4).to({ x: 0, y: 0 }, 9e3).to({ angle: 0 }, 1e-4).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (a = this.game.add.tween(s.scale)).to({}, 9e3).to({ x: -1, y: 1 }, 1e-4).to({}, 9e3).to({ x: 1, y: 1 }, 1e-4).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                (s = this.getObject(e, NeededImages.MAHJONG_08_BIRD11)),
                    (a = this.game.add.tween(s)).to({ x: 2, y: -4 }, 3500).to({ x: 0, y: 0 }, 3500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_08_BIRD21)),
                    (a = this.game.add.tween(s)).to({ x: -3, y: -6 }, 3e3).to({ x: 0, y: 0 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                let o = (s = this.getObject(e, NeededImages.MAHJONG_08_BIRD11)).animations.add("anim", [NeededImages.MAHJONG_08_BIRD11, NeededImages.MAHJONG_08_BIRD12], 1, !0);
                o.play(), this.anims[t].push(o), (s = this.getObject(e, NeededImages.MAHJONG_08_BIRD21)), (o = s.animations.add("anim", [NeededImages.MAHJONG_08_BIRD21, NeededImages.MAHJONG_08_BIRD22], 2, !0)).play(), this.anims[t].push(o);
            }
            addTweens8(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_09_02_P2_BOATS),
                    a = this.game.add.tween(s);
                a.to({ x: -8, y: 4 }, 3e3).to({ x: 0, y: 0 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_09_02_P2_STATUE)),
                    (a = this.game.add.tween(s)).to({ y: -10 }, 4e3).to({ y: 0 }, 4e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                ((s = this.getObject(e, "torch1")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: -5, y: 10 }, 3e3).to({ x: 5, y: 10, alpha: 0 }, 3e3).to({ x: 0, y: 0, alpha: 0.5 }, 3e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch2")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: 10, y: 0 }, 2500).to({ x: 10, y: -5, alpha: 0 }, 2500).to({ x: 0, y: 0, alpha: 0.5 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch3")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: 10, y: 0 }, 2e3).to({ x: 10, y: -5, alpha: 0 }, 2e3).to({ x: 0, y: 0, alpha: 0.5 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch4")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: 10, y: 0 }, 2e3).to({ x: 10, y: -5, alpha: 0 }, 2e3).to({ x: 0, y: 0, alpha: 0.5 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch5")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: 10, y: 0 }, 1500).to({ x: 10, y: -5, alpha: 0 }, 1500).to({ x: 0, y: 0, alpha: 0.5 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch6")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: 10, y: 0 }, 2500).to({ x: 10, y: -5, alpha: 0 }, 2500).to({ x: 0, y: 0, alpha: 0.5 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    ((s = this.getObject(e, "torch7")).alpha = 0.5),
                    (a = this.game.add.tween(s)).to({ x: -5, y: 10 }, 2500).to({ x: 10, y: 10, alpha: 0 }, 2500).to({ x: 0, y: 0, alpha: 0.5 }, 2500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_09_03_P1_TEMPLE)).parent.addChild(i.templeMask),
                    (s.mask = i.templeMask),
                    (i.templeMask.x = -250),
                    (a = this.game.add.tween(i.templeMask)).to({ x: 550 }, 2500, Phaser.Easing.Linear.None, !1, 1e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
            }
            addTweens9(e, t) {
                let s = this.getObject(e, NeededImages.MAHJONG_10_11_ELHEAD1),
                    a = this.game.add.tween(s);
                (s.angle = -3),
                    a.to({ angle: 3 }, 1500).to({ angle: -3 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_10_12_ELHEAD2)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -3),
                    a.to({ angle: 3 }, 1500).to({ angle: -3 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_10_08_STATUE_LHAND)),
                    (a = this.game.add.tween(s)),
                    (s.angle = 5),
                    a.to({ angle: -5 }, 2e3).to({ angle: 5 }, 2e3).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_10_09_STATUE_RHAND)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -5),
                    a.to({ angle: 5 }, 2300).to({ angle: -5 }, 2300).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a),
                    (s = this.getObject(e, NeededImages.MAHJONG_10_04_BOAT)),
                    (a = this.game.add.tween(s)),
                    (s.angle = -1.5),
                    a.to({ angle: 1.5 }, 1500).to({ angle: -1.5 }, 1500).repeatAll(-1),
                    a.start(),
                    this.tweens[t].push(a);
                ((s = this.getObject(e, NeededImages.MAHJONG_10_02_LIGHT)).alpha = 0.8), (a = this.game.add.tween(s)).to({ alpha: 0 }, 1500).to({}, 750).to({ alpha: 0.8 }, 1500).to({}, 1500).repeatAll(-1), a.start(), this.tweens[t].push(a);
            }
        }
        (i.SCROLL_MIN = -20), (i.SCROLL_MAX = 130), (e.Tweens = i);
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (e) {
        class t {
            constructor(e) {
                (this.game = e), (this.focused = !1);
            }
            static getInstance(e) {
                return t.instance || (t.instance = new t(e)), t.instance;
            }
            init() {
                (this.game.stage.disableVisibilityChange = !0),
                    (this.onPauseCallback = new Phaser.Signal()),
                    h5branding.Utils.isOnDevice() && (document.addEventListener("pause", () => this.onPause()), document.addEventListener("resume", () => this.onResume())),
                    this.game.onBlur.add(this.onBlur, this),
                    this.game.onFocus.add(this.onFocus, this),
                    this.game.onPause.add(this.onPause, this),
                    this.game.onResume.add(this.onResume, this);
            }
            onBlur() {
                (this.focused = !1), this.game.onPause.dispatch();
            }
            onFocus() {
                (this.focused = !0), e.AdHandler.getInstance().isAdPlaying() || this.game.onResume.dispatch();
            }
            onPause() {
                this.game.sound.setMute(), this.onPauseCallback && this.onPauseCallback.dispatch();
            }
            onResume() {
                this.game.sound.unsetMute();
            }
            pause() {
                this.game.onPause.dispatch();
            }
            resume() {
                this.hasFocus && this.game.onResume.dispatch();
            }
            get hasFocus() {
                return this.focused;
            }
        }
        e.PauseHandler = t;
    })((Fabrique = Fabrique || {}));
class ConfirmPopUp extends Phaser.Group {
    constructor(e) {
        super(e, null),
            (this.board = this.game.make.sprite(0, 0, Atlases.Fun, "interface_paused_bg.png")),
            this.addChild(this.board),
            this.board.anchor.set(0.5),
            (this.leftbtn = new Button(this.game, 2, this.board.height / 2, Atlases.Fun, null, this, "button_white.png", "button_white.png", "button_white_on_push.png", "button_white.png")),
            this.leftbtn.anchor.set(1),
            this.leftbtn.scale.set(0.91),
            this.board.addChild(this.leftbtn),
            (this.rightbtn = new Button(this.game, -2, this.board.height / 2, Atlases.Fun, null, this, "button_white.png", "button_white.png", "button_white_on_push.png", "button_white.png")),
            this.rightbtn.anchor.set(1, 1),
            this.rightbtn.scale.set(-0.91, 0.91),
            this.board.addChild(this.rightbtn);
        let t = this.game.add.bitmapText(0, -40, Fonts.OxygenWhiteShadow, "QUIT GAME?", 72);
        this.board.addChild(t),
            t.anchor.set(0.5),
            (t = this.game.add.bitmapText(-this.leftbtn.width / 2, -30, Fonts.OxygenRegularB, "YES", 72)),
            this.leftbtn.addChild(t),
            t.anchor.set(0.5),
            (t = this.game.add.bitmapText(this.rightbtn.width / 2, -30, Fonts.OxygenRegularB, "NO", 72)),
            this.rightbtn.addChild(t),
            t.scale.set(-1, 1),
            t.anchor.set(0.5),
            (this.leftbtn.inputEnabled = !1),
            (this.rightbtn.inputEnabled = !1);
    }
    rescale() {
        (this.x = this.game.width / 2), (this.y = this.game.height / 2);
    }
    showPopUp() {
        (this.leftbtn.inputEnabled = !0), (this.rightbtn.inputEnabled = !0), this.game.add.existing(this), (this.visible = !0);
    }
    closePopUp() {
        (this.visible = !1), (this.leftbtn.inputEnabled = !1), (this.rightbtn.inputEnabled = !1);
    }
}
class EndGamePopUp extends Phaser.Group {
    constructor(e, t, s) {
        super(e, null),
            (this.smallBtns = []),
            (this.mainBtns = []),
            (this.titles = []),
            (this.back = []),
            (this.stars = []),
            (this.board = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_LEVELCOMPLETE_FON], NeededImages.SCREEN_LEVELCOMPLETE_FON)),
            this.addChild(this.board),
            this.board.anchor.set(0.5);
        var e = Fabrique.LocalizationHandler.getInstance().getValue("completed"),
            a = 15 < e.length ? 34 : 40,
            e =
                ((this.boardText = new Phaser.Text(this.game, 0, -265, e, { font: a + "px Days", fill: "#372212" })),
                this.addChild(this.boardText),
                this.boardText.anchor.set(0.5),
                Fabrique.LocalizationHandler.getInstance().getValue("score")),
            a =
                ((this.scoreText = new Phaser.Text(this.game, 0, -70, e, { font: "26px Days", fill: "#b98d6e", stroke: "#532e1f", strokeThickness: 2 })),
                this.addChild(this.scoreText),
                this.scoreText.anchor.set(0.5),
                Fabrique.LocalizationHandler.getInstance().getValue("won"));
        (this.youwonText = new Phaser.Text(this.game, 0, this.scoreText.y + 125, a, { font: "26px Days", fill: "#b98d6e", stroke: "#532e1f", strokeThickness: 2 })), this.addChild(this.youwonText), this.youwonText.anchor.set(0.5);
        let i = -110;
        for (let e = 0; e < 3; ++e)
            (this.stars[e] = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_LEVELCOMPLETE_STAR_ON], NeededImages.SCREEN_LEVELCOMPLETE_STAR_ON)),
                (this.back[e] = this.game.make.sprite(i, -125, NeededAtlases.atlasMap[NeededImages.SCREEN_LEVELCOMPLETE_STAR_OFF], NeededImages.SCREEN_LEVELCOMPLETE_STAR_OFF)),
                this.back[e].anchor.set(0.5, 0.5),
                this.stars[e].anchor.set(0.5, 0.5),
                this.back[e].addChild(this.stars[e]),
                this.addChild(this.back[e]),
                (i += 110),
                this.stars[e].scale.set(0);
        (this.back[1].y -= 15),
            (this.nextBtn = new TextButtonSmall(this.game, 0, 225, NeededAtlases.atlasMap[NeededImages.GREEN_BUTTON_SMALL], null, this, NeededImages.GREEN_BUTTON_SMALL)),
            this.nextBtn.createText("continue", "#66983b"),
            this.nextBtn.anchor.set(0.5, 0.5),
            (this.nextBtn.inputEnabled = !1),
            this.nextBtn.setAnimation(),
            this.addChild(this.nextBtn),
            (this.toMenuBtn = new Button(
                this.game,
                -190,
                225,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_HOME],
                null,
                this,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME
            )),
            this.toMenuBtn.anchor.set(0.5, 0.5),
            (this.toMenuBtn.inputEnabled = !1),
            this.toMenuBtn.setAnimation(),
            this.addChild(this.toMenuBtn),
            (this.restartBtn = new Button(
                this.game,
                -this.toMenuBtn.x,
                this.toMenuBtn.y,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_RESTART],
                null,
                this,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART
            )),
            this.restartBtn.anchor.set(0.5, 0.5),
            (this.restartBtn.inputEnabled = !1),
            this.restartBtn.setAnimation(),
            this.addChild(this.restartBtn),
            (this.close = new Button(
                this.game,
                263,
                -253,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_CLOSE],
                null,
                this,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE
            )),
            this.close.anchor.set(0.5, 0.5),
            this.addChild(this.close),
            this.close.setAnimation(),
            (this.nextBtn.alpha = 0),
            (this.toMenuBtn.alpha = 0),
            (this.restartBtn.alpha = 0),
            (this.close.alpha = 0),
            (this.smallBtns = [this.toMenuBtn, this.restartBtn]),
            (this.mainBtns = [this.nextBtn]),
            (this.titles = [this.boardText, this.scoreText, this.youwonText]);
    }
    rescale() {
        (this.x = this.game.world.width / 2), (this.y = this.game.world.height / 2);
    }
    showPopUp(e, t, s, a, i) {
        (this.nextBtn.inputEnabled = !0),
            (this.toMenuBtn.inputEnabled = !0),
            (this.restartBtn.inputEnabled = !0),
            (this.close.inputEnabled = !0),
            this.game.add.existing(this),
            this.game.add.tween(this.close).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1);
        for (let e = (this.curStar = 0); e < a; ++e)
            this.game.add
                .tween(this.stars[e].scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Back.Out, !0, 900 + 350 * e, 0, !1)
                .onStart.addOnce(() => {
                    MahjongDynasty.SoundManager.getInstance().play(Sounds.Stars[e]);
                });
        t = this.game.add.bitmapText(0, -8, Fonts.EquinoxWhite, Math.round(e + t).toString(), 60);
        this.board.addChild(t),
            (t.align = "center"),
            t.anchor.set(0.5, 0.5),
            (t.alpha = 0),
            t.scale.set(0.1, 0.1),
            this.game.add.tween(t.scale).to({ x: 1, y: 1 }, 450, Phaser.Easing.Back.Out, !0, 750, 0, !1),
            this.game.add.tween(t).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 750, 0, !1),
            this.animateIt(),
            h5branding.AeriaIntegration.sendScoreEvent("ae-azer-338", e, () => {
                Fabrique.PauseHandler.getInstance().pause();
            });
    }
    animateIt() {
        for (let e = 0; e < this.smallBtns.length; e++) this.smallBtns[e].alpha = 0;
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++) this.titles[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++)
            this.titles[e].scale.set(1.2, 1.2),
                this.game.add.tween(this.titles[e].scale).to({ x: 1, y: 1 }, 450, Phaser.Easing.Back.Out, !0, 0, 0, !1),
                this.game.add.tween(this.titles[e]).to({ alpha: 1 }, 450, Phaser.Easing.Linear.None, !0, 0, 0, !1);
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].hideShine(), this.game.add.tween(this.mainBtns[e]).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 300, 0, !1);
        var t;
        for (let e = 0; e < this.smallBtns.length; e++) (t = this.smallBtns[e].y), (this.smallBtns[e].y = t + 100), this.game.add.tween(this.smallBtns[e]).to({ alpha: 1, y: t }, 300, Phaser.Easing.Quartic.Out, !0, 600, 0, !1);
    }
    setPowsBonus(t) {
        var s,
            a = [
                NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_HELP,
                NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_EYE,
                NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_SWORD,
                NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_SHUFFLE,
                NeededImages.SCREEN_LEVELCOMPLETE_POWERUP_UNDO,
            ],
            i = t.length,
            n = (104 * (i - 1)) / 2;
        for (let e = 0; e < i; ++e)
            (s = this.game.make.image(-n + 104 * e, 115, NeededAtlases.atlasMap[a[t[e]]], a[t[e]])).anchor.set(0.5),
                this.addChild(s),
                (s.alpha = 0),
                this.game.add.tween(s).to({ alpha: 1 }, 200, Phaser.Easing.Linear.None, !0, 1200 + 300 * e, 0, !1);
    }
}
class FailGamePopUp extends Phaser.Group {
    constructor(e) {
        super(e, null),
            (this.smallBtns = []),
            (this.mainBtns = []),
            (this.titles = []),
            (this.isFail = !1),
            (this.board = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_PAUSE_FON], NeededImages.SCREEN_PAUSE_FON)),
            this.addChild(this.board),
            this.board.anchor.set(0.5);
        var e = Fabrique.LocalizationHandler.getInstance().getValue("failed"),
            t = 15 < e.length ? 34 : 40;
        (this.failedText = new Phaser.Text(this.game, 0, -258, e, { font: t + "px Days", fill: "#372212" })),
            this.addChild(this.failedText),
            this.failedText.anchor.set(0.5),
            (this.play = new TextButton(this.game, 0, -70, NeededAtlases.atlasMap[NeededImages.RED_BUTTON], null, this, NeededImages.RED_BUTTON)),
            this.play.createText("retry", "#c40f15"),
            this.play.anchor.set(0.5, 0.5),
            this.addChild(this.play),
            this.play.setAnimation(),
            (this.moreGames = new TextButton(
                this.game,
                0,
                60,
                NeededAtlases.atlasMap[NeededImages.BLUE_BUTTON],
                () => {
                    h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.more_games);
                },
                this,
                NeededImages.BLUE_BUTTON
            )),
            this.moreGames.createText("more_games", "#2f62b6"),
            this.moreGames.anchor.set(0.5, 0.5),
            this.addChild(this.moreGames),
            this.moreGames.setAnimation(),
            h5branding.Branding.outGoingLinksAllowed() || (this.moreGames.visible = !1),
            (this.toMenuBtn = new Button(
                this.game,
                -60,
                185,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_HOME],
                null,
                this,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME
            )),
            this.toMenuBtn.anchor.set(0.5, 0.5),
            this.addChild(this.toMenuBtn),
            this.toMenuBtn.setAnimation(),
            (this.snd = new SoundButton2(this.game, "sound", -this.toMenuBtn.x, this.toMenuBtn.y)),
            this.snd.anchor.set(0.5, 0.5),
            this.addChild(this.snd),
            this.snd.setAnimation(),
            (this.play.inputEnabled = !1),
            (this.toMenuBtn.inputEnabled = !1),
            (this.moreGames.inputEnabled = !1),
            (this.snd.inputEnabled = !1),
            (this.play.alpha = 0),
            (this.toMenuBtn.alpha = 0),
            (this.moreGames.alpha = 0),
            (this.snd.alpha = 0),
            (this.smallBtns = [this.toMenuBtn, this.snd]),
            (this.mainBtns = [this.play, this.moreGames]),
            (this.titles = [this.failedText]);
    }
    rescale() {
        (this.x = this.game.width / 2), (this.y = this.game.height / 2);
    }
    showPopUp(e, t, s, a = 0) {
        this.snd.updateVolume(),
            (this.isFail = !0),
            (this.play.inputEnabled = !0),
            (this.toMenuBtn.inputEnabled = !0),
            (this.moreGames.inputEnabled = !0),
            (this.snd.inputEnabled = !0),
            this.game.add.existing(this),
            (this.visible = !0),
            this.animateIt(),
            h5branding.AeriaIntegration.sendScoreEvent("ae-azer-338", e, () => {
                Fabrique.PauseHandler.getInstance().pause();
            });
    }
    animateIt() {
        for (let e = 0; e < this.smallBtns.length; e++) this.smallBtns[e].alpha = 0;
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++) this.titles[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++)
            this.titles[e].scale.set(1.2, 1.2),
                this.game.add.tween(this.titles[e].scale).to({ x: 1, y: 1 }, 450, Phaser.Easing.Back.Out, !0, 0, 0, !1),
                this.game.add.tween(this.titles[e]).to({ alpha: 1 }, 450, Phaser.Easing.Linear.None, !0, 0, 0, !1);
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].hideShine(), this.game.add.tween(this.mainBtns[e]).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 300, 0, !1);
        var t;
        for (let e = 0; e < this.smallBtns.length; e++) (t = this.smallBtns[e].y), (this.smallBtns[e].y = t + 100), this.game.add.tween(this.smallBtns[e]).to({ alpha: 1, y: t }, 300, Phaser.Easing.Quartic.Out, !0, 600, 0, !1);
    }
    closePopUp() {
        (this.visible = !1),
            this.game.add.tween(this.play).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.toMenuBtn).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.moreGames).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.snd).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            (this.play.inputEnabled = !1),
            (this.toMenuBtn.inputEnabled = !1),
            (this.moreGames.inputEnabled = !1),
            (this.snd.inputEnabled = !1),
            (this.smallBtns = null),
            (this.mainBtns = null),
            (this.titles = null);
    }
}
class PausePopUp extends Phaser.Group {
    constructor(e) {
        super(e, null),
            (this.smallBtns = []),
            (this.mainBtns = []),
            (this.titles = []),
            (this.board = this.game.make.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.SCREEN_PAUSE_FON], NeededImages.SCREEN_PAUSE_FON)),
            this.addChild(this.board),
            this.board.anchor.set(0.5);
        e = Fabrique.LocalizationHandler.getInstance().getValue("paused");
        (this.pauseText = new Phaser.Text(this.game, 0, -258, e, { font: "40px Days", fill: "#372212" })),
            this.addChild(this.pauseText),
            this.pauseText.anchor.set(0.5),
            (this.play = new TextButton(this.game, 0, -70, NeededAtlases.atlasMap[NeededImages.GREEN_BUTTON], null, this, NeededImages.GREEN_BUTTON)),
            this.play.createText("continue", "#66983b"),
            this.play.anchor.set(0.5, 0.5),
            this.addChild(this.play),
            this.play.setAnimation(),
            (this.moreGames = new TextButton(
                this.game,
                0,
                60,
                NeededAtlases.atlasMap[NeededImages.BLUE_BUTTON],
                () => {
                    h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.more_games);
                },
                this,
                NeededImages.BLUE_BUTTON
            )),
            this.moreGames.createText("more_games", "#2f62b6"),
            this.moreGames.anchor.set(0.5, 0.5),
            this.addChild(this.moreGames),
            this.moreGames.setAnimation(),
            (this.moreGames.visible = !1),
            (this.toMenuBtn = new Button(
                this.game,
                -120,
                185,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_HOME],
                null,
                this,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME,
                NeededImages.SCREEN_BTN_HOME
            )),
            this.toMenuBtn.anchor.set(0.5, 0.5),
            this.addChild(this.toMenuBtn),
            this.toMenuBtn.setAnimation(),
            (this.restartBtn = new Button(
                this.game,
                0,
                this.toMenuBtn.y,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_RESTART],
                null,
                this,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART,
                NeededImages.SCREEN_BTN_RESTART
            )),
            this.restartBtn.anchor.set(0.5, 0.5),
            this.addChild(this.restartBtn),
            this.restartBtn.setAnimation(),
            (this.snd = new SoundButton2(this.game, "sound", -this.toMenuBtn.x, this.toMenuBtn.y)),
            this.snd.anchor.set(0.5, 0.5),
            this.addChild(this.snd),
            this.snd.setAnimation(),
            (this.close = new Button(
                this.game,
                240,
                -240,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_CLOSE],
                null,
                this,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE
            )),
            this.close.anchor.set(0.5, 0.5),
            this.addChild(this.close),
            this.close.setAnimation(),
            (this.play.inputEnabled = !1),
            (this.toMenuBtn.inputEnabled = !1),
            (this.restartBtn.inputEnabled = !1),
            (this.moreGames.inputEnabled = !1),
            (this.snd.inputEnabled = !1),
            (this.close.inputEnabled = !1),
            (this.play.alpha = 0),
            (this.toMenuBtn.alpha = 0),
            (this.restartBtn.alpha = 0),
            (this.moreGames.alpha = 0),
            (this.snd.alpha = 0),
            (this.close.alpha = 0),
            (this.smallBtns = [this.toMenuBtn, this.snd, this.restartBtn]),
            (this.mainBtns = [this.play, this.moreGames]),
            (this.titles = [this.pauseText]);
    }
    rescale() {
        (this.x = this.game.width / 2), (this.y = this.game.height / 2);
    }
    showPopUp() {
        this.snd.updateVolume(),
            (this.play.inputEnabled = !0),
            (this.toMenuBtn.inputEnabled = !0),
            (this.restartBtn.inputEnabled = !0),
            (this.moreGames.inputEnabled = !0),
            (this.snd.inputEnabled = !0),
            (this.close.inputEnabled = !0),
            this.game.add.existing(this),
            (this.visible = !0),
            this.game.add.tween(this.close).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 100, 0, !1),
            this.animateIt();
    }
    animateIt() {
        for (let e = 0; e < this.smallBtns.length; e++) this.smallBtns[e].alpha = 0;
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++) this.titles[e].alpha = 0;
        for (let e = 0; e < this.titles.length; e++)
            this.titles[e].scale.set(1.2, 1.2),
                this.game.add.tween(this.titles[e].scale).to({ x: 1, y: 1 }, 450, Phaser.Easing.Back.Out, !0, 0, 0, !1),
                this.game.add.tween(this.titles[e]).to({ alpha: 1 }, 450, Phaser.Easing.Linear.None, !0, 0, 0, !1);
        for (let e = 0; e < this.mainBtns.length; e++) this.mainBtns[e].hideShine(), this.game.add.tween(this.mainBtns[e]).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 300, 0, !1);
        var t;
        for (let e = 0; e < this.smallBtns.length; e++) (t = this.smallBtns[e].y), (this.smallBtns[e].y = t + 100), this.game.add.tween(this.smallBtns[e]).to({ alpha: 1, y: t }, 300, Phaser.Easing.Quartic.Out, !0, 600, 0, !1);
    }
    closePopUp() {
        (this.visible = !1),
            this.game.add.tween(this.play).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.toMenuBtn).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.restartBtn).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.moreGames).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.snd).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            this.game.add.tween(this.close).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1),
            (this.play.inputEnabled = !1),
            (this.toMenuBtn.inputEnabled = !1),
            (this.restartBtn.inputEnabled = !1),
            (this.moreGames.inputEnabled = !1),
            (this.snd.inputEnabled = !1),
            (this.close.inputEnabled = !1);
    }
}
class TutorialPopUp extends Phaser.Group {
    constructor(e, t, s) {
        super(e, null),
            (this.bkgPort = this.game.make.image(0, 0, Images.TutPortrait)),
            (this.bkgLand = this.game.make.image(0, 0, Images.TutLandscape)),
            this.addChild(this.bkgLand),
            this.addChild(this.bkgPort),
            this.bkgPort.anchor.set(0.5),
            this.bkgLand.anchor.set(0.5),
            (this.close = new Button(
                this.game,
                0,
                0,
                NeededAtlases.atlasMap[NeededImages.SCREEN_BTN_CLOSE],
                null,
                this,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE,
                NeededImages.SCREEN_BTN_CLOSE
            )),
            this.close.anchor.set(0.5, 0.5),
            this.addChild(this.close),
            this.close.setAnimation(),
            (this.close.alpha = 0);
    }
    showPopUp() {
        (this.close.inputEnabled = !0), this.game.add.existing(this), this.game.add.tween(this.close).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, !0, 0, 0, !1);
    }
    closePopUp() {
        (this.visible = !1), (this.close.inputEnabled = !1);
    }
    rescale() {
        (this.x = this.game.world.width / 2),
            (this.y = this.game.world.height / 2),
            ScaleManager.isPortrait()
                ? ((this.bkgPort.visible = !0), (this.bkgLand.visible = !this.bkgPort.visible), (this.close.x = this.bkgPort.width / 2 - 15), (this.close.y = -this.bkgPort.height / 2 + 70))
                : ((this.bkgPort.visible = !1), (this.bkgLand.visible = !this.bkgPort.visible), (this.close.x = this.bkgLand.width / 2 - 35), (this.close.y = -this.bkgLand.height / 2 + 65));
    }
}
class TextButton extends Button {
    constructor(e, t, s, a, i, n, o) {
        super(e, t, s, a, i, n, o, o, o, o), this.addShine(340, 82, 82);
    }
    createText(e, t) {
        var e = Fabrique.LocalizationHandler.getInstance().getValue(e),
            s = 15 < e.length ? 22 : 30;
        (this.text = new Phaser.Text(this.game, 0, 0, e.toUpperCase(), { font: s + "px Days", fill: "#ffffff", stroke: t, strokeThickness: 4 })), this.text.anchor.set(0.5, 0.5), this.addChild(this.text);
    }
}
class TextButtonSmall extends Button {
    constructor(e, t, s, a, i, n, o) {
        super(e, t, s, a, i, n, o, o, o, o), this.addShine(235, 60, 60);
    }
    createText(e, t) {
        var e = Fabrique.LocalizationHandler.getInstance().getValue(e),
            s = 8 < e.length ? 22 : 30;
        (this.text = new Phaser.Text(this.game, 0, 0, e.toUpperCase(), { font: s + "px Days", fill: "#ffffff", stroke: t, strokeThickness: 4 })), this.text.anchor.set(0.5, 0.5), this.addChild(this.text);
    }
}
!(function (e) {
    class o extends Phaser.State {
        constructor() {
            super(), (this.name = o.Name);
        }
        init() {
            Fabrique.PauseHandler.getInstance(this.game).init(),
                Fabrique.AdHandler.getInstance().init(this.game),
                SaveGame.getInstance(this.game),
                h5branding.AeriaIntegration.onGameLoad(() => {
                    Fabrique.PauseHandler.getInstance().resume();
                }),
                (this.game.input.maxPointers = 1),
                (this.game.canvas.oncontextmenu = function (e) {
                    e.preventDefault();
                }),
                (this.game.device.desktop = !1),
                this.game.device.desktop
                    ? ((this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL), (this.scale.pageAlignHorizontally = !0), (this.game.scale.windowConstraints.bottom = "visual"))
                    : ((this.game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE),
                      (this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.USER_SCALE),
                      (this.game.scale.pageAlignHorizontally = !0),
                      (this.game.scale.pageAlignVertically = !0),
                      (this.game.scale.windowConstraints.right = "layout"),
                      (this.game.scale.windowConstraints.bottom = "visual"),
                      window.addEventListener("resize", (e) => o.mobileResizeCallback(this.game.scale)),
                      this.game.scale.onSizeChange.add(() => {
                          Constants.LANDSCAPE_LOCKED
                              ? this.game.width > this.game.height
                                  ? this.handleCorrect()
                                  : this.handleIncorrect()
                              : Constants.PORTRAIT_LOCKED && (this.game.width < this.game.height ? this.handleCorrect() : this.handleIncorrect()),
                              this.game.state.getCurrentState().resize();
                      }, this),
                      o.mobileResizeCallback(this.game.scale));
        }
        static mobileResizeCallback(e) {
            var t = window.innerWidth,
                s = window.innerHeight,
                a = (o.setScaling(e.game), Constants.GAME_WIDTH * Constants.GAME_SCALE),
                i = Constants.GAME_HEIGHT * Constants.GAME_SCALE;
            let n = 1;
            (n /= s < t ? s / i : s / a),
                (Constants.CALCULATED_WIDTH = Math.ceil(t * n)),
                (Constants.CALCULATED_HEIGHT = Math.ceil(s * n)),
                e.setGameSize(Constants.CALCULATED_WIDTH, Constants.CALCULATED_HEIGHT),
                e.setUserScale(1 / n, 1 / n);
        }
        static setScaling(e) {
            var t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
            (t *= e.device.pixelRatio), (Constants.GAME_SCALE = t < 650 ? 0.5 : 1050 < t ? 1 : 0.75);
        }
        preload() {
            (this.game.load.cacheBuster = "undefined" == typeof version ? null : version),
                ScaleManager.init(this.game),
                FadeInOut.Init(this.game),
                this.game.load.onFileComplete.add((e) => {
                    h5branding.SplashLoader.getInstance().setLoadProgress(e);
                }),
                this.game.load.onLoadComplete.add(() => {
                    h5branding.SplashLoader.getInstance().setLoadProgress(100);
                }),
                h5branding.SplashLoader.getInstance().setButtonCallback(() => {
                    h5branding.SplashLoader.getInstance().destroy(),
                        Fabrique.LocalizationHandler.getInstance().initI18Next(),
                        h5branding.Utils.inGDGameZone()
                            ? (Fabrique.LoaderHelper.hide(), this.game.state.start(e.Menu.Name))
                            : Fabrique.AdHandler.getInstance().showAd("splash", () => {
                                  this.game.state.start(e.Menu.Name);
                              });
                }),
                this.game.load.json("levels", "assets/json/levels.json"),
                this.game.load.json("menu", "assets/json/menu.json"),
                this.game.load.json("map", "assets/json/map.json");
            Fonts.list.forEach((e) => {
                this.game.load.bitmapFont(e, "assets/fonts/" + e + "/" + e + ".png", "assets/fonts/" + e + "/" + e + ".fnt");
            }),
                Images.list.forEach((e) => {
                    this.game.load.image(e, "assets/images/" + e);
                }),
                Atlases.list.forEach((e) => {
                    this.game.load.atlas(e, "assets/atlases/x1/" + e + ".png", "assets/atlases/x1/" + e + ".json");
                }),
                NeededAtlases.list.forEach((e) => {
                    this.game.load.atlas(e, "assets/atlases/" + e + ".png", "assets/atlases/" + e + ".json");
                }),
                Sounds.list.forEach((e) => {
                    this.game.device.iOS ? this.game.load.audio(e, ["assets/sounds/" + e + ".m4a"]) : this.game.load.audio(e, ["assets/sounds/" + e + ".mp3", "assets/sounds/" + e + ".ogg"]);
                }),
                Constants.SUPPORTED_LANGUAGES.forEach((e) => {
                    this.load.json(e, `assets/locales/${e}.json`);
                }),
                (this.game.load.crossOrigin = "anonymous"),
                h5branding.Utils.getBrandingDomain() !== h5branding.BrandingDomain.Neutral && this.game.load.image("branding_logo", h5branding.Branding.brandingLogoUrl);
        }
        handleCorrect() {
            this.wasPaused || (e.Gameplay.pause = !1), (document.getElementById("orientation").style.display = "none"), (document.getElementById("content").style.display = "block");
        }
        handleIncorrect() {
            (this.wasPaused = e.Gameplay.pause), this.wasPaused || (e.Gameplay.pause = !0), (document.getElementById("orientation").style.display = "block"), (document.getElementById("content").style.display = "none");
        }
    }
    (o.Name = "boot"), (e.Boot = o);
})((MahjongDynasty = MahjongDynasty || {})),
    (function (s) {
        class a extends Phaser.State {
            constructor() {
                super(),
                    (this.name = a.Name),
                    (this.inRow = 30),
                    (this.inColumn = 12),
                    (this.inDept = 20),
                    (this.possibleTiles = []),
                    (this.historyDepth = 3),
                    (this.historyInfo = []),
                    (this.historyDeckLevel = []),
                    (this.historyTiles = []),
                    (this.highlightPossibleNum = -1),
                    (this.highlightPossibleMax = 2),
                    (this.isTut2 = !1),
                    (this.isPanelsIn = !1),
                    (this.isPanelsOut = !1),
                    (this.panelsTweens = []),
                    (this.isTileMoves = !1),
                    (this.clicked = !1);
            }
            init() {
                this.clicked = !1;
            }
            create() {
                (this.isPanelsIn = !1),
                    (this.isPanelsOut = !1),
                    (this.isTileMoves = !1),
                    (this.isPausing = !1),
                    (this.isFinish = !1),
                    (this.score = 0),
                    (this.fullScore = 0),
                    (this.comboScore = 0),
                    (this.second = 0),
                    (this.elapsed = 0),
                    (this.isStart = !1),
                    (this.inColumn = 20),
                    this.createBkg(),
                    this.deck || (this.deck = new s.Deck()),
                    (this.settingsBtn = new Button(
                        this.game,
                        0,
                        0,
                        NeededAtlases.atlasMap[NeededImages.BTN_UI_PAUSE],
                        this.settingBtnclick,
                        this,
                        NeededImages.BTN_UI_PAUSE,
                        NeededImages.BTN_UI_PAUSE,
                        NeededImages.BTN_UI_PAUSE,
                        NeededImages.BTN_UI_PAUSE
                    )),
                    this.settingsBtn.anchor.set(0.5, 0.5),
                    (this.settingsBtn.detectPortraitScale = !0),
                    this.settingsBtn.setAnimation(),
                    (this.scoreFon = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.PANEL_SCORE], NeededImages.PANEL_SCORE)),
                    (this.scoreText = this.game.add.bitmapText(0, 0, Fonts.EquinoxWhite, "0", 36)),
                    this.scoreText.anchor.set(0.5, 0),
                    this.scoreText.position.set(90, 60),
                    (this.scoreText.align = "center"),
                    this.scoreFon.addChild(this.scoreText);
                var e = Fabrique.LocalizationHandler.getInstance().getValue("score");
                (this.scoreFonText = new Phaser.Text(this.game, 90, 15, e, { font: "22px Days", fill: "#ffffff", stroke: "#532e1f", strokeThickness: 2 })),
                    this.scoreFonText.anchor.set(0.5, 0),
                    this.scoreFon.addChild(this.scoreFonText),
                    (this.bonusFon = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.PANEL_BONUS], NeededImages.PANEL_BONUS)),
                    this.bonusFon.anchor.set(0.5, 0.5),
                    (this.powerupsFon = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.PANEL_POWERUPS], NeededImages.PANEL_POWERUPS)),
                    this.powerupsFon.anchor.set(0.5, 0.5),
                    (this.powerupHelp = new PowerupBtn(this.game, NeededImages.BTN_POWERUPS_HELP, this.onPowerupHelp, this)),
                    (this.powerupEye = new PowerupBtn(this.game, NeededImages.BTN_POWERUPS_EYE, this.onPowerupEye, this)),
                    (this.powerupSword = new PowerupBtn(this.game, NeededImages.BTN_POWERUPS_SWORD, this.onPowerupSword, this)),
                    (this.powerupShuffle = new PowerupBtn(this.game, NeededImages.BTN_POWERUPS_SHUFFLE, this.onPowerupShuffle, this)),
                    (this.powerupUndo = new PowerupBtn(this.game, NeededImages.BTN_POWERUPS_UNDO, this.onPowerupUndo, this)),
                    (this.powerupBtns = [this.powerupHelp, this.powerupEye, this.powerupSword, this.powerupShuffle, this.powerupUndo]),
                    (this.shuffleText = this.game.add.bitmapText(0, 0, Fonts.Equinox, "No more moves, shuffling!", 75, this.world)),
                    this.shuffleText.anchor.set(0.5),
                    (this.shuffleText.align = "center"),
                    (this.shuffleText.alpha = 0),
                    h5branding.Utils.getBrandingDomain() !== h5branding.BrandingDomain.Neutral &&
                        ((this.sponsorLogo = this.game.add.sprite(this.game.world.width / 2, 90, "branding_logo")),
                        this.sponsorLogo.anchor.set(0.5, 0),
                        h5branding.Branding.outGoingLinksAllowed() &&
                            ((this.sponsorLogo.inputEnabled = !0),
                            this.sponsorLogo.events.onInputUp.add(() => {
                                h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.logo);
                            }))),
                    (this.progressBar = new ProgressBar(this.game, 40, -100)),
                    this.loadLevel(Constants.OPEN_LEVEL),
                    (this.bkgGraphic = this.game.make.graphics(0, 0)),
                    this.bkgGraphic.beginFill(0, 0.6),
                    this.bkgGraphic.drawRect(0, 0, this.game.world.width, this.game.world.height),
                    this.bkgGraphic.endFill(),
                    (this.bkgGraphic.visible = !1),
                    (this.bkgGraphic.inputEnabled = !0),
                    this.drawbkg(),
                    (this.endPopUp = new EndGamePopUp(this.game, this.game.world.width / 2, this.game.world.height / 2)),
                    this.endPopUp.toMenuBtn.events.onInputUp.add(this.onToMenuBtnHandler, this),
                    this.endPopUp.restartBtn.events.onInputUp.add(this.onRestartBtnHandler, this),
                    this.endPopUp.nextBtn.events.onInputUp.add(this.onNextBtnHandler, this),
                    this.endPopUp.close.events.onInputUp.add(this.onNextBtnHandler, this),
                    (this.failPopUp = new FailGamePopUp(this.game)),
                    this.failPopUp.toMenuBtn.events.onInputUp.add(this.onToMenuBtnHandler, this),
                    this.failPopUp.play.events.onInputUp.add(this.onRestartBtnHandler, this),
                    this.progressBar.onEndBar.add(this.failGame, this),
                    (this.pausePopUp = new PausePopUp(this.game)),
                    this.pausePopUp.toMenuBtn.events.onInputUp.add(this.onToMenuBtnHandler, this),
                    this.pausePopUp.restartBtn.events.onInputUp.add(this.onRestartBtnHandler, this),
                    this.pausePopUp.play.events.onInputUp.add(this.settingBtnclick, this),
                    this.pausePopUp.close.events.onInputUp.add(this.settingBtnclick, this),
                    (this.confirmPopUp = new ConfirmPopUp(this.game)),
                    this.confirmPopUp.leftbtn.events.onInputUp.add(this.onToMenuBtnHandler, this),
                    this.confirmPopUp.rightbtn.events.onInputUp.add(() => {
                        this.confirmPopUp.closePopUp();
                    }, this),
                    (this.bonusTimer = this.game.time.create(!1)),
                    this.progressBar.resetCombo(),
                    this.progressBar.setBarPoints(0),
                    ScaleManager.onResize.add(this.rescale, this),
                    ScaleManager.SizeCalculation(this.game),
                    FadeInOut.instance.fadeOut(),
                    this.startHint(),
                    this.world.bringToTop(this.shuffleText),
                    (this.historyInfo = []),
                    (this.historyDeckLevel = []),
                    (this.historyTiles = []),
                    (this.shuffled = 0),
                    this.updateHistory(),
                    (this.tileScoreText1 = this.game.make.bitmapText(0, 0, Fonts.OxygenWhiteShadow, "0", 72)),
                    this.tileScoreText1.anchor.set(0.5, 0),
                    (this.tileScoreText1.align = "center"),
                    (this.tileScoreText2 = this.game.make.bitmapText(0, 0, Fonts.OxygenWhiteShadow, "0", 72)),
                    this.tileScoreText2.anchor.set(0.5, 0),
                    (this.tileScoreText2.align = "center"),
                    (this.tileScoreText1.alpha = 0),
                    (this.tileScoreText2.alpha = 0),
                    SaveGame.getInstance().isFirstPlay ? (this.showTut2(), this.switchPanelsVisible(!1), (SaveGame.getInstance().isFirstPlay = !1)) : this.panelsIn();
            }
            drawbkg() {
                (this.bkgGraphic.width = this.game.world.width), (this.bkgGraphic.height = this.game.world.height), this.game.add.existing(this.bkgGraphic);
            }
            shutdown() {
                ScaleManager.onResize.remove(this.rescale, this),
                    this.progressBar.onEndBar.remove(this.failGame, this),
                    this.progressBar.destroy(),
                    (this.selectedTile = null),
                    this.background.destroy(),
                    this.backgroundSign && this.backgroundSign.destroy(),
                    this.addScoreTimer && this.addScoreTimer.destroy();
                for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].destroy(!1);
                this.powerupBtns = null;
                for (let e = 0; e < this.tiles.length; e++) this.tiles[e].destroy(!0);
                (this.tiles = null),
                    (this.gameField = null),
                    this.scoreText.destroy(!0),
                    this.powerupUndo.destroy(!0),
                    this.settingsBtn.destroy(!0),
                    this.scoreText.destroy(!0),
                    this.scoreFon.destroy(!0),
                    this.bonusFon.destroy(!0),
                    this.powerupsFon.destroy(!0),
                    this.shuffleText.destroy(!0),
                    this.sponsorLogo && this.sponsorLogo.destroy(!0),
                    this.progressBar.destroy(!0),
                    this.bkgGraphic.destroy(!0),
                    this.endPopUp.destroy(!0),
                    this.failPopUp.destroy(!0),
                    this.pausePopUp.destroy(!0),
                    this.confirmPopUp.destroy(!0),
                    this.tutPopUp && this.tutPopUp.destroy(!0),
                    this.bonusTimer.destroy(),
                    (this.historyInfo = null),
                    (this.historyDeckLevel = null),
                    (this.historyTiles = null),
                    this.tileScoreText1.destroy(!0),
                    this.tileScoreText2.destroy(!0);
            }
            rescale() {
                let e,
                    t =
                        ((e = Math.round(this.game.world.height) >= Constants.BKG_MENU_SIZE + 200 ? this.game.world.height / Constants.BKG_MENU_SIZE : this.game.world.width / Constants.BKG_MENU_SIZE),
                        (this.background.x = this.game.world.width / 2),
                        (this.background.y = this.game.world.height / 2),
                        this.backgroundSign && ((this.backgroundSign.x = this.game.world.width / 2), (this.backgroundSign.y = this.game.world.height / 2)),
                        this.drawbkg(),
                        Constants.SCALE_LANDSCAPE);
                ScaleManager.isPortrait()
                    ? ((t = Constants.SCALE_PORTRAIT), this.confirmPopUp.scale.set(1.4), this.sponsorLogo && this.sponsorLogo.scale.set(0.4))
                    : (this.confirmPopUp.scale.set(0.7), this.sponsorLogo && this.sponsorLogo.scale.set(0.2)),
                    (Constants.CUR_SCALE = t),
                    this.settingsBtn.scale.set(t),
                    this.scoreFon.scale.set(t),
                    this.bonusFon.scale.set(t),
                    this.powerupsFon.scale.set(t);
                for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].scale.set(t), this.powerupBtns[e].turning(ScaleManager.isPortrait());
                if ((this.pausePopUp.scale.set(t), this.endPopUp.scale.set(t), this.failPopUp.scale.set(t), ScaleManager.isPortrait())) {
                    this.settingsBtn.position.set(this.game.world.width - this.settingsBtn.width / 2 - 25, this.game.world.height - this.settingsBtn.height / 2 - 30),
                        this.isPanelsIn ||
                            (this.scoreFon.position.set(this.game.world.width - this.scoreFon.width, 5),
                            (this.bonusFon.rotation = -Math.PI / 2),
                            this.bonusFon.position.set(25 + this.bonusFon.height / 2, this.bonusFon.width / 2),
                            (this.powerupsFon.rotation = -Math.PI / 2),
                            this.powerupsFon.position.set(25 + this.powerupsFon.height / 2, this.game.world.height - this.powerupsFon.width / 2));
                    for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].position.set(147 + 107 * e * Constants.SCALE_PORTRAIT, this.game.world.height - this.powerupsFon.width / 2 + 20);
                    this.progressBar.rescale(92, 118, Constants.SCALE_PORTRAIT, ScaleManager.isPortrait()),
                        (this.background.angle = 90),
                        (this.background.width = this.game.world.height),
                        (this.background.height = this.game.world.width),
                        (a.PROGRESS_Y = 90),
                        this.sponsorLogo && ((this.sponsorLogo.inputEnabled = !1), (this.sponsorLogo.visible = !1)),
                        this.shuffleText.position.set(this.game.world.width / 2, this.game.world.height / 2),
                        this.shuffleText.scale.set(1.5, 1.5);
                } else {
                    this.settingsBtn.position.set(30 + this.settingsBtn.width / 2, 20 + this.settingsBtn.height / 2),
                        this.isPanelsIn ||
                            (this.scoreFon.position.set(this.game.world.width - this.scoreFon.width, 20),
                            (this.bonusFon.rotation = 0),
                            this.bonusFon.position.set(this.game.world.width - this.bonusFon.width / 2, this.game.world.height - this.bonusFon.height / 2 - 30),
                            (this.powerupsFon.rotation = 0),
                            this.powerupsFon.position.set(this.powerupsFon.width / 2, this.game.world.height - this.powerupsFon.height / 2 - 30));
                    for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].position.set(this.powerupsFon.x - 8, this.powerupsFon.y - this.powerupsFon.height / 2 + this.powerupHelp.height / 2 + 25 + 108 * e);
                    this.progressBar.rescale(this.game.world.width - this.bonusFon.width / 2 + 6, this.bonusFon.y + 122, Constants.SCALE_LANDSCAPE, ScaleManager.isPortrait()),
                        (this.background.angle = 0),
                        (this.background.width = this.game.world.width),
                        (this.background.height = this.game.world.height),
                        (a.PROGRESS_Y = 50),
                        this.sponsorLogo && (this.sponsorLogo.position.set(40 + this.sponsorLogo.width / 2, 40), (this.sponsorLogo.inputEnabled = !1), (this.sponsorLogo.visible = !1)),
                        this.shuffleText.position.set(this.game.world.width / 2 + 0, this.game.world.height / 2),
                        this.shuffleText.scale.set(1, 1);
                }
                this.setTileGroup(), this.failPopUp.rescale(), this.endPopUp.rescale(), this.pausePopUp.rescale(), this.confirmPopUp.rescale(), this.tutPopUp && this.tutPopUp.rescale(), this.isTut2 && this.showTut2();
            }
            createBkg() {
                var e = Images.list[Math.floor(Constants.OPEN_LEVEL / 10)];
                (this.background = this.game.add.image(0, 0, e)),
                    this.background.anchor.set(0.5),
                    40 <= Constants.OPEN_LEVEL && Constants.OPEN_LEVEL < 70 && ((this.backgroundSign = this.game.add.image(0, 0, NeededAtlases.atlasMap[NeededImages.HIERO], NeededImages.HIERO)), this.backgroundSign.anchor.set(0.5));
            }
            getTilesSize(t) {
                let s = t.tiles[0],
                    a = t.tiles[0];
                for (let e = 1; e < t.count; ++e) s.inX >= t.tiles[e].inX && (s = t.tiles[e]).inZ < t.tiles[e].inZ && (s = t.tiles[e]), a.inY >= t.tiles[e].inY && (a = t.tiles[e]).inZ < t.tiles[e].inZ && (a = t.tiles[e]);
                (this.shiftx = ((s.inX - 1) * Tile.TILE_WIDTH) / 2 + (s.inZ + 1) * Tile.X_CORRECTION), (this.shifty = ((a.inY - 1) * Tile.TILE_HEIGHT) / 2 + (a.inZ + 1) * Tile.Y_CORRECTION);
            }
            setTileGroup() {
                let e = 70,
                    t = 0,
                    s = 0,
                    a = this.bonusFon.width,
                    i = this.powerupsFon.width;
                ScaleManager.isPortrait() || ((t = this.powerupsFon.width), (s = this.bonusFon.width), (a = 0), (i = 0), (e = 50));
                var n = (this.game.world.width - (120 + t + s)) / this.ntileWidth,
                    o = (this.game.world.height - (2 * e + a + i)) / this.ntileHeight;
                let h = n < o ? n : o;
                (a = n < o ? 0 : a),
                    (i = n < o ? 0 : i),
                    ScaleManager.isPortrait() || (h = 1.32 < h ? 1.32 : h),
                    this.tilegroup.scale.set(h),
                    (this.tilegroup.x = (this.game.world.width - t - s - this.ntileWidth * h) / 2 - this.shiftx * h + t),
                    (this.tilegroup.y = (this.game.world.height - a - i - this.ntileHeight * h) / 2 - this.shifty * h + a);
            }
            static getRandomInt(e, t) {
                t = e - 0.5 + Math.random() * (t - e + 1);
                return Math.round(t);
            }
            settingBtnclick() {
                this.isPausing
                    ? (this.sponsorLogo && (this.sponsorLogo.inputEnabled = !1), this.pausePopUp.closePopUp(), (this.progressBar.isStarted = !1), this.isFinish || (this.bkgGraphic.visible = !1))
                    : (this.sponsorLogo && ((this.sponsorLogo.inputEnabled = !0), this.game.add.tween(this.sponsorLogo).to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, !0)),
                      (this.progressBar.isStarted = !0),
                      this.pausePopUp.showPopUp(),
                      (this.bkgGraphic.visible = !0)),
                    this.pauseGame(this.settingsBtn);
            }
            pauseGame(e) {
                this.game.add.tween(e.scale).to({ x: 1.1, y: 1.1 }, 100, Phaser.Easing.Linear.None, !0, 0, 0, !0),
                    (this.isPausing = !this.isPausing),
                    (this.progressBar.isStarted = !this.isPausing),
                    this.isPausing ? (e.visible = !1) : (this.startHint(), (e.visible = !0));
                for (let e = 0; e < this.tiles.length; e++) this.tiles[e].setPause(this.isPausing), (this.tiles[e].inputEnabled = !this.isPausing);
            }
            onToMenuBtnHandler() {
                (Constants.LAST_LEVEL = Constants.OPEN_LEVEL + 1),
                    Fabrique.AdHandler.getInstance().showAd("menu", () => {
                        FadeInOut.instance.fadeTo(s.MenuMap.Name);
                    });
            }
            onRestartBtnHandler() {
                this.clicked ||
                    ((this.clicked = !0),
                    Fabrique.AdHandler.getInstance().showAd("restart", () => {
                        FadeInOut.instance.fadeTo(s.Gameplay.Name);
                    }));
            }
            onNextBtnHandler() {
                this.clicked ||
                    ((this.clicked = !0),
                    Fabrique.AdHandler.getInstance().showAd("next_level", () => {
                        Constants.OPEN_LEVEL + 1 < Constants.COUNT_OF_LEVELS && (Constants.OPEN_LEVEL++, (Constants.AUTO_START = !1)), FadeInOut.instance.fadeTo(s.MenuMap.Name);
                    }));
            }
            findTiles() {
                if (!this.isPausing)
                    for (let e = 0; e < 3; ++e)
                        this.game.time.events.add(
                            500 * e,
                            () => {
                                var t = this.getActiveTiles();
                                let s = !1;
                                for (let e = 0; e < t.length; ++e) {
                                    var a = t[e];
                                    for (let e = 0; e < t.length; ++e)
                                        if (a.isSameType(t[e].tileType) && a !== t[e]) {
                                            a.hintShine(), t[e].hintShine(), (s = !0);
                                            break;
                                        }
                                    if (s) break;
                                }
                                this.progressBar.setCombo(0);
                            },
                            this
                        );
            }
            startHint() {}
            levelStarted(e) {
                this.game.time.events.remove(e), (this.progressBar.isStarted = !0), this.startTimer(), (this.settingsBtn.inputEnabled = !0), this.refreshPowerupBtns();
            }
            failGame(e = !0) {
                (this.settingsBtn.inputEnabled = !1), this.sponsorLogo && ((this.sponsorLogo.inputEnabled = !0), this.game.add.tween(this.sponsorLogo).to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, !0));
                for (let e = 0; e < this.tiles.length; e++) this.tiles[e].setPause(!0), (this.tiles[e].inputEnabled = !1);
                let t = !1;
                SaveGame.getInstance().levels[Constants.OPEN_LEVEL].score < this.fullScore && (SaveGame.getInstance().updateScore(Constants.OPEN_LEVEL, this.fullScore), (t = !0)),
                    this.failPopUp.showPopUp(this.fullScore, this.comboScore, t, e),
                    this.panelsOut();
            }
            finishLevel() {
                this.game.add.tween(this.settingsBtn).to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, !0),
                    (this.settingsBtn.inputEnabled = !1),
                    (this.isFinish = !0),
                    (this.bkgGraphic.visible = !0),
                    s.SoundManager.getInstance().play(Sounds.Win),
                    (this.progressBar.isStarted = !1),
                    this.stopTimer(),
                    (Constants.LAST_LEVEL = Constants.OPEN_LEVEL),
                    (Constants.ACTIVE_LEVEL = Constants.OPEN_LEVEL + 1 < Constants.COUNT_OF_LEVELS ? Constants.OPEN_LEVEL + 1 : Constants.OPEN_LEVEL);
                let e = !1;
                SaveGame.getInstance().levels[Constants.OPEN_LEVEL].score < this.fullScore + 0 && (SaveGame.getInstance().updateScore(Constants.OPEN_LEVEL, this.fullScore + 0), (e = !0)),
                    (SaveGame.getInstance().levels[Constants.OPEN_LEVEL].time > this.second || 0 === SaveGame.getInstance().levels[Constants.OPEN_LEVEL].time) &&
                        (SaveGame.getInstance().updateTime(Constants.OPEN_LEVEL, this.second), (e = !0)),
                    SaveGame.getInstance().updateLevelProgress(Constants.OPEN_LEVEL),
                    this.progressBar.countOfUserStars > SaveGame.getInstance().levels[Constants.OPEN_LEVEL].stars && SaveGame.getInstance().updateStars(Constants.OPEN_LEVEL, this.progressBar.countOfUserStars),
                    Constants.ACTIVE_LEVEL > Constants.LAST_AVAILABLE_LEVEL ? ((Constants.LAST_AVAILABLE_LEVEL = Constants.ACTIVE_LEVEL), (Constants.IS_FRESH_LEVEL = !0)) : (Constants.IS_FRESH_LEVEL = !1);
                var t = this.getPowsBonus(this.progressBar.countOfUserStars);
                for (let e = 0; e < t.length; ++e) Constants.pows[t[e]] += 1;
                SaveGame.getInstance().updatePows(),
                    this.endPopUp.setPowsBonus(t),
                    this.endPopUp.showPopUp(this.fullScore, 0, this.comboScore, this.progressBar.countOfUserStars, e),
                    (this.settingsBtn.inputEnabled = !1),
                    this.sponsorLogo && (this.sponsorLogo.inputEnabled = !1),
                    this.panelsOut();
            }
            getPowsBonus(t) {
                var s = [];
                for (let e = 0; e < t; ++e) s.push(Math.floor(Math.random() * Constants.POWS_NUM));
                return s;
            }
            stopTimer() {
                this.isStart = !1;
            }
            startTimer() {
                (this.isStart = !0), (this.second = 0), (this.elapsed = this.game.time.totalElapsedSeconds());
            }
            loadLevel(e) {
                var t = Constants.LEVELS.all[e];
                (this.gameField = []), this.deck.createDeck(t.count), (this.selectedTile = void 0), (this.tiles = []);
                let s;
                for (let e = 0; e < t.count; e++) (s = new Tile(this.game, e.toString()).deactivate()).coordinateToCell(t.tiles[e]), this.tiles.push(s), this.addToField(s), (s.isDeactivated = !1);
                for (; this.deck.noCombo(), !this.createFieldPath(); );
                this.gameField = [];
                for (let e = 0; e < t.count; e++) (s = this.tiles[e]).coordinateToCell(t.tiles[e]), this.addToField(s);
                for (let e = 0; e < Constants.POWS_NUM; e++) (this.powerupBtns[e].id = e), this.powerupBtns[e].setNum(Constants.pows[e] || 0);
                this.progressBar.setStarpoints(t.starpoints), (this.tilegroup = this.game.add.group());
                for (let e = 0; e < t.count; e++) (s = this.tiles[e]).events.onInputDown.add(this.tapToTile.bind(this, s, !0)), s.addToScreen(this.tilegroup);
                (this.ntileWidth = this.tilegroup.width), (this.ntileHeight = this.tilegroup.height);
                for (let e = 0; e < t.count; ++e) {
                    var a = (s = this.tiles[e]).x;
                    (s.x = 0 < e % 2 ? 2 * this.game.world.width + 120 : -this.game.world.width), this.game.add.tween(s).to({ x: a }, 300, Phaser.Easing.Linear.None, !0, 1e3 * (Math.random() + 0.1), 0, !1);
                }
                this.getTilesSize(t),
                    this.disablePowerupBtns(),
                    this.time.events.repeat(
                        120,
                        9,
                        () => {
                            this.playSoundShuffle();
                        },
                        this
                    ),
                    this.recheckActive(),
                    this.game.time.events.add(1500, this.levelStarted, this);
            }
            createFieldPath() {
                let e = !1,
                    t = (this.recheckActive(), this.getActiveTiles());
                var s = [],
                    a = [];
                for (let e = 0; e < this.tiles.length; e++) this.tiles[e].isDeactivated || (a.push(this.tiles[e]), s.push(new Vector(this.tiles[e].inX, this.tiles[e].inY, this.tiles[e].inZ)));
                for (; 0 < t.length; ) {
                    for (let e = 0; e < 2; e++) {
                        var i = Math.round(Math.random() * (t.length - 1));
                        if (!t[i]) return this.failGame(!1), !1;
                        t[i].setTileType(this.deck.getNext()), (t[i].isDeactivated = !0), t.splice(i, 1);
                    }
                    if ((this.recheckActive(), 1 === (t = this.getActiveTiles()).length)) {
                        e = !0;
                        break;
                    }
                }
                for (let e = 0; e < a.length; e++) (a[e].isDeactivated = !1), this.addToField(a[e]);
                return !e;
            }
            getActiveTiles() {
                var t,
                    s = [];
                for (let e = 0; e < this.tiles.length; e++) (t = this.tiles[e]).isDeactivated || (t.currentSpriteType !== TileSpriteType.Simple && t.currentSpriteType !== TileSpriteType.Hightlight) || s.push(t);
                return s;
            }
            recheckActive() {
                var t;
                for (let e = 0; e < this.tiles.length; e++) (t = this.tiles[e]).isDeactivated || (this.canTapToTile(t) ? t.changeSpriteColor(TileSpriteType.Simple) : t.changeSpriteColor(TileSpriteType.Dark));
            }
            addToField(e, t = !0) {
                t = t ? e : void 0;
                void 0 === this.gameField[e.inX] && (this.gameField[e.inX] = []),
                    void 0 === this.gameField[e.inX][e.inY] && (this.gameField[e.inX][e.inY] = []),
                    (this.gameField[e.inX][e.inY][e.inZ] = t),
                    void 0 === this.gameField[e.inX + 1] && (this.gameField[e.inX + 1] = []),
                    void 0 === this.gameField[e.inX + 1][e.inY] && (this.gameField[e.inX + 1][e.inY] = []),
                    (this.gameField[e.inX + 1][e.inY][e.inZ] = t),
                    void 0 === this.gameField[e.inX][e.inY + 1] && (this.gameField[e.inX][e.inY + 1] = []),
                    (this.gameField[e.inX][e.inY + 1][e.inZ] = t),
                    void 0 === this.gameField[e.inX + 1][e.inY + 1] && (this.gameField[e.inX + 1][e.inY + 1] = []),
                    (this.gameField[e.inX + 1][e.inY + 1][e.inZ] = t);
            }
            canTapToTile(e) {
                return (
                    void 0 === this.getTile(e, Vector.UPPER) &&
                    void 0 === this.getTile(e, Vector.UPPER_1) &&
                    void 0 === this.getTile(e, Vector.UPPER_2) &&
                    void 0 === this.getTile(e, Vector.UPPER_3) &&
                    void 0 === this.getTile(e, Vector.UPPER2) &&
                    void 0 === this.getTile(e, Vector.UPPER2_1) &&
                    void 0 === this.getTile(e, Vector.UPPER2_2) &&
                    void 0 === this.getTile(e, Vector.UPPER2_3) &&
                    void 0 === this.getTile(e, Vector.UPPER3) &&
                    void 0 === this.getTile(e, Vector.UPPER3_1) &&
                    void 0 === this.getTile(e, Vector.UPPER3_2) &&
                    void 0 === this.getTile(e, Vector.UPPER3_3) &&
                    ((void 0 === this.getTile(e, Vector.LEFT) && void 0 === this.getTile(e, Vector.LEFT_1)) || (void 0 === this.getTile(e, Vector.RIGHT) && void 0 === this.getTile(e, Vector.RIGHT_1)))
                );
            }
            isRightTile(e) {
                return void 0 === this.getTile(e, Vector.RIGHT) && void 0 === this.getTile(e, Vector.RIGHT_1);
            }
            tapToTile(e, t = !0) {
                this.isTileMoves ||
                    (this.canTapToTile(e)
                        ? this.selectedTile !== e &&
                          (e.changeSpriteColor(TileSpriteType.Hightlight),
                          void 0 !== this.selectedTile && (this.selectedTile.changeSpriteColor(TileSpriteType.Simple), this.selectedTile.isSameType(e.tileType))
                              ? (this.checkTut2(),
                                this.checkHighlightPossible(this.selectedTile, e),
                                e.changeSpriteColor(TileSpriteType.Simple),
                                (this.temporary = 75 * (12 - e.inZ) + 75 * (12 - this.selectedTile.inZ)),
                                (this.temporary = 2 * Math.round(this.temporary / 2)),
                                this.createCombo(),
                                this.showTilesScore(this.selectedTile, e, this.temporary / 2),
                                (this.selectedTile.inputEnabled = !1),
                                (e.inputEnabled = !1),
                                this.createExplode(e),
                                this.createExplode(this.selectedTile),
                                s.SoundManager.getInstance().play(Sounds.Tile_match),
                                this.destroyTile(this.selectedTile),
                                this.destroyTile(e),
                                this.deck.removeTiles(e.tileType, this.selectedTile.tileType),
                                (this.selectedTile = void 0),
                                this.startHint(),
                                this.deck.hasTiles() ? (this.recheckActive(), this.checkForCombo(), t && this.updateHistory()) : this.finishLevel())
                              : ((this.selectedTile = e), s.SoundManager.getInstance().play(Sounds.Tile_select1)))
                        : e.isMoving ||
                          (this.game.add
                              .tween(e)
                              .to({ x: e.x + 5 }, 100, Phaser.Easing.Linear.None, !0, 0, 2, !0)
                              .onComplete.add(() => {
                                  e.isMoving = !1;
                              }, this),
                          (e.isMoving = !0)));
            }
            createCombo() {
                this.progressBar.addCombo();
                var e = Math.round(this.temporary * this.progressBar.getCombo() * Constants.COMBOMETER_MOD),
                    e = 2 * Math.round(e / 2);
                (this.comboScore += e), (this.temporary += e), (this.fullScore += this.temporary), this.progressBar.setBarPoints(this.fullScore);
            }
            clearAllTiles() {
                void 0 !== this.selectedTile && void 0 !== this.selectedTile && (this.selectedTile.changeSpriteColor(TileSpriteType.Simple), (this.selectedTile = void 0));
                var t = this.getActiveTiles();
                for (let e = 0; e < t.length; ++e) t[e].removeSelect();
            }
            createExplode(e) {
                s.SoundManager.getInstance().play(Sounds.Tile_match), this.isRightTile(e) ? this.moveRemovedTiles(e, 40) : this.moveRemovedTiles(e, -40);
            }
            moveRemovedTiles(e, t) {
                this.game.add.tween(e).to({ x: e.x + t }, 350, Phaser.Easing.Linear.None, !0, 0, 0, !1),
                    this.game.add
                        .tween(e)
                        .to({ alpha: 0 }, 350, Phaser.Easing.Linear.None, !0, 0, 0, !1)
                        .onComplete.addOnce(() => {
                            this.killTile(e);
                        }, this),
                    e.playLight();
            }
            getTile(e, t) {
                var s = e.inZ + t.inZ;
                if (
                    !(
                        s >= this.inDept ||
                        s < 0 ||
                        (s = e.inX + t.inX) >= this.inRow ||
                        s < 0 ||
                        (s = e.inY + t.inY) >= this.inColumn ||
                        s < 0 ||
                        void 0 === this.gameField[e.inX + t.inX] ||
                        void 0 === this.gameField[e.inX + t.inX][e.inY + t.inY]
                    )
                ) {
                    s = this.gameField[e.inX + t.inX][e.inY + t.inY][e.inZ + t.inZ];
                    if (void 0 === s || !s.isDeactivated) return this.gameField[e.inX + t.inX][e.inY + t.inY][e.inZ + t.inZ];
                }
            }
            destroyTile(e) {
                (this.gameField[e.inX][e.inY][e.inZ] = void 0),
                    (this.gameField[e.inX + 1][e.inY][e.inZ] = void 0),
                    (this.gameField[e.inX][e.inY + 1][e.inZ] = void 0),
                    (this.gameField[e.inX + 1][e.inY + 1][e.inZ] = void 0),
                    (e.isDeactivated = !0),
                    e.deactivate();
            }
            killTile(e) {
                e.kill();
            }
            checkForCombo() {
                var t = this.getActiveTiles();
                let s = !1;
                t.sort(function (e, t) {
                    return e.tileType > t.tileType ? 1 : e.tileType < t.tileType ? -1 : 0;
                });
                for (let e = 1; e < t.length; e++)
                    if (t[e].isSameType(t[e - 1].tileType)) {
                        s = !0;
                        break;
                    }
                s || 2 === this.deck.level.length || (Constants.pows[3] < 1 ? this.failGame(!1) : this.disablePowerupBtns(3));
            }
            makeShuffle(e = !1) {
                this.disablePowerupBtns(),
                    e ||
                        this.game.add
                            .tween(this.shuffleText)
                            .to({ alpha: 1 }, 200, Phaser.Easing.Linear.None, !0, 0, 0, !1)
                            .onComplete.add(() => {
                                this.game.add.tween(this.shuffleText).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, !0, 1e3, 0, !1);
                            }, this);
                for (let s = 0; s < this.tiles.length; s++) {
                    let t = this.tiles[s];
                    if (!t.isDeactivated) {
                        let e = t.x;
                        var a = 0 < s % 2 ? 2 * this.game.world.width + 120 : -this.game.world.width;
                        this.game.add
                            .tween(t)
                            .to({ x: a }, 300, Phaser.Easing.Linear.None, !0, 100, 0, !1)
                            .onComplete.addOnce(() => {
                                this.game.add.tween(t).to({ x: e }, 300, Phaser.Easing.Linear.None, !0, 1e3 * (Math.random() + 0.1), 0, !1),
                                    this.time.events.repeat(
                                        120,
                                        9,
                                        () => {
                                            this.playSoundShuffle();
                                        },
                                        this
                                    ),
                                    this.time.events.add(
                                        1500,
                                        () => {
                                            this.refreshPowerupBtns();
                                        },
                                        this
                                    );
                            }, this),
                            t.stopHintShine(),
                            t.resetDark();
                    }
                }
                this.time.events.add(
                    300,
                    () => {
                        for (; this.deck.noCombo(), !this.createFieldPath(); );
                        this.recheckActive(), (this.shuffled = 1), e && this.updateHistory();
                    },
                    this
                );
            }
            update() {
                this.tilegroup.sort("sortBy", Phaser.Group.SORT_ASCENDING),
                    this.fullScore > this.score
                        ? ((this.score += 0.03 * this.fullScore), this.score > this.fullScore && (this.score = this.fullScore), this.scoreText.setText(Math.round(this.score).toString()), this.startPlaySoundAddScore())
                        : this.fullScore < this.score
                        ? ((this.score -= 0.03 * Math.max(2e3, this.fullScore)), this.score < this.fullScore && (this.score = this.fullScore), this.scoreText.setText(Math.round(this.score).toString()), this.startPlaySoundAddScore())
                        : this.stopPlaySoundAddScore(),
                    this.isStart && this.elapsed + 1 < this.game.time.totalElapsedSeconds() && (this.second++, (this.elapsed = this.game.time.totalElapsedSeconds()));
            }
            onPowerupHelp(e) {
                e.powerupHelp.minusNum(), e.findTiles();
            }
            onPowerupEye(e) {
                e.powerupEye.minusNum(), e.highlightPossible();
            }
            onPowerupSword(e) {
                e.powerupSword.minusNum(), e.removeRandomTiles(!1), e.removeRandomTiles(!0);
            }
            onPowerupShuffle(e) {
                e.powerupShuffle.minusNum(), e.makeShuffle(!0);
            }
            onPowerupUndo(e) {
                e.undoAvailable() && (e.powerupUndo.minusNum(), e.undoMove());
            }
            removeRandomTiles(e = !1) {
                var t = this.getActiveTiles();
                let s = !1,
                    a = null,
                    i = null;
                for (let e = 0; e < t.length; ++e) {
                    a = t[e];
                    for (let e = 0; e < t.length; ++e)
                        if (a.isSameType(t[e].tileType) && a !== t[e]) {
                            (i = t[e]), (s = !0);
                            break;
                        }
                    if (s) break;
                }
                s && ((this.selectedTile = a), this.tapToTile(i, e));
            }
            highlightPossible() {
                var s = this.getActiveTiles();
                this.possibleTiles = [];
                for (let t = 0; t < s.length; ++t) {
                    var a = s[t];
                    if (-1 === this.possibleTiles.indexOf(a)) for (let e = t; e < s.length; ++e) a.isSameType(s[e].tileType) && a !== s[e] && this.possibleTiles.push(a, s[e]);
                }
                if (0 < this.possibleTiles.length) for (let e = 0; e < this.tiles.length; ++e) this.tiles[e].isDeactivated || (-1 < this.possibleTiles.indexOf(this.tiles[e]) ? this.tiles[e].hintShine() : this.tiles[e].setDark());
                this.highlightPossibleNum = this.highlightPossibleMax;
            }
            stopHighlightPossible() {
                if ((this.powerupTimer && this.powerupTimer.stop(), 0 < this.possibleTiles.length))
                    for (let e = 0; e < this.tiles.length; ++e) this.tiles[e].isDeactivated || (-1 < this.possibleTiles.indexOf(this.tiles[e]) ? this.tiles[e].stopHintShine() : this.tiles[e].resetDark());
                (this.possibleTiles = []), (this.highlightPossibleNum = -1);
            }
            undoMove() {
                if (this.undoAvailable()) {
                    var e = this.historyTiles.pop(),
                        t = this.historyTiles[this.historyTiles.length - 1],
                        i =
                            (this.historyDeckLevel.pop(),
                            this.historyInfo[this.historyInfo.length - 1][1] !== this.historyInfo[this.historyInfo.length - 2][1] && (this.fullScore = this.historyInfo[this.historyInfo.length - 2][1]),
                            1 === this.historyInfo[this.historyInfo.length - 1][0]);
                    this.historyInfo.pop(), (this.gameField = []), (this.deck.level = this.historyDeckLevel[this.historyDeckLevel.length - 1]);
                    for (let a = 0; a < e.length; a++) {
                        let s = t[a];
                        if (0 !== s[4]) {
                            var n = e[a];
                            if (i || n[0] !== s[0] || n[1] !== s[1] || n[2] !== s[2] || n[3] !== s[3] || n[4] !== s[4]) {
                                let t = this.tiles[a];
                                if (((t.inX = s[0]), (t.inY = s[1]), (t.inZ = s[2]), t.revive(), (t.alpha = 1), (t.isDeactivated = !1), (t.inputEnabled = !0), t.coordinateToCell(t), i)) {
                                    let e = t.x;
                                    var o = 0 < a % 2 ? 2 * this.game.world.width + 120 : -this.game.world.width;
                                    this.disablePowerupBtns(),
                                        this.game.add
                                            .tween(t)
                                            .to({ x: o }, 300, Phaser.Easing.Linear.None, !0, 100, 0, !1)
                                            .onComplete.addOnce(() => {
                                                t.setTileType(s[3]),
                                                    this.game.add.tween(t).to({ x: e }, 300, Phaser.Easing.Linear.None, !0, 1e3 * (Math.random() + 0.1), 0, !1),
                                                    this.time.events.repeat(
                                                        120,
                                                        9,
                                                        () => {
                                                            this.playSoundShuffle();
                                                        },
                                                        this
                                                    ),
                                                    this.time.events.add(
                                                        1500,
                                                        () => {
                                                            this.refreshPowerupBtns();
                                                        },
                                                        this
                                                    );
                                            }, this);
                                } else if (0 === n[4]) {
                                    o = t.x;
                                    let e = -40;
                                    this.isRightTile(t) && (e = 40),
                                        (t.alpha = 0),
                                        (t.x = o + e),
                                        this.game.add.tween(t).to({ x: o }, 350, Phaser.Easing.Linear.None, !0, 0, 0, !1),
                                        this.game.add.tween(t).to({ alpha: 1 }, 350, Phaser.Easing.Linear.None, !0, 0, 0, !1);
                                }
                            }
                            this.tiles[a].stopHintShine(), this.tiles[a].resetDark(), this.tiles[a].removeSelect(), this.addToField(this.tiles[a]);
                        }
                    }
                }
            }
            undoAvailable() {
                return 1 < this.historyTiles.length;
            }
            updateHistory() {
                for (this.historyDeckLevel.push(this.deck.level.slice(0, this.deck.level.length)); this.historyDeckLevel.length > this.historyDepth + 1; ) this.historyDeckLevel.shift();
                var t = [];
                for (let e = 0; e < this.tiles.length; e++) t[e] = [this.tiles[e].inX, this.tiles[e].inY, this.tiles[e].inZ, this.tiles[e].tileType, this.tiles[e].isDeactivated ? 0 : 1];
                for (this.historyTiles.push(t); this.historyTiles.length > this.historyDepth + 1; ) this.historyTiles.shift();
                for (this.historyInfo.push([this.shuffled, this.fullScore]); this.historyInfo.length > this.historyDepth + 1; ) this.historyInfo.shift();
                this.shuffled = 0;
            }
            playSoundShuffle() {
                s.SoundManager.getInstance().play(Sounds.LevelStarts[Math.floor(Math.random() * Math.floor(Sounds.LevelStarts.length))]);
            }
            startPlaySoundAddScore() {
                this.addScoreTimer || ((this.addScoreTimer = this.game.time.create()), this.addScoreTimer.loop(0.04 * Phaser.Timer.SECOND, this.playSoundAddScore, this), this.addScoreTimer.start());
            }
            stopPlaySoundAddScore() {
                this.addScoreTimer && (this.addScoreTimer.stop(), (this.addScoreTimer = null));
            }
            playSoundAddScore() {
                return s.SoundManager.getInstance().play(Sounds.ScoreAdds[Math.floor(Math.random() * Sounds.ScoreAdds.length)]);
            }
            checkHighlightPossible(e, t) {
                -1 < this.highlightPossibleNum &&
                    ((-1 < this.possibleTiles.indexOf(e) && this.possibleTiles.length <= 2) || 0 === this.highlightPossibleNum
                        ? this.stopHighlightPossible()
                        : (this.possibleTiles.splice(this.possibleTiles.indexOf(e), 1), this.possibleTiles.splice(this.possibleTiles.indexOf(t), 1), this.highlightPossibleNum--));
            }
            showTilesScore(e, t, s) {
                var a = (2 * Tile.TILE_HEIGHT) / 3,
                    i = Tile.TILE_HEIGHT;
                (this.tileScoreText1.text = "+" + s.toString()),
                    (this.tileScoreText1.alpha = 1),
                    this.tileScoreText1.position.set(e.x, e.y - a),
                    this.tilegroup.add(this.tileScoreText1),
                    this.game.add.tween(this.tileScoreText1).to({ alpha: 0, y: e.y - a - i }, 1200, Phaser.Easing.Cubic.Out, !0, 0),
                    (this.tileScoreText2.text = "+" + s.toString()),
                    (this.tileScoreText2.alpha = 1),
                    this.tileScoreText2.position.set(t.x, t.y - a),
                    this.tilegroup.add(this.tileScoreText2),
                    this.game.add.tween(this.tileScoreText2).to({ alpha: 0, y: t.y - a - i }, 1200, Phaser.Easing.Cubic.Out, !0, 0);
            }
            disablePowerupBtns(t = -1) {
                for (let e = 0; e < this.powerupBtns.length; e++) e !== t && this.powerupBtns[e].switchOff();
                -1 === t && (this.isTileMoves = !0);
            }
            refreshPowerupBtns() {
                for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].refresh();
                (this.isTileMoves = !1), this.isTut2 && this.showTut2();
            }
            showTut2() {
                this.isTut2 = !0;
                var t = this.getActiveTiles();
                for (let e = 0; e < t.length; ++e) {
                    var s = t[e];
                    for (let e = 0; e < t.length; ++e)
                        if (s.isSameType(t[e].tileType) && s !== t[e]) {
                            this.drawTutCover(s, t[e]);
                            break;
                        }
                }
            }
            drawTutCover(e, t) {
                var s = this.game.world.height / this.tilegroup.scale.y,
                    a = this.game.world.width / this.tilegroup.scale.x,
                    i =
                        (this.tut2Cover
                            ? this.tut2Cover.clear()
                            : ((this.tut2Cover = this.game.make.graphics(0, 0)),
                              (this.tut2Cover.inputEnabled = !0),
                              (this.tutArrow1 = this.game.make.image(0, 0, NeededAtlases.atlasMap[NeededImages.ARROW], NeededImages.ARROW)),
                              this.tutArrow1.anchor.set(1, 0.5),
                              (this.tutArrow2 = this.game.make.image(0, 0, NeededAtlases.atlasMap[NeededImages.ARROW], NeededImages.ARROW)),
                              this.tutArrow2.anchor.set(0.5, 0.5),
                              (this.tutArrow2.scale.x = -1),
                              this.tutArrow2.anchor.set(1, 0.5)),
                        Math.min(this.tilegroup.getIndex(e), this.tilegroup.getIndex(t))),
                    i = (this.tilegroup.addAt(this.tut2Cover, i), Math.round(this.tilegroup.x / this.tilegroup.scale.x)),
                    n = this.tilegroup.y / this.tilegroup.scale.y,
                    a =
                        ((this.tut2Cover.x = -i),
                        (this.tut2Cover.y = -n),
                        this.tut2Cover.beginFill(0, 0.6),
                        this.tut2Cover.drawRect(0, 0, a, s),
                        this.tut2Cover.endFill(),
                        this.tut2Cover.addChild(this.tutArrow1),
                        this.tut2Cover.addChild(this.tutArrow2),
                        this.tutArrow1Tween && this.tutArrow1Tween.stop(),
                        this.tutArrow2Tween && this.tutArrow2Tween.stop(),
                        Math.min(e.x, t.x)),
                    s = Math.max(e.x, t.x),
                    t = a + i - (Tile.TILE_WIDTH - Tile.X_CORRECTION) / 2,
                    a =
                        ((this.tutArrow1.x = t - 50),
                        (this.tutArrow1.y = e.y + n + Tile.Y_CORRECTION / 2),
                        (this.tutArrow1Tween = this.game.add
                            .tween(this.tutArrow1)
                            .to({ x: t - 5 }, 400, Phaser.Easing.Cubic.In)
                            .to({ x: t - 50 }, 700, Phaser.Easing.Linear.None)
                            .repeatAll(-1)),
                        this.tutArrow1Tween.start(),
                        s + i + (Tile.TILE_WIDTH - Tile.X_CORRECTION) / 2);
                (this.tutArrow2.x = a + 50),
                    (this.tutArrow2.y = this.tutArrow1.y),
                    (this.tutArrow2Tween = this.game.add
                        .tween(this.tutArrow2)
                        .to({ x: a + 5 }, 400, Phaser.Easing.Cubic.In)
                        .to({ x: a + 50 }, 700, Phaser.Easing.Linear.None)
                        .repeatAll(-1)),
                    this.tutArrow2Tween.start();
            }
            checkTut2() {
                this.isTut2 &&
                    ((this.isTut2 = !1),
                    this.tutArrow1Tween && (this.tutArrow1Tween.stop(), (this.tutArrow1Tween = null)),
                    this.tutArrow2Tween && (this.tutArrow2Tween.stop(), (this.tutArrow2Tween = null)),
                    this.tutArrow1 && (this.tutArrow1.destroy(!0), (this.tutArrow1 = null)),
                    this.tutArrow2 && (this.tutArrow2.destroy(!0), (this.tutArrow2 = null)),
                    this.tut2Cover && (this.tut2Cover.destroy(!0), (this.tut2Cover = null)),
                    (SaveGame.getInstance().isFirstPlay = !1),
                    this.panelsIn());
            }
            panelsIn() {
                this.switchPanelsVisible(!0), (this.isPanelsIn = !0);
                var t = 250,
                    s = 300,
                    a = Phaser.Easing.Quintic.In;
                if (((this.panelsTweens = []), ScaleManager.isPortrait())) {
                    this.scoreFon.position.set(this.game.world.width, 5),
                        this.bonusFon.position.set(25 + this.bonusFon.height / 2, -this.bonusFon.width / 2),
                        this.panelsTweens.push(this.game.add.tween(this.bonusFon).to({ y: this.bonusFon.width / 2 }, s, a, !0, t)),
                        this.powerupsFon.position.set(25 + this.powerupsFon.height / 2, this.game.world.height + this.powerupsFon.width / 2),
                        this.panelsTweens.push(this.game.add.tween(this.powerupsFon).to({ y: this.game.world.height - this.powerupsFon.width / 2 }, s, a, !0, t));
                    for (let e = 0; e < this.powerupBtns.length; e++)
                        this.powerupBtns[e].position.set(147 + 107 * e * Constants.SCALE_PORTRAIT, this.game.world.height + this.powerupsFon.width / 2 + 20),
                            this.panelsTweens.push(this.game.add.tween(this.powerupBtns[e]).to({ y: this.game.world.height - this.powerupsFon.width / 2 + 20 }, s, a, !0, t));
                    this.progressBar.position.set(92, -100), this.panelsTweens.push(this.game.add.tween(this.progressBar).to({ y: 118 }, s, a, !0, t));
                } else {
                    this.scoreFon.position.set(this.game.world.width, 20),
                        this.bonusFon.position.set(this.game.world.width + this.bonusFon.width / 2, this.game.world.height - this.bonusFon.height / 2 - 30),
                        this.panelsTweens.push(this.game.add.tween(this.bonusFon).to({ x: this.game.world.width - this.bonusFon.width / 2 }, s, a, !0, t)),
                        this.powerupsFon.position.set(-this.powerupsFon.width / 2, this.game.world.height - this.powerupsFon.height / 2 - 30),
                        this.panelsTweens.push(this.game.add.tween(this.powerupsFon).to({ x: this.powerupsFon.width / 2 }, s, a, !0, t));
                    for (let e = 0; e < this.powerupBtns.length; e++)
                        this.powerupBtns[e].position.set(-this.powerupsFon.width / 2 - 8, this.powerupsFon.y - this.powerupsFon.height / 2 + this.powerupHelp.height / 2 + 25 + 108 * e),
                            this.panelsTweens.push(this.game.add.tween(this.powerupBtns[e]).to({ x: this.powerupsFon.width / 2 - 8 }, s, a, !0, t));
                    this.progressBar.position.set(this.game.world.width + this.bonusFon.width / 2 + 6, this.bonusFon.y + 122),
                        this.panelsTweens.push(this.game.add.tween(this.progressBar).to({ x: this.game.world.width - this.bonusFon.width / 2 + 6 }, s, a, !0, t));
                }
                var e = this.panelsTweens.push(this.game.add.tween(this.scoreFon).to({ x: this.game.world.width - this.scoreFon.width }, s, a, !1, t));
                this.panelsTweens[e - 1].onComplete.add(this.onPanelsIn, this), this.panelsTweens[e - 1].start();
            }
            onPanelsIn() {
                for (let e = 0; e < this.panelsTweens.length; e++) this.panelsTweens[e].stop();
                (this.panelsTweens = []), (this.isPanelsIn = !1), this.rescale();
            }
            panelsOut() {
                this.isPanelsOut = !0;
                var t = 300,
                    s = Phaser.Easing.Quintic.Out;
                for (let e = 0; e < this.panelsTweens.length; e++) this.panelsTweens[e].stop();
                if (((this.panelsTweens = []), ScaleManager.isPortrait())) {
                    this.panelsTweens.push(this.game.add.tween(this.bonusFon).to({ y: -this.bonusFon.width / 2 }, t, s, !0, 0)),
                        this.panelsTweens.push(this.game.add.tween(this.powerupsFon).to({ y: this.game.world.height + this.powerupsFon.width / 2 }, t, s, !0, 0));
                    for (let e = 0; e < this.powerupBtns.length; e++) this.panelsTweens.push(this.game.add.tween(this.powerupBtns[e]).to({ y: this.game.world.height + this.powerupsFon.width / 2 + 20 }, t, s, !0, 0));
                    this.panelsTweens.push(this.game.add.tween(this.progressBar).to({ y: -100 }, t, s, !0, 0));
                } else {
                    this.panelsTweens.push(this.game.add.tween(this.bonusFon).to({ x: this.game.world.width + this.bonusFon.width / 2 }, t, s, !0, 0)),
                        this.panelsTweens.push(this.game.add.tween(this.powerupsFon).to({ x: -this.powerupsFon.width / 2 }, t, s, !0, 0));
                    for (let e = 0; e < this.powerupBtns.length; e++) this.panelsTweens.push(this.game.add.tween(this.powerupBtns[e]).to({ x: -this.powerupsFon.width / 2 - 8 }, t, s, !0, 0));
                    this.panelsTweens.push(this.game.add.tween(this.progressBar).to({ x: this.game.world.width + this.bonusFon.width / 2 + 6 }, t, s, !0, 0));
                }
                var e = this.panelsTweens.push(this.game.add.tween(this.scoreFon).to({ x: this.game.world.width }, t, Phaser.Easing.Back.In, !1));
                this.panelsTweens[e - 1].onComplete.add(this.onPanelsOut, this), this.panelsTweens[e - 1].start();
            }
            onPanelsOut() {
                for (let e = 0; e < this.panelsTweens.length; e++) this.panelsTweens[e].stop();
                (this.panelsTweens = []), (this.isPanelsOut = !1), this.switchPanelsVisible(!1);
            }
            switchPanelsVisible(t) {
                (this.scoreFon.visible = t), (this.bonusFon.visible = t), (this.powerupsFon.visible = t);
                for (let e = 0; e < this.powerupBtns.length; e++) this.powerupBtns[e].visible = t;
                this.progressBar.visible = t;
            }
        }
        (a.Name = "gameplay"), (a.pause = !1), (a.HEIGHT_BKG = 960), (a.PROGRESS_Y = 60), (s.Gameplay = a);
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (e) {
        class t extends Phaser.State {
            constructor() {
                super(), (this.name = t.Name);
            }
            init() {
                this.game.world.removeAll(), e.SoundManager.getInstance(this.game);
            }
            create() {
                (Constants.LEVELS = this.game.cache.getJSON("levels")),
                    (this.bkgPort = this.game.add.image(0, 0, Images.MainFonPort)),
                    (this.bkgLand = this.game.add.image(0, 0, Images.MainFonLand)),
                    (this.menuGroup = this.game.add.group()),
                    (this.mahjong = this.game.add.sprite(0, 0, NeededAtlases.atlasMap[NeededImages.LOGO], NeededImages.LOGO)),
                    this.mahjong.anchor.setTo(0.5, 0.5),
                    this.menuGroup.add(this.mahjong),
                    (this.mahjong.alpha = 0),
                    this.game.add.tween(this.mahjong).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, !0, 500, 0, !1),
                    (this.playButton = new TextButton(this.game, 0, 0, NeededAtlases.atlasMap[NeededImages.GREEN_BUTTON], this.startGame, this, NeededImages.GREEN_BUTTON)),
                    this.playButton.createText("play", "#66983b"),
                    this.playButton.anchor.set(0.5, 0.5),
                    (this.playButton.alpha = 0),
                    this.playButton.setAnimation(),
                    this.menuGroup.add(this.playButton),
                    this.game.add.tween(this.playButton).to({ alpha: 1 }, 1e3, Phaser.Easing.Bounce.Out, !0, 800, 0, !1),
                    h5branding.Branding.outGoingLinksAllowed() &&
                        ((this.moreGames = new TextButton(
                            this.game,
                            0,
                            0,
                            NeededAtlases.atlasMap[NeededImages.BLUE_BUTTON],
                            () => {
                                h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.more_games);
                            },
                            this,
                            NeededImages.BLUE_BUTTON
                        )),
                        this.moreGames.createText("more_games", "#2f62b6"),
                        this.moreGames.anchor.set(0.5, 0.5),
                        (this.moreGames.alpha = 0),
                        this.moreGames.setAnimation(),
                        this.menuGroup.add(this.moreGames),
                        this.game.add.tween(this.moreGames).to({ alpha: 1 }, 1e3, Phaser.Easing.Bounce.Out, !0, 800, 0, !1),
                        (this.moreGames.visible = !1)),
                    (this.options = new SoundButton2(this.game, "sound", 100, 80)),
                    this.options.anchor.set(0.5, 0.5),
                    (this.options.alpha = 0),
                    this.options.setAnimation(),
                    this.game.add.tween(this.options).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, !0, 1500, 0, !1),
                    h5branding.Utils.getBrandingDomain() !== h5branding.BrandingDomain.Neutral &&
                        ((this.refBtn = this.game.add.image(0, 0, "branding_logo")),
                        this.refBtn.anchor.set(0.5),
                        this.refBtn.position.set(200, 1265),
                        this.refBtn.scale.set(1.25),
                        h5branding.Branding.outGoingLinksAllowed() &&
                            ((this.refBtn.inputEnabled = !0),
                            this.refBtn.events.onInputUp.add(() => {
                                h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.logo);
                            })),
                        this.game.add.existing(this.refBtn)),
                    FadeInOut.instance.fadeOut(),
                    ScaleManager.onResize.add(this.rescale, this),
                    ScaleManager.SizeCalculation(this.game),
                    this.game.world.bringToTop(this.menuGroup),
                    SaveGame.getInstance().music && e.SoundManager.getInstance().playMusic(Sounds.Music);
            }
            rescale() {
                let e,
                    t = ((e = Math.round(this.game.world.height) >= Constants.BKG_MENU_SIZE + 200 ? this.game.world.height / Constants.BKG_MENU_SIZE : this.game.world.width / Constants.BKG_MENU_SIZE), Constants.SCALE_LANDSCAPE);
                if (ScaleManager.isPortrait()) {
                    (t = Constants.SCALE_PORTRAIT), (this.bkgPort.visible = !0), (this.bkgLand.visible = !1);
                    let e = 1;
                    (e = this.game.world.width / this.game.world.height < Constants.GAME_HEIGHT / Constants.GAME_WIDTH ? this.game.world.height / Constants.GAME_WIDTH : this.game.world.width / Constants.GAME_HEIGHT),
                        this.bkgPort.scale.set(e),
                        (this.bkgPort.x = (this.game.world.width - this.bkgPort.width) / 2),
                        (this.bkgPort.y = this.game.world.height - this.bkgPort.height),
                        this.menuGroup.scale.set(t),
                        (this.playButton.x = 0),
                        (this.playButton.y = 140),
                        this.moreGames && ((this.moreGames.x = this.playButton.x), (this.moreGames.y = this.playButton.y + 135)),
                        this.options.setScale(t),
                        (this.mahjong.x = 0),
                        (this.mahjong.y = -180);
                } else {
                    (this.bkgPort.visible = !1), (this.bkgLand.visible = !0);
                    let e = 1;
                    (e = this.game.world.width / this.game.world.height < Constants.GAME_WIDTH / Constants.GAME_HEIGHT ? this.game.world.height / Constants.GAME_HEIGHT : this.game.world.width / Constants.GAME_WIDTH),
                        this.bkgLand.scale.set(e),
                        (this.bkgLand.x = (this.game.world.width - this.bkgLand.width) / 2),
                        (this.bkgLand.y = this.game.world.height - this.bkgLand.height),
                        this.menuGroup.scale.set(t),
                        this.moreGames && this.moreGames.visible ? (this.playButton.x = -this.playButton.width / 2 - 20) : (this.playButton.x = 0),
                        (this.playButton.y = 200),
                        this.moreGames && ((this.moreGames.x = this.moreGames.width / 2 + 20), (this.moreGames.y = this.playButton.y)),
                        this.options.setScale(t),
                        (this.mahjong.x = 0),
                        (this.mahjong.y = -90);
                }
                var s;
                this.options.position.set(this.game.world.width - this.options.width / 2 - 60 * t, this.game.world.height - this.options.height / 2 - 60 * t),
                    this.menuGroup.position.set(this.game.world.width / 2, this.game.world.height / 2),
                    this.refBtn && ((this.refBtn.x = this.game.world.width / 2), (this.refBtn.y = this.game.world.height - 60 * t)),
                    0.8 < this.game.world.width / this.game.world.height && this.game.world.width / this.game.world.height < 1
                        ? ((s = ((0.8 * this.game.world.height) / this.game.world.width) * 0.95), this.mahjong.scale.set(s))
                        : this.mahjong.scale.set(1);
            }
            shutdown() {
                ScaleManager.onResize.remove(this.rescale, this),
                    this.moreGames && this.moreGames.destroy(!0),
                    this.mahjong.destroy(!0),
                    this.playButton.destroy(!0),
                    this.options.destroy(!0),
                    this.refBtn && this.refBtn.destroy(!0),
                    this.bkgPort.destroy(!0),
                    this.bkgLand.destroy(!0),
                    this.menuGroup.destroy(!0);
            }
            startGame() {
                FadeInOut.instance.fadeTo(e.MenuMap.Name);
            }
        }
        (t.Name = "menu"), (e.Menu = t);
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (t) {
        class e extends Phaser.State {
            constructor() {
                super(), (this.name = e.Name), (this.LEVELS = [12, 32, 62]);
            }
            init(e = !1) {
                this.isMove = e;
            }
            create() {
                (Constants.LAST_LEVEL = SaveGame.getInstance().lastLevel),
                    (Constants.OPEN_LEVEL = SaveGame.getInstance().lastLevel),
                    (this.background = this.game.add.image(0, 0, Atlases.Interface, "bg_gameplay")),
                    (this.background.width = this.game.world.width),
                    (this.background.height = this.game.world.height),
                    (this.layerIndicator = new LayerIndicator(this.game, e.ZLayer)),
                    this.layerIndicator.fillLevels(this.startLevel, this),
                    (this.backBtn = new Button(
                        this.game,
                        70,
                        80,
                        Atlases.Fun,
                        () => {
                            this.game.state.start(t.Menu.Name);
                        },
                        this,
                        "button_menu_small.png",
                        "button_menu_small.png",
                        "button_menu_small.png",
                        "button_menu_small.png"
                    )),
                    this.backBtn.anchor.set(0.5),
                    this.backBtn.setAnimation(),
                    (this.cursorLeftBtn = new Button(this.game, 70, 80, Atlases.Fun, this.moveLeft, this, "levelselect_arrow.png", "levelselect_arrow.png", "levelselect_arrow.png", "levelselect_arrow.png")),
                    this.cursorLeftBtn.anchor.set(0.5),
                    this.cursorLeftBtn.setAnimation(),
                    (this.cursorRightBtn = new Button(this.game, 70, 80, Atlases.Fun, this.moveRight, this, "levelselect_arrow.png", "levelselect_arrow.png", "levelselect_arrow.png", "levelselect_arrow.png")),
                    this.cursorRightBtn.anchor.set(0.5),
                    this.cursorRightBtn.reverseSprite(!0),
                    this.cursorRightBtn.setAnimation(),
                    h5branding.Branding.isContracted() ||
                        h5branding.Utils.getBrandingDomain() === h5branding.BrandingDomain.Bild ||
                        ((this.moreGames = new Button(
                            this.game,
                            80,
                            this.game.world.height - 50,
                            Atlases.Fun,
                            () => {
                                h5branding.Branding.openCampaignLink("mahjong-dynasty", h5branding.UtmTargets.more_games);
                            },
                            this,
                            "button_more_games.png",
                            "button_more_games.png",
                            "button_more_games_on_push.png",
                            "button_more_games.png"
                        )),
                        this.moreGames.anchor.set(0.5, 0.5),
                        (this.moreGames.alpha = 0),
                        this.moreGames.setScale(0.7),
                        this.moreGames.setAnimation()),
                    (this.pageText = this.game.add.bitmapText(0, 80, Fonts.OxygenWhiteShadow, "Levels 1-5", 50)),
                    this.pageText.anchor.set(0.5),
                    this.setActiveCursors(),
                    ScaleManager.onResize.add(this.rescale, this),
                    ScaleManager.SizeCalculation(this.game);
            }
            moveLeft() {
                this.layerIndicator.zLayer < 3 && this.layerIndicator.setLayer(1), this.setActiveCursors();
            }
            moveRight() {
                0 < this.layerIndicator.zLayer && this.layerIndicator.setLayer(-1), this.setActiveCursors();
            }
            setActiveCursors() {
                2 === this.layerIndicator.zLayer ? (this.cursorLeftBtn.deactivate(), this.cursorLeftBtn.setScale(this.cursorLeftBtn.scalex, this.cursorLeftBtn.scaley)) : this.cursorLeftBtn.inputEnabled || this.cursorLeftBtn.activate(),
                    0 === this.layerIndicator.zLayer
                        ? (this.cursorRightBtn.deactivate(), this.cursorRightBtn.setScale(this.cursorRightBtn.scalex, this.cursorRightBtn.scaley))
                        : this.cursorRightBtn.inputEnabled || this.cursorRightBtn.activate(),
                    (e.ZLayer = this.layerIndicator.zLayer),
                    (this.pageText.text = "LEVEL " + (-1 < 2 - this.layerIndicator.zLayer - 1 ? this.LEVELS[2 - this.layerIndicator.zLayer - 1] + 1 : 1).toString() + "-" + this.LEVELS[2 - this.layerIndicator.zLayer]);
            }
            shutdown() {
                ScaleManager.onResize.remove(this.rescale, this);
            }
            rescale() {
                let e;
                (e = Math.round(this.game.world.height) >= Constants.BKG_MENU_SIZE + 200 ? this.game.world.height / Constants.BKG_MENU_SIZE : this.game.world.width / Constants.BKG_MENU_SIZE),
                    (this.background.width = this.game.world.width),
                    (this.background.height = this.game.world.height),
                    ScaleManager.isPortrait()
                        ? (this.backBtn.setScale(1.4),
                          this.moreGames && this.moreGames.setScale(1.4),
                          this.cursorRightBtn.setScale(-1.4, 1.4),
                          this.cursorLeftBtn.setScale(1.4),
                          this.pageText.scale.set(2, 2),
                          this.cursorRightBtn.position.set(this.game.world.width - this.cursorLeftBtn.gWidth / 2 - 20, 20 + this.cursorRightBtn.gHeight / 2),
                          this.cursorLeftBtn.position.set(20 + this.cursorLeftBtn.gWidth / 2, 20 + this.cursorRightBtn.gHeight / 2),
                          this.pageText.position.set(this.game.world.width / 2, this.cursorRightBtn.y + this.pageText.height / 2))
                        : (this.backBtn.setScale(0.7),
                          this.moreGames && this.moreGames.setScale(0.7),
                          this.cursorRightBtn.setScale(-0.7, 0.7),
                          this.cursorLeftBtn.setScale(0.7),
                          this.pageText.scale.set(1, 1),
                          this.pageText.position.set(this.game.world.width / 2, 20 + this.pageText.height),
                          this.cursorRightBtn.position.set(this.game.world.width - this.cursorLeftBtn.gWidth / 2 - 20, this.world.height / 2),
                          this.cursorLeftBtn.position.set(20 + this.cursorLeftBtn.gWidth / 2, this.world.height / 2)),
                    this.moreGames && this.moreGames.position.set(this.game.world.width - this.moreGames.gWidth / 2 - 40, this.game.world.height - this.moreGames.gHeight / 2 - 40),
                    this.backBtn.position.set(20 + this.backBtn.gWidth / 2, this.game.world.height - this.backBtn.gHeight / 2 - 20),
                    this.layerIndicator.rescale();
            }
            startLevel(e) {
                (t.MenuLevel.ZLayer = this.layerIndicator.zLayer), (Constants.OPEN_LEVEL = e.num), FadeInOut.instance.fadeTo(t.Gameplay.Name);
            }
        }
        (e.Name = "menulevel"), (e.ZLayer = 2), (t.MenuLevel = e);
    })((MahjongDynasty = MahjongDynasty || {})),
    (function (i) {
        class e extends Phaser.State {
            constructor() {
                super(), (this.name = e.Name), (this.tweenNum = 0), (this.tweenNumMax = 10), (this.tweenNumMax2 = 100), (this.tweenDY = 0);
            }
            onMouseUp() {
                this.mouseDown = !1;
            }
            onMouseDown() {
                this.tweenNum < this.tweenNumMax2 - this.tweenNumMax && ((this.mouseDown = !0), (this.cursorY = this.game.input.y), (this.downY = this.cursorY));
            }
            init() {
                i.Map.init(this.game);
            }
            preload() {
                this.game.input.onUp.add(this.onMouseUp, this),
                    this.game.input.onDown.add(this.onMouseDown, this),
                    (this.game.input.mouse.mouseWheelCallback = this.mouseWheel.bind(this)),
                    (this.cursorY = i.Map.instance.scrollOffset),
                    (this.downY = this.cursorY);
            }
            initDarkness() {
                (this.darkness = this.game.add.sprite(this.game.world.width / 2, this.game.world.height, NeededAtlases.atlasMap[NeededImages.MAHJONG_03_11_SHADOW], NeededImages.MAHJONG_03_11_SHADOW)), this.darkness.anchor.set(0.5, 1);
            }
            create() {
                super.create(),
                    (Constants.LAST_LEVEL = SaveGame.getInstance().lastLevel),
                    (Constants.OPEN_LEVEL = SaveGame.getInstance().lastLevel),
                    this.initDarkness(),
                    (this.mouseDown = !1),
                    i.Map.instance.draw(this.game),
                    (ScaleManager.fixedScale = 1),
                    ScaleManager.onResize.add(this.resize, this),
                    ScaleManager.SizeCalculation(this.game),
                    this.fillMapWithLevels(this.startLevel, this);
            }
            update() {
                var e;
                this.mouseDown && ((e = i.Map.instance.scroll(this.game, this.cursorY - this.game.input.y)), (this.cursorY -= e)),
                    0 < this.tweenNum &&
                        (this.tweenNum > this.tweenNumMax2 - this.tweenNumMax && i.Map.instance.scroll(this.game, this.tweenDY),
                        --this.tweenNum,
                        0 === this.tweenNum
                            ? Constants.AUTO_START && ((Constants.AUTO_START = !1), this.startLevelNum(Constants.LAST_AVAILABLE_LEVEL))
                            : this.tweenNum === this.tweenNumMax2 - 12 &&
                              (i.Map.mapBtns[Constants.LAST_AVAILABLE_LEVEL].setAccess(!0, SaveGame.getInstance().levels[Constants.LAST_AVAILABLE_LEVEL].stars),
                              this.showFirework(Constants.LAST_AVAILABLE_LEVEL),
                              i.SoundManager.getInstance().play(Sounds.UnlockedLevel))),
                    i.Map.instance.draw(this.game);
            }
            resize() {
                this.darkness.destroy(), this.initDarkness(), i.Map.instance.calculateGeneratedYForSubmaps(), i.Map.instance.preventOverScroll(), this.update();
            }
            shutdown() {
                (ScaleManager.fixedScale = -1), ScaleManager.onResize.remove(this.resize, this), this.darkness && this.darkness.destroy(), i.Map.instance.shutdown();
            }
            startGame() {
                (Constants.OPEN_LEVEL = 0), FadeInOut.instance.fadeTo(i.Gameplay.Name);
            }
            startLevel(e) {
                10 < Math.abs(this.game.input.y - this.downY) ||
                    Fabrique.AdHandler.getInstance().showAd("gameplay", () => {
                        this.startLevelNum(e.num - 1);
                    });
            }
            startLevelNum(e) {
                (Constants.OPEN_LEVEL = e), FadeInOut.instance.fadeTo(i.Gameplay.Name);
            }
            fillMapWithLevels(t, s) {
                var a = Constants.LAST_AVAILABLE_LEVEL < 0;
                a && ((Constants.IS_FRESH_LEVEL = !1), (Constants.AUTO_START = !1));
                for (let e = 0; e < i.Map.mapBtns.length; ++e)
                    i.Map.mapBtns[e].onInputUp.add(t, s),
                        SaveGame.getInstance().levels[e] && SaveGame.getInstance().levels[e].isActive
                            ? (i.Map.mapBtns[e].setAccess(!0, SaveGame.getInstance().levels[e].stars), a && Constants.LAST_AVAILABLE_LEVEL < e && (Constants.LAST_AVAILABLE_LEVEL = e))
                            : i.Map.mapBtns[e].setAccess(!1);
                Constants.IS_FRESH_LEVEL
                    ? ((Constants.IS_FRESH_LEVEL = !1),
                      i.Map.mapBtns[Constants.LAST_AVAILABLE_LEVEL].setAccess(!1),
                      this.scrollToLevel(Constants.LAST_AVAILABLE_LEVEL - 1, !0),
                      i.Map.instance.draw(this.game),
                      this.scrollToLevel(Constants.LAST_AVAILABLE_LEVEL, !1))
                    : this.scrollToLevel(Constants.LAST_AVAILABLE_LEVEL, !0);
                for (let e = 0; e < Constants.POWS_NUM; ++e) Constants.pows[e] = SaveGame.getInstance().currentPows[e] || 0;
            }
            scrollToLevel(e, t) {
                t
                    ? 0 < e && ((this.tweenDY = i.Map.mapBtns[e].y - this.game.world.height + 200), i.Map.instance.scrollTo(this.game, this.tweenDY))
                    : ((this.tweenNum = this.tweenNumMax2), (this.tweenDY = (i.Map.mapBtns[e].y - i.Map.mapBtns[e - 1].y) / this.tweenNumMax));
            }
            showFirework(e) {
                var t = FireParticle.maxParticles,
                    s = this.game.add.emitter(0, 0, t);
                i.Map.mapBtns[e].addChild(s),
                    (s.particleClass = FireParticle),
                    s.makeParticles([NeededAtlases.atlasMap[NeededImages.MAHJONG_04_08_LIGHT]], [NeededImages.MAHJONG_04_08_LIGHT]),
                    (s.gravity = 250),
                    s.setAlpha(1, 0, 1e3, Phaser.Easing.Cubic.In),
                    s.setSize(1, 1),
                    s.setXSpeed(-300, 300),
                    s.setYSpeed(-300, 300),
                    s.flow(1e3, 1500, t, 1);
            }
            mouseWheel() {
                this.mouseDown || (this.game.input.mouse.wheelDelta === Phaser.Mouse.WHEEL_UP ? i.Map.instance.scrollTo(this.game, i.Map.instance.scrollOffset + 25) : i.Map.instance.scrollTo(this.game, i.Map.instance.scrollOffset - 25));
            }
        }
        (e.Name = "menumap"), (e.pause = !1), (i.MenuMap = e);
    })((MahjongDynasty = MahjongDynasty || {}));
